{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.gitignore","hash":"c8d6a73b9e17f0f8a3716e4ada6960d3180425a6","modified":1477718809990},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1477718809990},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1477718809990},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1477718809990},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1477718809990},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1477718809990},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1477718809990},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1477718809990},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1477718809990},{"_id":"themes/next/gulpfile.coffee","hash":"d267332ec1461042fb16a9cb0737e1555fb4b79e","modified":1477718809990},{"_id":"themes/next/_config.yml","hash":"289e1f8eabbd1783b34f11d3d063d9569d9849be","modified":1477719256326},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1477718810002},{"_id":"source/_drafts/2016-07-08-JavaScript笔记-事件.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477717543192},{"_id":"source/_drafts/2016-06-24-SQL语法之CRUD.md","hash":"29d95a8431fad14b72d97ecfc938acf7a2199db4","modified":1477717543192},{"_id":"source/_drafts/2016-06-29-flask随笔.md","hash":"62577c1b5d13badbf509b931690d0f40f66d4358","modified":1477717543192},{"_id":"source/_drafts/2016-06-29-python进阶笔记.md","hash":"3fe8c7a38b835fd690f4a7e6bc82a31ad1dfc007","modified":1477717543192},{"_id":"source/_drafts/2016-07--04-Sublime简明用法.md","hash":"1f3e3ee41befbec9b179df349d2cde5156b733f2","modified":1477717543192},{"_id":"source/_drafts/2016-07-07-Ping,traceroute和mtr.md","hash":"a3690a50eeaa00a87d08aa0ac44289d69458822c","modified":1477717543192},{"_id":"source/_drafts/2016-07-07-atom简明用法.md","hash":"707ed2645c69621bbd2e0442e95218aebb4853a8","modified":1477717543192},{"_id":"source/_drafts/2016-07-25-javascript陷阱.md","hash":"a3d418a390ac2a14b66a71844177467653a46536","modified":1477717543192},{"_id":"source/_drafts/2016-08-06-css进阶笔记.md","hash":"aa091941ec99cc889dec296462ec2876dcab7c26","modified":1477717543196},{"_id":"source/_drafts/2016-08-07-JavaScript--BOM.md","hash":"393895cf0062f527c8a133181ab9db4c1bf876d1","modified":1477717543196},{"_id":"source/_drafts/2016-08-07-等同于JQuery方法的原生JavaScript.md","hash":"a58661a3c1b7f8246c8b8680e52dfb28727586e8","modified":1477717543196},{"_id":"source/_drafts/2016-08-09-JavaScript-表单.md","hash":"f280b76d53a2b5bd8da9cd8d87e088a85800b2f6","modified":1477717543196},{"_id":"source/_drafts/2016-08-11-Node笔记.md","hash":"cba624cf62121bc3e71b44d2d75c4a5a170d35a0","modified":1477717543196},{"_id":"source/_drafts/2016-08-14-JavaScript-引用类型.md","hash":"00beab39f38e023816413adbd2599556a43944fb","modified":1477717543200},{"_id":"source/_drafts/2016-08-15-JavaScript-DOM扩展.md","hash":"1aa67e509aa95651d71144e51fa86bd610d7a442","modified":1477717543200},{"_id":"source/_drafts/2016-08-17-HTML5-Video-and-Audio.md","hash":"81b48cb82f5ab04f069e435dbb5ebc03e540a9ff","modified":1477717543200},{"_id":"source/_drafts/2016-08-28-SVG.md","hash":"d6153d729875f800e20e489191cde483bfb3d3fe","modified":1477717543200},{"_id":"source/_drafts/2016-09-02-CSS揭秘.md","hash":"c93d958878f48e29765c96917f63d5489072cab1","modified":1477717543200},{"_id":"source/_drafts/SVG.md","hash":"87ecb154cd12c5b4fcd961fac234057523842f21","modified":1477717543204},{"_id":"source/_drafts/2016-6-29-python入门笔记.md","hash":"9d6fde3325f2de4a4afbf3cbfb7cf06fa896dcdb","modified":1477717543200},{"_id":"source/_drafts/2016-09-11-Mongodb.md","hash":"c67771d357e04826480aab5a9bed54abf69a73b6","modified":1477717543200},{"_id":"source/_drafts/学习express.md","hash":"264b6153b82339aa4e541123c6d7bcc10fd5471e","modified":1478017049672},{"_id":"source/_drafts/学习mongoose基本语法.md","hash":"73a8bff11c23241b1112116f2ae4facbc3831b63","modified":1478017048252},{"_id":"source/_drafts/2016-7-10-placehoder.md","hash":"e5d6b5d619e09d350b4d562cf555b30956d1d5a4","modified":1477717543200},{"_id":"source/_drafts/Some-ideas.md","hash":"b41495ad9fcfc03beb99ea3e1334c07e327df5c0","modified":1477717543204},{"_id":"source/_drafts/whatever","hash":"3eaf422d4e6f5003e39701793a5cf9d8205de83c","modified":1477717543204},{"_id":"source/_posts/Atom简明用法.md","hash":"8306a42ab7d8acdf77c00984e2d182926b9ca29d","modified":1477719217070},{"_id":"source/_posts/JavaScript变量，作用域和内存问题.md","hash":"9fdb01ea0da821e4f5a08e2042385aa0999b3cd7","modified":1477719132918},{"_id":"source/_posts/prototype.md","hash":"db0777f610031472aa5a32007f3cf2797eb66d14","modified":1478271995032},{"_id":"source/_posts/学习mongo-shell.md","hash":"3d9d1d789d6603473a6fe8b41fa90ee9c2e83417","modified":1477813845558},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1477718809990},{"_id":"source/_posts/JavaScript基本概念.md","hash":"58a5c22d01786c8cc29cc80e282978bf76f68c3e","modified":1477719177450},{"_id":"source/_posts/Markdown常用语法.md","hash":"74b947fea255960ab637bfb1e3cfa5616c2f6f63","modified":1477719214706},{"_id":"themes/next/.git/config","hash":"91b6a53b2a7f929b698734717a38d4ac169f0c1f","modified":1477718809990},{"_id":"source/_posts/关于style弹出层的思考.md","hash":"5d3cd148939255f2c6f6edc7cbf55e741fe4e287","modified":1477719207974},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1477718769178},{"_id":"themes/next/.git/index","hash":"cdd9710a597bb4afad7db29b15e3568862163525","modified":1477722148971},{"_id":"themes/next/.git/packed-refs","hash":"e31117651c0ba696618bdd42320eb8b5ada32440","modified":1477718809986},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1477718809990},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1477718809990},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1477718809990},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1477718809990},{"_id":"themes/next/languages/en.yml","hash":"63de36e9f5822084b61b03a507f6246f8f962b3f","modified":1477718809990},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1477718809990},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1477718809990},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1477718809990},{"_id":"themes/next/languages/ko.yml","hash":"ce8b047c89daae77c03482fc76f16ffec6bdbf2d","modified":1477718809990},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1477718809990},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1477718809994},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1477718809994},{"_id":"themes/next/languages/zh-Hans.yml","hash":"ed36a28104f3c185fc4a0b3e52071d0efabe168c","modified":1477718809994},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1477718809994},{"_id":"themes/next/layout/_layout.swig","hash":"627aa021dd052d3700e84f8c2eeabd4e30989158","modified":1477718809994},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1477718809994},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1477718810002},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1477718810002},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1477718810002},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1477718810002},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1477718810002},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1477718810002},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1477718810002},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1477718810002},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1477718810166},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1477718810166},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1477718810166},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477718810142},{"_id":"source/_drafts/code/AJAX.js","hash":"0a77d4d3cdadaf4c12ae2a896c6423173007aa40","modified":1477717543200},{"_id":"source/_drafts/code/errorHandle.js","hash":"7581abf80fe460de80379b689a6b305b304e2a59","modified":1477717543200},{"_id":"source/_drafts/code/functional.js","hash":"9273ec326721958e50659c01106225fa33c8a8f8","modified":1477717543200},{"_id":"source/_drafts/code/oo.js","hash":"0ca167f20208703af56bfc6f0ac9939f549e5d62","modified":1477717543200},{"_id":"source/_drafts/code/res.php","hash":"e0fc3b6407f9633a193587a24556a72cbcc80b64","modified":1477717543204},{"_id":"source/_drafts/code/ajax.html","hash":"172d8bdbac771847e91475897afd5835a9420d12","modified":1477717543200},{"_id":"source/_drafts/code/stuff.html","hash":"8b527b3ecc6ae779d87ae7a51bf9773c365c4f11","modified":1477717543204},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1477718769178},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1477718769178},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1477718769178},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1477718769178},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1477718769178},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1477718769178},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1477718769178},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1477718769178},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1477718769178},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1477718769178},{"_id":"themes/next/.git/logs/HEAD","hash":"e0883b0d1981e03feb27d861dd0a508e62426a4a","modified":1477718809990},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"bc311e9f4333188da5c9c721ae467ba14410d5b2","modified":1477718809994},{"_id":"themes/next/layout/_macro/post.swig","hash":"ea40d388ae190e2228cbe54f054be621e3fa061c","modified":1477718809994},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1477718809994},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"084867c289c95c5ebc18435a3b2092091bb8e2ba","modified":1477718809994},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1477718809994},{"_id":"themes/next/layout/_partials/comments.swig","hash":"58fd826ca75b0cbc48b61a58da4b841e2fa34403","modified":1477718809994},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1477718809994},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4fe588ff8ba8587885c2936db2df490774f89e10","modified":1477718809994},{"_id":"themes/next/layout/_partials/head.swig","hash":"06b6604176367af52587312e2575b52ecf53c3d9","modified":1477718809994},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1477718809994},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1477718809994},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1477718809994},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1477718809998},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1477718809998},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1477718809998},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1477718810002},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1477718810002},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1477718810002},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1477718810002},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1477718810142},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1477718810142},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1477718810142},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1477718810142},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1477718810142},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1477718810142},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1477718810142},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1477718810142},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1477718810142},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1477718810142},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1477718810142},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1477718810142},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1477718810142},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1477718810142},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477718809998},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477718809998},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477718810010},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477718810010},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477718810010},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477718810142},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477718810142},{"_id":"themes/next/.git/refs/heads/master","hash":"d36f6d651a14df9393aefd229995a965ad126eca","modified":1477718809990},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1477718809994},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1477718809994},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1477718809994},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1477718809994},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1477718809994},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1477718809994},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1477718809994},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1477718809994},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1477718809998},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1477718809998},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1477718809998},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1477718810002},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1477718810002},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"60a51a33416e2b86ac9fbefc86b80f2f5f60e1c0","modified":1477718810002},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1477718810002},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1477718810002},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1477718810002},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1477718810010},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1477718810010},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1477718810010},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1477718810142},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1477718810142},{"_id":"themes/next/source/css/_variables/base.styl","hash":"3f0d6aa424f434e82ea507f740eeff110f996269","modified":1477718810142},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1477718810142},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1477718810142},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1477718810142},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1477718810142},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1477718810142},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1477718810142},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1477718810142},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1477718810142},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1477718810146},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1477718810146},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1477718810142},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1477718810146},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1477718810146},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1477718810146},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1477718810146},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1477718810146},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1477718810146},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1477718810158},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1477718810162},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1477718810162},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1477718810162},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1477718810162},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1477718810162},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1477718810162},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1477718810162},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1477718810162},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1477718810166},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1477718810166},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1477718810166},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1477718810146},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1477718810162},{"_id":"themes/next/.git/objects/pack/pack-26d81fcbc983244e4f41129af2ccbecd702a2e0f.idx","hash":"f66a5614f99b93c017c2eb1344b6b5ff1dac373f","modified":1477718809482},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"e0883b0d1981e03feb27d861dd0a508e62426a4a","modified":1477718809990},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1477718809990},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1477718809998},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1477718809998},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1477718809998},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1477718810002},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1477718810002},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1477718810002},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3065c1bcb54da1e0018136595741341ac71ef9e7","modified":1477718810002},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1477718810002},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1477718810002},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1477718810002},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1477718810002},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1477718810002},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1477718810010},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1477718810010},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1477718810010},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1477718810010},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1477718810010},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1477718810010},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1477718810010},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1477718810010},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1477718810010},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1477718810010},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1477718810010},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1477718810010},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1477718810010},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1477718810010},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1477718810138},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1477718810138},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1477718810138},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1477718810138},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1477718810138},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1477718810138},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1477718810138},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"7b206cd8921bc042f8e37a74aea1abc8a5ec8ab4","modified":1477718810138},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1477718810138},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1477718810138},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1477718810138},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1477718810138},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1477718810142},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1477718810142},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1477718810146},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1477718810146},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1477718810146},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1477718810146},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1477718810146},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1477718810146},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1477718810146},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1477718810146},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1477718810146},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1477718810146},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1477718810150},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1477718810146},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1477718810158},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1477718810146},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1477718810162},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1477718810162},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1477718810150},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1477718810150},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1477718810158},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1477718810162},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"e0883b0d1981e03feb27d861dd0a508e62426a4a","modified":1477718809990},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1477718810002},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"d23db2f598b8eb274680023745ba6d6d466cd84a","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1477718810010},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1477718810006},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1477718810010},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1477718810010},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1477718810010},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1477718810010},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1477718810010},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1477718810010},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1477718810010},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1477718810010},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1477718810010},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1477718810010},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1477718810010},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1477718810138},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1477718810146},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1477718810010},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1477718810146},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1477718810146},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1477718810146},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1477718810146},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1477718810146},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1477718810158},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1477718810154},{"_id":"themes/next/.git/objects/pack/pack-26d81fcbc983244e4f41129af2ccbecd702a2e0f.pack","hash":"712e29eb8631e844a0fa1c47c433296a1afebecd","modified":1477718809478}],"Category":[],"Data":[],"Page":[],"Post":[{"_content":"","source":"_drafts/2016-07-08-JavaScript笔记-事件.md","raw":"","slug":"2016-07-08-JavaScript笔记-事件","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.192Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzs8r0000n9fk3sv09j8j","content":"","excerpt":"","more":""},{"_content":"# Flask\n\n## python与pip版本问题　 \npython最新版本python3,然而ubuntu16.04默认的python命令默认激活‘/usr/bin/pyhton2.7’,python2和python3各自有各自的包安装工具，python2使用pip,python3使用pip3.\n\n## 安装和配置　virtualenv\nvirtualenv可以为一个工程创建一个虚拟环境，在这个环境中你可以使用任何版本的python和包，而与系统的主版本和包无关。\n```\nsudo apt-get install python-virtualenv\n```\n然后,如果想使用python3作为开发环境。则执行\n```\nvirtualenv -p python3 <filename>\n```\n\n## 安装flask及各模块\n```\n$ flask/bin/pip install flask\n$ flask/bin/pip install flask-login\n$ flask/bin/pip install flask-openid\n$ flask/bin/pip install flask-mail\n$ flask/bin/pip install flask-sqlalchemy\n$ flask/bin/pip install sqlalchemy-migrate\n$ flask/bin/pip install flask-whooshalchemy\n$ flask/bin/pip install flask-wtf\n$ flask/bin/pip install flask-babel\n$ flask/bin/pip install guess_language\n$ flask/bin/pip install flipflop\n$ flask/bin/pip install coverage\n```\n\n","source":"_drafts/2016-06-29-flask随笔.md","raw":"# Flask\n\n## python与pip版本问题　 \npython最新版本python3,然而ubuntu16.04默认的python命令默认激活‘/usr/bin/pyhton2.7’,python2和python3各自有各自的包安装工具，python2使用pip,python3使用pip3.\n\n## 安装和配置　virtualenv\nvirtualenv可以为一个工程创建一个虚拟环境，在这个环境中你可以使用任何版本的python和包，而与系统的主版本和包无关。\n```\nsudo apt-get install python-virtualenv\n```\n然后,如果想使用python3作为开发环境。则执行\n```\nvirtualenv -p python3 <filename>\n```\n\n## 安装flask及各模块\n```\n$ flask/bin/pip install flask\n$ flask/bin/pip install flask-login\n$ flask/bin/pip install flask-openid\n$ flask/bin/pip install flask-mail\n$ flask/bin/pip install flask-sqlalchemy\n$ flask/bin/pip install sqlalchemy-migrate\n$ flask/bin/pip install flask-whooshalchemy\n$ flask/bin/pip install flask-wtf\n$ flask/bin/pip install flask-babel\n$ flask/bin/pip install guess_language\n$ flask/bin/pip install flipflop\n$ flask/bin/pip install coverage\n```\n\n","slug":"2016-06-29-flask随笔","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.192Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzs9v0001n9fkuek0s1ep","content":"<h1 id=\"Flask\"><a href=\"#Flask\" class=\"headerlink\" title=\"Flask\"></a>Flask</h1><h2 id=\"python与pip版本问题\"><a href=\"#python与pip版本问题\" class=\"headerlink\" title=\"python与pip版本问题　\"></a>python与pip版本问题　</h2><p>python最新版本python3,然而ubuntu16.04默认的python命令默认激活‘/usr/bin/pyhton2.7’,python2和python3各自有各自的包安装工具，python2使用pip,python3使用pip3.</p>\n<h2 id=\"安装和配置-virtualenv\"><a href=\"#安装和配置-virtualenv\" class=\"headerlink\" title=\"安装和配置　virtualenv\"></a>安装和配置　virtualenv</h2><p>virtualenv可以为一个工程创建一个虚拟环境，在这个环境中你可以使用任何版本的python和包，而与系统的主版本和包无关。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install python-virtualenv</div></pre></td></tr></table></figure></p>\n<p>然后,如果想使用python3作为开发环境。则执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">virtualenv -p python3 &lt;filename&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"安装flask及各模块\"><a href=\"#安装flask及各模块\" class=\"headerlink\" title=\"安装flask及各模块\"></a>安装flask及各模块</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ flask/bin/pip install flask</div><div class=\"line\">$ flask/bin/pip install flask-login</div><div class=\"line\">$ flask/bin/pip install flask-openid</div><div class=\"line\">$ flask/bin/pip install flask-mail</div><div class=\"line\">$ flask/bin/pip install flask-sqlalchemy</div><div class=\"line\">$ flask/bin/pip install sqlalchemy-migrate</div><div class=\"line\">$ flask/bin/pip install flask-whooshalchemy</div><div class=\"line\">$ flask/bin/pip install flask-wtf</div><div class=\"line\">$ flask/bin/pip install flask-babel</div><div class=\"line\">$ flask/bin/pip install guess_language</div><div class=\"line\">$ flask/bin/pip install flipflop</div><div class=\"line\">$ flask/bin/pip install coverage</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"Flask\"><a href=\"#Flask\" class=\"headerlink\" title=\"Flask\"></a>Flask</h1><h2 id=\"python与pip版本问题\"><a href=\"#python与pip版本问题\" class=\"headerlink\" title=\"python与pip版本问题　\"></a>python与pip版本问题　</h2><p>python最新版本python3,然而ubuntu16.04默认的python命令默认激活‘/usr/bin/pyhton2.7’,python2和python3各自有各自的包安装工具，python2使用pip,python3使用pip3.</p>\n<h2 id=\"安装和配置-virtualenv\"><a href=\"#安装和配置-virtualenv\" class=\"headerlink\" title=\"安装和配置　virtualenv\"></a>安装和配置　virtualenv</h2><p>virtualenv可以为一个工程创建一个虚拟环境，在这个环境中你可以使用任何版本的python和包，而与系统的主版本和包无关。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install python-virtualenv</div></pre></td></tr></table></figure></p>\n<p>然后,如果想使用python3作为开发环境。则执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">virtualenv -p python3 &lt;filename&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"安装flask及各模块\"><a href=\"#安装flask及各模块\" class=\"headerlink\" title=\"安装flask及各模块\"></a>安装flask及各模块</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ flask/bin/pip install flask</div><div class=\"line\">$ flask/bin/pip install flask-login</div><div class=\"line\">$ flask/bin/pip install flask-openid</div><div class=\"line\">$ flask/bin/pip install flask-mail</div><div class=\"line\">$ flask/bin/pip install flask-sqlalchemy</div><div class=\"line\">$ flask/bin/pip install sqlalchemy-migrate</div><div class=\"line\">$ flask/bin/pip install flask-whooshalchemy</div><div class=\"line\">$ flask/bin/pip install flask-wtf</div><div class=\"line\">$ flask/bin/pip install flask-babel</div><div class=\"line\">$ flask/bin/pip install guess_language</div><div class=\"line\">$ flask/bin/pip install flipflop</div><div class=\"line\">$ flask/bin/pip install coverage</div></pre></td></tr></table></figure>\n"},{"_content":"# python进阶基本\n\n## 把函数作为参数\npython支持高级函数，在编写函数的时候，可以将另一个函数作为该函数的一个参数传入\n\n## map()函数\npython内置的函数，可以传入一个`list`和一个函数`f`,并通过把函数`f`依次作用在`list` 的每个元素上，得到一个新的`list`并返回。\n\nps:`map()`函数不改变`list`,只是单纯的返回一个新的`list`\n\n## reduce()函数\n","source":"_drafts/2016-06-29-python进阶笔记.md","raw":"# python进阶基本\n\n## 把函数作为参数\npython支持高级函数，在编写函数的时候，可以将另一个函数作为该函数的一个参数传入\n\n## map()函数\npython内置的函数，可以传入一个`list`和一个函数`f`,并通过把函数`f`依次作用在`list` 的每个元素上，得到一个新的`list`并返回。\n\nps:`map()`函数不改变`list`,只是单纯的返回一个新的`list`\n\n## reduce()函数\n","slug":"2016-06-29-python进阶笔记","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.192Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzsa20002n9fkwmemtvyu","content":"<h1 id=\"python进阶基本\"><a href=\"#python进阶基本\" class=\"headerlink\" title=\"python进阶基本\"></a>python进阶基本</h1><h2 id=\"把函数作为参数\"><a href=\"#把函数作为参数\" class=\"headerlink\" title=\"把函数作为参数\"></a>把函数作为参数</h2><p>python支持高级函数，在编写函数的时候，可以将另一个函数作为该函数的一个参数传入</p>\n<h2 id=\"map-函数\"><a href=\"#map-函数\" class=\"headerlink\" title=\"map()函数\"></a>map()函数</h2><p>python内置的函数，可以传入一个<code>list</code>和一个函数<code>f</code>,并通过把函数<code>f</code>依次作用在<code>list</code> 的每个元素上，得到一个新的<code>list</code>并返回。</p>\n<p>ps:<code>map()</code>函数不改变<code>list</code>,只是单纯的返回一个新的<code>list</code></p>\n<h2 id=\"reduce-函数\"><a href=\"#reduce-函数\" class=\"headerlink\" title=\"reduce()函数\"></a>reduce()函数</h2>","excerpt":"","more":"<h1 id=\"python进阶基本\"><a href=\"#python进阶基本\" class=\"headerlink\" title=\"python进阶基本\"></a>python进阶基本</h1><h2 id=\"把函数作为参数\"><a href=\"#把函数作为参数\" class=\"headerlink\" title=\"把函数作为参数\"></a>把函数作为参数</h2><p>python支持高级函数，在编写函数的时候，可以将另一个函数作为该函数的一个参数传入</p>\n<h2 id=\"map-函数\"><a href=\"#map-函数\" class=\"headerlink\" title=\"map()函数\"></a>map()函数</h2><p>python内置的函数，可以传入一个<code>list</code>和一个函数<code>f</code>,并通过把函数<code>f</code>依次作用在<code>list</code> 的每个元素上，得到一个新的<code>list</code>并返回。</p>\n<p>ps:<code>map()</code>函数不改变<code>list</code>,只是单纯的返回一个新的<code>list</code></p>\n<h2 id=\"reduce-函数\"><a href=\"#reduce-函数\" class=\"headerlink\" title=\"reduce()函数\"></a>reduce()函数</h2>"},{"layout":"post","title":"","description":null,"_content":"\n## SQL structure query language \n\n###数据类型\nSQL中基本的数据类型有INTEGER,TEXT\n\n### 创建表格\n\n```sql\nCREATE TABLE <table name here>(key-数据类型);\n```\n\n### 插入数据\n\n```sql\nINSERT INTO <table name here> VALUES(values here); //插入的为表名，所以value要与key一一对应\nor\nINSERT INTO <key> VALUES(values here)//插入为整个表的部分key，后面的value与之对应\n```\nPS:使id自动编号，要把id的数据类型设置为INTEGER PRIMARY KEY\n\n### 数据选择\n\n####基本选择\n\n```sql\nSELECT * FROM <table name here>;  //选择所有数据\nSELECT <column name here> FROM <table name here>;  //选择某列\n```\n\n#### 数据运算\n```sql\nSELECT SUM/AVG/MAX/MIN<column name here> AS <alias>\n```\n#### 条件选择 \n使用`WHERE`来进行条件选择\n使用`AS`来对新增加的一个列取名\n```sql\nSELECT <column name here> FROM <table name here > WHERE <some condition here,like id > 50 >;/进行比较运算\nAND/OR　//进行位操作\nSELECT * FROM <table name here> WHERE <column name here>IN　<keyword>//选取某一列中包含该keyword的列\nGROUP BY //将几行重复的keyword　group\nHAVING  //与WHERE类似，它的操作对象是GROUP后的对象\nJOIN\nself join\nLEFT OUTER JOIN\n<!-- ASC DESC -->\n<!-- HAVING   -->\n\n```\n\n### 数据排序\n```sql\nSELECT <column name here> FROM <table name here> ORDER BY <column name>;  \nSELECT <column name here> FROM <table name here> GROUP BY <column name>;   ????  \n```\n\n\n### 数据修改\n```sql\nUPDATE <table name here> SET <how rows change > WHERE <pick out which row to update>\n\nDELETE FROM <table name here> WHERE <pick out which row to DELETE>\n\nDROP TABLE <table name here>;  <!-- 删除整个表格 -->\n\nALERT TABLE <table name here> ADD <schema>;\n```\n","source":"_drafts/2016-06-24-SQL语法之CRUD.md","raw":"---\nlayout: post\ntitle: \ntag: SQL\ndescription:\n---\n\n## SQL structure query language \n\n###数据类型\nSQL中基本的数据类型有INTEGER,TEXT\n\n### 创建表格\n\n```sql\nCREATE TABLE <table name here>(key-数据类型);\n```\n\n### 插入数据\n\n```sql\nINSERT INTO <table name here> VALUES(values here); //插入的为表名，所以value要与key一一对应\nor\nINSERT INTO <key> VALUES(values here)//插入为整个表的部分key，后面的value与之对应\n```\nPS:使id自动编号，要把id的数据类型设置为INTEGER PRIMARY KEY\n\n### 数据选择\n\n####基本选择\n\n```sql\nSELECT * FROM <table name here>;  //选择所有数据\nSELECT <column name here> FROM <table name here>;  //选择某列\n```\n\n#### 数据运算\n```sql\nSELECT SUM/AVG/MAX/MIN<column name here> AS <alias>\n```\n#### 条件选择 \n使用`WHERE`来进行条件选择\n使用`AS`来对新增加的一个列取名\n```sql\nSELECT <column name here> FROM <table name here > WHERE <some condition here,like id > 50 >;/进行比较运算\nAND/OR　//进行位操作\nSELECT * FROM <table name here> WHERE <column name here>IN　<keyword>//选取某一列中包含该keyword的列\nGROUP BY //将几行重复的keyword　group\nHAVING  //与WHERE类似，它的操作对象是GROUP后的对象\nJOIN\nself join\nLEFT OUTER JOIN\n<!-- ASC DESC -->\n<!-- HAVING   -->\n\n```\n\n### 数据排序\n```sql\nSELECT <column name here> FROM <table name here> ORDER BY <column name>;  \nSELECT <column name here> FROM <table name here> GROUP BY <column name>;   ????  \n```\n\n\n### 数据修改\n```sql\nUPDATE <table name here> SET <how rows change > WHERE <pick out which row to update>\n\nDELETE FROM <table name here> WHERE <pick out which row to DELETE>\n\nDROP TABLE <table name here>;  <!-- 删除整个表格 -->\n\nALERT TABLE <table name here> ADD <schema>;\n```\n","slug":"2016-06-24-SQL语法之CRUD","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.192Z","comments":1,"photos":[],"link":"","_id":"civ3wzsa50003n9fkrfkr9u2o","content":"<h2 id=\"SQL-structure-query-language\"><a href=\"#SQL-structure-query-language\" class=\"headerlink\" title=\"SQL structure query language\"></a>SQL structure query language</h2><p>###数据类型<br>SQL中基本的数据类型有INTEGER,TEXT</p>\n<h3 id=\"创建表格\"><a href=\"#创建表格\" class=\"headerlink\" title=\"创建表格\"></a>创建表格</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> &lt;<span class=\"keyword\">table</span> <span class=\"keyword\">name</span> here&gt;(<span class=\"keyword\">key</span>-数据类型);</div></pre></td></tr></table></figure>\n<h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> &lt;<span class=\"keyword\">table</span> <span class=\"keyword\">name</span> here&gt; <span class=\"keyword\">VALUES</span>(<span class=\"keyword\">values</span> here); //插入的为表名，所以value要与key一一对应</div><div class=\"line\">or</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> &lt;<span class=\"keyword\">key</span>&gt; <span class=\"keyword\">VALUES</span>(<span class=\"keyword\">values</span> here)//插入为整个表的部分<span class=\"keyword\">key</span>，后面的<span class=\"keyword\">value</span>与之对应</div></pre></td></tr></table></figure>\n<p>PS:使id自动编号，要把id的数据类型设置为INTEGER PRIMARY KEY</p>\n<h3 id=\"数据选择\"><a href=\"#数据选择\" class=\"headerlink\" title=\"数据选择\"></a>数据选择</h3><p>####基本选择</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> &lt;<span class=\"keyword\">table</span> <span class=\"keyword\">name</span> here&gt;;  //选择所有数据</div><div class=\"line\"><span class=\"keyword\">SELECT</span> &lt;<span class=\"keyword\">column</span> <span class=\"keyword\">name</span> here&gt; <span class=\"keyword\">FROM</span> &lt;<span class=\"keyword\">table</span> <span class=\"keyword\">name</span> here&gt;;  //选择某列</div></pre></td></tr></table></figure>\n<h4 id=\"数据运算\"><a href=\"#数据运算\" class=\"headerlink\" title=\"数据运算\"></a>数据运算</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">SUM</span>/<span class=\"keyword\">AVG</span>/<span class=\"keyword\">MAX</span>/<span class=\"keyword\">MIN</span>&lt;<span class=\"keyword\">column</span> <span class=\"keyword\">name</span> here&gt; <span class=\"keyword\">AS</span> &lt;<span class=\"keyword\">alias</span>&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"条件选择\"><a href=\"#条件选择\" class=\"headerlink\" title=\"条件选择\"></a>条件选择</h4><p>使用<code>WHERE</code>来进行条件选择<br>使用<code>AS</code>来对新增加的一个列取名<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> &lt;<span class=\"keyword\">column</span> <span class=\"keyword\">name</span> here&gt; <span class=\"keyword\">FROM</span> &lt;<span class=\"keyword\">table</span> <span class=\"keyword\">name</span> here &gt; <span class=\"keyword\">WHERE</span> &lt;<span class=\"keyword\">some</span> condition here,<span class=\"keyword\">like</span> <span class=\"keyword\">id</span> &gt; <span class=\"number\">50</span> &gt;;/进行比较运算</div><div class=\"line\">AND/OR　//进行位操作</div><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> &lt;<span class=\"keyword\">table</span> <span class=\"keyword\">name</span> here&gt; <span class=\"keyword\">WHERE</span> &lt;<span class=\"keyword\">column</span> <span class=\"keyword\">name</span> here&gt;<span class=\"keyword\">IN</span>　&lt;keyword&gt;//选取某一列中包含该keyword的列</div><div class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> //将几行重复的keyword　<span class=\"keyword\">group</span></div><div class=\"line\"><span class=\"keyword\">HAVING</span>  //与<span class=\"keyword\">WHERE</span>类似，它的操作对象是<span class=\"keyword\">GROUP</span>后的对象</div><div class=\"line\"><span class=\"keyword\">JOIN</span></div><div class=\"line\"><span class=\"keyword\">self</span> <span class=\"keyword\">join</span></div><div class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span></div><div class=\"line\">&lt;!<span class=\"comment\">-- ASC DESC --&gt;</span></div><div class=\"line\">&lt;!<span class=\"comment\">-- HAVING   --&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"数据排序\"><a href=\"#数据排序\" class=\"headerlink\" title=\"数据排序\"></a>数据排序</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> &lt;<span class=\"keyword\">column</span> <span class=\"keyword\">name</span> here&gt; <span class=\"keyword\">FROM</span> &lt;<span class=\"keyword\">table</span> <span class=\"keyword\">name</span> here&gt; <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> &lt;<span class=\"keyword\">column</span> <span class=\"keyword\">name</span>&gt;;  </div><div class=\"line\"><span class=\"keyword\">SELECT</span> &lt;<span class=\"keyword\">column</span> <span class=\"keyword\">name</span> here&gt; <span class=\"keyword\">FROM</span> &lt;<span class=\"keyword\">table</span> <span class=\"keyword\">name</span> here&gt; <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> &lt;<span class=\"keyword\">column</span> <span class=\"keyword\">name</span>&gt;;   ????</div></pre></td></tr></table></figure>\n<h3 id=\"数据修改\"><a href=\"#数据修改\" class=\"headerlink\" title=\"数据修改\"></a>数据修改</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">UPDATE &lt;table name here&gt; SET &lt;how rows change &gt; WHERE &lt;pick out which row to update&gt;</div><div class=\"line\"></div><div class=\"line\">DELETE FROM &lt;table name here&gt; WHERE &lt;pick out which row to DELETE&gt;</div><div class=\"line\"></div><div class=\"line\">DROP TABLE &lt;table name here&gt;;  &lt;!-- 删除整个表格 --&gt;</div><div class=\"line\"></div><div class=\"line\">ALERT TABLE &lt;table name here&gt; ADD &lt;schema&gt;;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-structure-query-language\"><a href=\"#SQL-structure-query-language\" class=\"headerlink\" title=\"SQL structure query language\"></a>SQL structure query language</h2><p>###数据类型<br>SQL中基本的数据类型有INTEGER,TEXT</p>\n<h3 id=\"创建表格\"><a href=\"#创建表格\" class=\"headerlink\" title=\"创建表格\"></a>创建表格</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> &lt;<span class=\"keyword\">table</span> <span class=\"keyword\">name</span> here&gt;(<span class=\"keyword\">key</span>-数据类型);</div></pre></td></tr></table></figure>\n<h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> &lt;<span class=\"keyword\">table</span> <span class=\"keyword\">name</span> here&gt; <span class=\"keyword\">VALUES</span>(<span class=\"keyword\">values</span> here); //插入的为表名，所以value要与key一一对应</div><div class=\"line\">or</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> &lt;<span class=\"keyword\">key</span>&gt; <span class=\"keyword\">VALUES</span>(<span class=\"keyword\">values</span> here)//插入为整个表的部分<span class=\"keyword\">key</span>，后面的<span class=\"keyword\">value</span>与之对应</div></pre></td></tr></table></figure>\n<p>PS:使id自动编号，要把id的数据类型设置为INTEGER PRIMARY KEY</p>\n<h3 id=\"数据选择\"><a href=\"#数据选择\" class=\"headerlink\" title=\"数据选择\"></a>数据选择</h3><p>####基本选择</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> &lt;<span class=\"keyword\">table</span> <span class=\"keyword\">name</span> here&gt;;  //选择所有数据</div><div class=\"line\"><span class=\"keyword\">SELECT</span> &lt;<span class=\"keyword\">column</span> <span class=\"keyword\">name</span> here&gt; <span class=\"keyword\">FROM</span> &lt;<span class=\"keyword\">table</span> <span class=\"keyword\">name</span> here&gt;;  //选择某列</div></pre></td></tr></table></figure>\n<h4 id=\"数据运算\"><a href=\"#数据运算\" class=\"headerlink\" title=\"数据运算\"></a>数据运算</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">SUM</span>/<span class=\"keyword\">AVG</span>/<span class=\"keyword\">MAX</span>/<span class=\"keyword\">MIN</span>&lt;<span class=\"keyword\">column</span> <span class=\"keyword\">name</span> here&gt; <span class=\"keyword\">AS</span> &lt;<span class=\"keyword\">alias</span>&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"条件选择\"><a href=\"#条件选择\" class=\"headerlink\" title=\"条件选择\"></a>条件选择</h4><p>使用<code>WHERE</code>来进行条件选择<br>使用<code>AS</code>来对新增加的一个列取名<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> &lt;<span class=\"keyword\">column</span> <span class=\"keyword\">name</span> here&gt; <span class=\"keyword\">FROM</span> &lt;<span class=\"keyword\">table</span> <span class=\"keyword\">name</span> here &gt; <span class=\"keyword\">WHERE</span> &lt;<span class=\"keyword\">some</span> condition here,<span class=\"keyword\">like</span> <span class=\"keyword\">id</span> &gt; <span class=\"number\">50</span> &gt;;/进行比较运算</div><div class=\"line\">AND/OR　//进行位操作</div><div class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> &lt;<span class=\"keyword\">table</span> <span class=\"keyword\">name</span> here&gt; <span class=\"keyword\">WHERE</span> &lt;<span class=\"keyword\">column</span> <span class=\"keyword\">name</span> here&gt;<span class=\"keyword\">IN</span>　&lt;keyword&gt;//选取某一列中包含该keyword的列</div><div class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> //将几行重复的keyword　<span class=\"keyword\">group</span></div><div class=\"line\"><span class=\"keyword\">HAVING</span>  //与<span class=\"keyword\">WHERE</span>类似，它的操作对象是<span class=\"keyword\">GROUP</span>后的对象</div><div class=\"line\"><span class=\"keyword\">JOIN</span></div><div class=\"line\"><span class=\"keyword\">self</span> <span class=\"keyword\">join</span></div><div class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span></div><div class=\"line\">&lt;!<span class=\"comment\">-- ASC DESC --&gt;</span></div><div class=\"line\">&lt;!<span class=\"comment\">-- HAVING   --&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"数据排序\"><a href=\"#数据排序\" class=\"headerlink\" title=\"数据排序\"></a>数据排序</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> &lt;<span class=\"keyword\">column</span> <span class=\"keyword\">name</span> here&gt; <span class=\"keyword\">FROM</span> &lt;<span class=\"keyword\">table</span> <span class=\"keyword\">name</span> here&gt; <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> &lt;<span class=\"keyword\">column</span> <span class=\"keyword\">name</span>&gt;;  </div><div class=\"line\"><span class=\"keyword\">SELECT</span> &lt;<span class=\"keyword\">column</span> <span class=\"keyword\">name</span> here&gt; <span class=\"keyword\">FROM</span> &lt;<span class=\"keyword\">table</span> <span class=\"keyword\">name</span> here&gt; <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> &lt;<span class=\"keyword\">column</span> <span class=\"keyword\">name</span>&gt;;   ????</div></pre></td></tr></table></figure>\n<h3 id=\"数据修改\"><a href=\"#数据修改\" class=\"headerlink\" title=\"数据修改\"></a>数据修改</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">UPDATE &lt;table name here&gt; SET &lt;how rows change &gt; WHERE &lt;pick out which row to update&gt;</div><div class=\"line\"></div><div class=\"line\">DELETE FROM &lt;table name here&gt; WHERE &lt;pick out which row to DELETE&gt;</div><div class=\"line\"></div><div class=\"line\">DROP TABLE &lt;table name here&gt;;  &lt;!-- 删除整个表格 --&gt;</div><div class=\"line\"></div><div class=\"line\">ALERT TABLE &lt;table name here&gt; ADD &lt;schema&gt;;</div></pre></td></tr></table></figure>\n"},{"layout":"default","title":"","_content":"\n# sublime text3的安装，使用及用于web开发的扩展备忘\n\n## ST3安装\n[Sublime官网地址](https://www.sublimetext.com/)\n\n## Package control安装及使用\n[Package control 官网](https://packagecontrol.io/)\n\n1. 快捷键 `crtl　+　反引号 ` 打开控制台，输入以下代码安装第一个扩展 `Package control` ，安装了它才能进行对扩展包的管理，安装等操作\n\n```python\nimport urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n```\n\n不知道为什么sublime不自带Package control,还非得自己安装。\n\n2. `Crtl + Shift + p` 打开控制面板，输入 `install package` 即可安装扩展包\n\n### WEB前端开发的扩展备忘\n1. Emmet  前端必备，提高效率\n2. Anaconda　将ST3打造成Python的IDE\n3. Autoprefixer  自动厂商前缀\n4. BracketHighlighter　　括号和标签高亮\n5. ColorPicker　选择颜色\n6. FuzzyFilePath　　补齐文件路径\n7. Git　　　Git\n8. Gutter Color  体验不如Atom的WEB BOX\n9. JQuery  JQuery的snippets\n10. Markdown Preview  \n11. Markdown Editing  以上两款扩展使ST3成为良好的Markdown编辑器\n12. Sass　　增加对Sass语法支持\n13. Sass Build\n17. SublimeOnsaveBuild\n14. Seti_UI  精致的主题\n15. SublimeLinter　　\n16. View in Browser　　浏览器预览\n","source":"_drafts/2016-07--04-Sublime简明用法.md","raw":"---\nlayout: default\ntitle:\n---\n\n# sublime text3的安装，使用及用于web开发的扩展备忘\n\n## ST3安装\n[Sublime官网地址](https://www.sublimetext.com/)\n\n## Package control安装及使用\n[Package control 官网](https://packagecontrol.io/)\n\n1. 快捷键 `crtl　+　反引号 ` 打开控制台，输入以下代码安装第一个扩展 `Package control` ，安装了它才能进行对扩展包的管理，安装等操作\n\n```python\nimport urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n```\n\n不知道为什么sublime不自带Package control,还非得自己安装。\n\n2. `Crtl + Shift + p` 打开控制面板，输入 `install package` 即可安装扩展包\n\n### WEB前端开发的扩展备忘\n1. Emmet  前端必备，提高效率\n2. Anaconda　将ST3打造成Python的IDE\n3. Autoprefixer  自动厂商前缀\n4. BracketHighlighter　　括号和标签高亮\n5. ColorPicker　选择颜色\n6. FuzzyFilePath　　补齐文件路径\n7. Git　　　Git\n8. Gutter Color  体验不如Atom的WEB BOX\n9. JQuery  JQuery的snippets\n10. Markdown Preview  \n11. Markdown Editing  以上两款扩展使ST3成为良好的Markdown编辑器\n12. Sass　　增加对Sass语法支持\n13. Sass Build\n17. SublimeOnsaveBuild\n14. Seti_UI  精致的主题\n15. SublimeLinter　　\n16. View in Browser　　浏览器预览\n","slug":"2016-07--04-Sublime简明用法","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.192Z","comments":1,"photos":[],"link":"","_id":"civ3wzsa90004n9fkg84wuyr5","content":"<h1 id=\"sublime-text3的安装，使用及用于web开发的扩展备忘\"><a href=\"#sublime-text3的安装，使用及用于web开发的扩展备忘\" class=\"headerlink\" title=\"sublime text3的安装，使用及用于web开发的扩展备忘\"></a>sublime text3的安装，使用及用于web开发的扩展备忘</h1><h2 id=\"ST3安装\"><a href=\"#ST3安装\" class=\"headerlink\" title=\"ST3安装\"></a>ST3安装</h2><p><a href=\"https://www.sublimetext.com/\" target=\"_blank\" rel=\"external\">Sublime官网地址</a></p>\n<h2 id=\"Package-control安装及使用\"><a href=\"#Package-control安装及使用\" class=\"headerlink\" title=\"Package control安装及使用\"></a>Package control安装及使用</h2><p><a href=\"https://packagecontrol.io/\" target=\"_blank\" rel=\"external\">Package control 官网</a></p>\n<ol>\n<li>快捷键 <code>crtl　+　反引号</code> 打开控制台，输入以下代码安装第一个扩展 <code>Package control</code> ，安装了它才能进行对扩展包的管理，安装等操作</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> urllib.request,os,hashlib; h = <span class=\"string\">'2915d1851351e5ee549c20394736b442'</span> + <span class=\"string\">'8bc59f460fa1548d1514676163dafc88'</span>; pf = <span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class=\"string\">'http://packagecontrol.io/'</span> + pf.replace(<span class=\"string\">' '</span>, <span class=\"string\">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); print(<span class=\"string\">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class=\"keyword\">if</span> dh != h <span class=\"keyword\">else</span> open(os.path.join( ipp, pf), <span class=\"string\">'wb'</span> ).write(by)</div></pre></td></tr></table></figure>\n<p>不知道为什么sublime不自带Package control,还非得自己安装。</p>\n<ol>\n<li><code>Crtl + Shift + p</code> 打开控制面板，输入 <code>install package</code> 即可安装扩展包</li>\n</ol>\n<h3 id=\"WEB前端开发的扩展备忘\"><a href=\"#WEB前端开发的扩展备忘\" class=\"headerlink\" title=\"WEB前端开发的扩展备忘\"></a>WEB前端开发的扩展备忘</h3><ol>\n<li>Emmet  前端必备，提高效率</li>\n<li>Anaconda　将ST3打造成Python的IDE</li>\n<li>Autoprefixer  自动厂商前缀</li>\n<li>BracketHighlighter　　括号和标签高亮</li>\n<li>ColorPicker　选择颜色</li>\n<li>FuzzyFilePath　　补齐文件路径</li>\n<li>Git　　　Git</li>\n<li>Gutter Color  体验不如Atom的WEB BOX</li>\n<li>JQuery  JQuery的snippets</li>\n<li>Markdown Preview  </li>\n<li>Markdown Editing  以上两款扩展使ST3成为良好的Markdown编辑器</li>\n<li>Sass　　增加对Sass语法支持</li>\n<li>Sass Build</li>\n<li>SublimeOnsaveBuild</li>\n<li>Seti_UI  精致的主题</li>\n<li>SublimeLinter　　</li>\n<li>View in Browser　　浏览器预览</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"sublime-text3的安装，使用及用于web开发的扩展备忘\"><a href=\"#sublime-text3的安装，使用及用于web开发的扩展备忘\" class=\"headerlink\" title=\"sublime text3的安装，使用及用于web开发的扩展备忘\"></a>sublime text3的安装，使用及用于web开发的扩展备忘</h1><h2 id=\"ST3安装\"><a href=\"#ST3安装\" class=\"headerlink\" title=\"ST3安装\"></a>ST3安装</h2><p><a href=\"https://www.sublimetext.com/\">Sublime官网地址</a></p>\n<h2 id=\"Package-control安装及使用\"><a href=\"#Package-control安装及使用\" class=\"headerlink\" title=\"Package control安装及使用\"></a>Package control安装及使用</h2><p><a href=\"https://packagecontrol.io/\">Package control 官网</a></p>\n<ol>\n<li>快捷键 <code>crtl　+　反引号</code> 打开控制台，输入以下代码安装第一个扩展 <code>Package control</code> ，安装了它才能进行对扩展包的管理，安装等操作</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> urllib.request,os,hashlib; h = <span class=\"string\">'2915d1851351e5ee549c20394736b442'</span> + <span class=\"string\">'8bc59f460fa1548d1514676163dafc88'</span>; pf = <span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class=\"string\">'http://packagecontrol.io/'</span> + pf.replace(<span class=\"string\">' '</span>, <span class=\"string\">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); print(<span class=\"string\">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class=\"keyword\">if</span> dh != h <span class=\"keyword\">else</span> open(os.path.join( ipp, pf), <span class=\"string\">'wb'</span> ).write(by)</div></pre></td></tr></table></figure>\n<p>不知道为什么sublime不自带Package control,还非得自己安装。</p>\n<ol>\n<li><code>Crtl + Shift + p</code> 打开控制面板，输入 <code>install package</code> 即可安装扩展包</li>\n</ol>\n<h3 id=\"WEB前端开发的扩展备忘\"><a href=\"#WEB前端开发的扩展备忘\" class=\"headerlink\" title=\"WEB前端开发的扩展备忘\"></a>WEB前端开发的扩展备忘</h3><ol>\n<li>Emmet  前端必备，提高效率</li>\n<li>Anaconda　将ST3打造成Python的IDE</li>\n<li>Autoprefixer  自动厂商前缀</li>\n<li>BracketHighlighter　　括号和标签高亮</li>\n<li>ColorPicker　选择颜色</li>\n<li>FuzzyFilePath　　补齐文件路径</li>\n<li>Git　　　Git</li>\n<li>Gutter Color  体验不如Atom的WEB BOX</li>\n<li>JQuery  JQuery的snippets</li>\n<li>Markdown Preview  </li>\n<li>Markdown Editing  以上两款扩展使ST3成为良好的Markdown编辑器</li>\n<li>Sass　　增加对Sass语法支持</li>\n<li>Sass Build</li>\n<li>SublimeOnsaveBuild</li>\n<li>Seti_UI  精致的主题</li>\n<li>SublimeLinter　　</li>\n<li>View in Browser　　浏览器预览</li>\n</ol>\n"},{"_content":"# Traceroute，MTR和Ping\n\n## Traceroute\ntraceroute意为路由跟踪\n\n### 安装\n几乎每个Linux发行版都默认安装了traceroute，但是Ubuntu16.04没有，所以\n\n```\nsudo apt-get install traceroute\n```\n### 使用\n在终端输入\n\n```\ntraceroute google.com\n```\n输出如下\n\n```\ntraceroute to google.com (37.61.54.158), 30 hops max, 60 byte packets\n 1  RT-AC54U (192.168.1.1)  0.955 ms  5.136 ms  5.199 ms\n 2  1.157.137.219.broad.gz.gd.dynamic.163data.com.cn (219.137.157.1)  11.023 ms  13.949 ms  13.937 ms\n 3  121.8.90.5 (121.8.90.5)  15.363 ms  17.008 ms  19.002 ms\n 4  183.56.30.1 (183.56.30.1)  25.816 ms 61.144.3.6 (61.144.3.6)  26.103 ms 58.61.216.45 (58.61.216.45)  26.085 ms\n 5  * * *\n 6  * * *\n 7  * * *\n 8  * * *\n 9  * * *\n10  * * *\n省略...\n30\n```\n### 读取输出\n\n第一行代表目标地址是 `google.com` ；最大30跳数，经过路由器的最大数量；传送60字节的包\n第二行之下的每一行是每一次路由的信息，从左到右分别代表路由顺序；主机地址；IP地址；三个时间段分别代表一个包到达主机然后返回花费的时间\n如果某一行出现了 `*` ,意味着路由到主机出现了问题，使很难诊断出是哪里出现了问题\n\n### 常用的flag\n\n```\ntraceroute -m 255 obiwan.scrye.net\n```\n改变跳数，最大为255\n\n```\ntraceroute google.com 70\n```\n在主机后加上想要传送包的字节大小\n\n```\ntraceroute -q5 google.com\n```\n\n改变每一次主机之间路由传送包的次数，最大为10\n\n```\ntraceroute -n google.com\n```\n\n(? 不显示主机，只显示IP ?)\n\n## MTR\n组合了ping和traceroute的功能，mtr允许你不停地询问远程主机来查看延迟和性能变化\n\n### 安装\n\n```\nsudo apt-get install mtr -y\n```\n\n### 使用\n\n```\nmtr github.com\n```\nmtr与traceroue相比就是可以动态的获取路由的信息，这些信息在不断更新，你可以在一段时间按内看丢包率的变化，这样得出来的结果更加可靠。\n\n## ping\n\n```\nping google.com\n```\n\nping命令会使用固定大小的数据包检测网络连接的速度。PING会非常迅速的告诉用户远程主机是否在线，以及数据在中间传递需要花费的时间;TRACEROUTE会显示中途所有的路由器以及经过每个路由器所花费的时间。\n\n##参考\n1. https://www.digitalocean.com/community/tutorials/how-to-use-traceroute-and-mtr-to-diagnose-network-issues\n2. http://www.today-wx.com/knowledge/309.html\n","source":"_drafts/2016-07-07-Ping,traceroute和mtr.md","raw":"# Traceroute，MTR和Ping\n\n## Traceroute\ntraceroute意为路由跟踪\n\n### 安装\n几乎每个Linux发行版都默认安装了traceroute，但是Ubuntu16.04没有，所以\n\n```\nsudo apt-get install traceroute\n```\n### 使用\n在终端输入\n\n```\ntraceroute google.com\n```\n输出如下\n\n```\ntraceroute to google.com (37.61.54.158), 30 hops max, 60 byte packets\n 1  RT-AC54U (192.168.1.1)  0.955 ms  5.136 ms  5.199 ms\n 2  1.157.137.219.broad.gz.gd.dynamic.163data.com.cn (219.137.157.1)  11.023 ms  13.949 ms  13.937 ms\n 3  121.8.90.5 (121.8.90.5)  15.363 ms  17.008 ms  19.002 ms\n 4  183.56.30.1 (183.56.30.1)  25.816 ms 61.144.3.6 (61.144.3.6)  26.103 ms 58.61.216.45 (58.61.216.45)  26.085 ms\n 5  * * *\n 6  * * *\n 7  * * *\n 8  * * *\n 9  * * *\n10  * * *\n省略...\n30\n```\n### 读取输出\n\n第一行代表目标地址是 `google.com` ；最大30跳数，经过路由器的最大数量；传送60字节的包\n第二行之下的每一行是每一次路由的信息，从左到右分别代表路由顺序；主机地址；IP地址；三个时间段分别代表一个包到达主机然后返回花费的时间\n如果某一行出现了 `*` ,意味着路由到主机出现了问题，使很难诊断出是哪里出现了问题\n\n### 常用的flag\n\n```\ntraceroute -m 255 obiwan.scrye.net\n```\n改变跳数，最大为255\n\n```\ntraceroute google.com 70\n```\n在主机后加上想要传送包的字节大小\n\n```\ntraceroute -q5 google.com\n```\n\n改变每一次主机之间路由传送包的次数，最大为10\n\n```\ntraceroute -n google.com\n```\n\n(? 不显示主机，只显示IP ?)\n\n## MTR\n组合了ping和traceroute的功能，mtr允许你不停地询问远程主机来查看延迟和性能变化\n\n### 安装\n\n```\nsudo apt-get install mtr -y\n```\n\n### 使用\n\n```\nmtr github.com\n```\nmtr与traceroue相比就是可以动态的获取路由的信息，这些信息在不断更新，你可以在一段时间按内看丢包率的变化，这样得出来的结果更加可靠。\n\n## ping\n\n```\nping google.com\n```\n\nping命令会使用固定大小的数据包检测网络连接的速度。PING会非常迅速的告诉用户远程主机是否在线，以及数据在中间传递需要花费的时间;TRACEROUTE会显示中途所有的路由器以及经过每个路由器所花费的时间。\n\n##参考\n1. https://www.digitalocean.com/community/tutorials/how-to-use-traceroute-and-mtr-to-diagnose-network-issues\n2. http://www.today-wx.com/knowledge/309.html\n","slug":"2016-07-07-Ping,traceroute和mtr","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.192Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzsaj0006n9fkd3754eai","content":"<h1 id=\"Traceroute，MTR和Ping\"><a href=\"#Traceroute，MTR和Ping\" class=\"headerlink\" title=\"Traceroute，MTR和Ping\"></a>Traceroute，MTR和Ping</h1><h2 id=\"Traceroute\"><a href=\"#Traceroute\" class=\"headerlink\" title=\"Traceroute\"></a>Traceroute</h2><p>traceroute意为路由跟踪</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>几乎每个Linux发行版都默认安装了traceroute，但是Ubuntu16.04没有，所以</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install traceroute</div></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>在终端输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">traceroute google.com</div></pre></td></tr></table></figure>\n<p>输出如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">traceroute to google.com (37.61.54.158), 30 hops max, 60 byte packets</div><div class=\"line\"> 1  RT-AC54U (192.168.1.1)  0.955 ms  5.136 ms  5.199 ms</div><div class=\"line\"> 2  1.157.137.219.broad.gz.gd.dynamic.163data.com.cn (219.137.157.1)  11.023 ms  13.949 ms  13.937 ms</div><div class=\"line\"> 3  121.8.90.5 (121.8.90.5)  15.363 ms  17.008 ms  19.002 ms</div><div class=\"line\"> 4  183.56.30.1 (183.56.30.1)  25.816 ms 61.144.3.6 (61.144.3.6)  26.103 ms 58.61.216.45 (58.61.216.45)  26.085 ms</div><div class=\"line\"> 5  * * *</div><div class=\"line\"> 6  * * *</div><div class=\"line\"> 7  * * *</div><div class=\"line\"> 8  * * *</div><div class=\"line\"> 9  * * *</div><div class=\"line\">10  * * *</div><div class=\"line\">省略...</div><div class=\"line\">30</div></pre></td></tr></table></figure>\n<h3 id=\"读取输出\"><a href=\"#读取输出\" class=\"headerlink\" title=\"读取输出\"></a>读取输出</h3><p>第一行代表目标地址是 <code>google.com</code> ；最大30跳数，经过路由器的最大数量；传送60字节的包<br>第二行之下的每一行是每一次路由的信息，从左到右分别代表路由顺序；主机地址；IP地址；三个时间段分别代表一个包到达主机然后返回花费的时间<br>如果某一行出现了 <code>*</code> ,意味着路由到主机出现了问题，使很难诊断出是哪里出现了问题</p>\n<h3 id=\"常用的flag\"><a href=\"#常用的flag\" class=\"headerlink\" title=\"常用的flag\"></a>常用的flag</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">traceroute -m 255 obiwan.scrye.net</div></pre></td></tr></table></figure>\n<p>改变跳数，最大为255</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">traceroute google.com 70</div></pre></td></tr></table></figure>\n<p>在主机后加上想要传送包的字节大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">traceroute -q5 google.com</div></pre></td></tr></table></figure>\n<p>改变每一次主机之间路由传送包的次数，最大为10</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">traceroute -n google.com</div></pre></td></tr></table></figure>\n<p>(? 不显示主机，只显示IP ?)</p>\n<h2 id=\"MTR\"><a href=\"#MTR\" class=\"headerlink\" title=\"MTR\"></a>MTR</h2><p>组合了ping和traceroute的功能，mtr允许你不停地询问远程主机来查看延迟和性能变化</p>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install mtr -y</div></pre></td></tr></table></figure>\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mtr github.com</div></pre></td></tr></table></figure>\n<p>mtr与traceroue相比就是可以动态的获取路由的信息，这些信息在不断更新，你可以在一段时间按内看丢包率的变化，这样得出来的结果更加可靠。</p>\n<h2 id=\"ping\"><a href=\"#ping\" class=\"headerlink\" title=\"ping\"></a>ping</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ping google.com</div></pre></td></tr></table></figure>\n<p>ping命令会使用固定大小的数据包检测网络连接的速度。PING会非常迅速的告诉用户远程主机是否在线，以及数据在中间传递需要花费的时间;TRACEROUTE会显示中途所有的路由器以及经过每个路由器所花费的时间。</p>\n<p>##参考</p>\n<ol>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-traceroute-and-mtr-to-diagnose-network-issues\" target=\"_blank\" rel=\"external\">https://www.digitalocean.com/community/tutorials/how-to-use-traceroute-and-mtr-to-diagnose-network-issues</a></li>\n<li><a href=\"http://www.today-wx.com/knowledge/309.html\" target=\"_blank\" rel=\"external\">http://www.today-wx.com/knowledge/309.html</a></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"Traceroute，MTR和Ping\"><a href=\"#Traceroute，MTR和Ping\" class=\"headerlink\" title=\"Traceroute，MTR和Ping\"></a>Traceroute，MTR和Ping</h1><h2 id=\"Traceroute\"><a href=\"#Traceroute\" class=\"headerlink\" title=\"Traceroute\"></a>Traceroute</h2><p>traceroute意为路由跟踪</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>几乎每个Linux发行版都默认安装了traceroute，但是Ubuntu16.04没有，所以</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install traceroute</div></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>在终端输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">traceroute google.com</div></pre></td></tr></table></figure>\n<p>输出如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">traceroute to google.com (37.61.54.158), 30 hops max, 60 byte packets</div><div class=\"line\"> 1  RT-AC54U (192.168.1.1)  0.955 ms  5.136 ms  5.199 ms</div><div class=\"line\"> 2  1.157.137.219.broad.gz.gd.dynamic.163data.com.cn (219.137.157.1)  11.023 ms  13.949 ms  13.937 ms</div><div class=\"line\"> 3  121.8.90.5 (121.8.90.5)  15.363 ms  17.008 ms  19.002 ms</div><div class=\"line\"> 4  183.56.30.1 (183.56.30.1)  25.816 ms 61.144.3.6 (61.144.3.6)  26.103 ms 58.61.216.45 (58.61.216.45)  26.085 ms</div><div class=\"line\"> 5  * * *</div><div class=\"line\"> 6  * * *</div><div class=\"line\"> 7  * * *</div><div class=\"line\"> 8  * * *</div><div class=\"line\"> 9  * * *</div><div class=\"line\">10  * * *</div><div class=\"line\">省略...</div><div class=\"line\">30</div></pre></td></tr></table></figure>\n<h3 id=\"读取输出\"><a href=\"#读取输出\" class=\"headerlink\" title=\"读取输出\"></a>读取输出</h3><p>第一行代表目标地址是 <code>google.com</code> ；最大30跳数，经过路由器的最大数量；传送60字节的包<br>第二行之下的每一行是每一次路由的信息，从左到右分别代表路由顺序；主机地址；IP地址；三个时间段分别代表一个包到达主机然后返回花费的时间<br>如果某一行出现了 <code>*</code> ,意味着路由到主机出现了问题，使很难诊断出是哪里出现了问题</p>\n<h3 id=\"常用的flag\"><a href=\"#常用的flag\" class=\"headerlink\" title=\"常用的flag\"></a>常用的flag</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">traceroute -m 255 obiwan.scrye.net</div></pre></td></tr></table></figure>\n<p>改变跳数，最大为255</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">traceroute google.com 70</div></pre></td></tr></table></figure>\n<p>在主机后加上想要传送包的字节大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">traceroute -q5 google.com</div></pre></td></tr></table></figure>\n<p>改变每一次主机之间路由传送包的次数，最大为10</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">traceroute -n google.com</div></pre></td></tr></table></figure>\n<p>(? 不显示主机，只显示IP ?)</p>\n<h2 id=\"MTR\"><a href=\"#MTR\" class=\"headerlink\" title=\"MTR\"></a>MTR</h2><p>组合了ping和traceroute的功能，mtr允许你不停地询问远程主机来查看延迟和性能变化</p>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install mtr -y</div></pre></td></tr></table></figure>\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mtr github.com</div></pre></td></tr></table></figure>\n<p>mtr与traceroue相比就是可以动态的获取路由的信息，这些信息在不断更新，你可以在一段时间按内看丢包率的变化，这样得出来的结果更加可靠。</p>\n<h2 id=\"ping\"><a href=\"#ping\" class=\"headerlink\" title=\"ping\"></a>ping</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ping google.com</div></pre></td></tr></table></figure>\n<p>ping命令会使用固定大小的数据包检测网络连接的速度。PING会非常迅速的告诉用户远程主机是否在线，以及数据在中间传递需要花费的时间;TRACEROUTE会显示中途所有的路由器以及经过每个路由器所花费的时间。</p>\n<p>##参考</p>\n<ol>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-traceroute-and-mtr-to-diagnose-network-issues\">https://www.digitalocean.com/community/tutorials/how-to-use-traceroute-and-mtr-to-diagnose-network-issues</a></li>\n<li><a href=\"http://www.today-wx.com/knowledge/309.html\">http://www.today-wx.com/knowledge/309.html</a></li>\n</ol>\n"},{"layout":"post","title":"","_content":"\n# atom 使用备忘  \n\n#### 由于sublime text在ubuntu下无法输入中文始终没有最好的解决办法，所以转战atom,等待sublime解决好问题在回归，atom由gituhub开发，它的slogan是\n>A hackable text editor\nfor the 21st Century\n\n## 安装atom\n\n[atom官网](https://atom.io/)\n\n```\nsudo add-apt-repository ppa:webupd8team/atom\nsudo apt-get update\nsudo apt-get install atom\n```\n\n## atom的扩展包\n\n1. emmet 前端必备\n2. Atom Beautify 美化html代码\n3. git plus git\n4. minimap 使atom具有sublimina的minimap\n5. open in browsers 预览网页\n6. sass autocompile sass自动编译\n7. autoprefix 自动添加厂商前缀\n8. pigments 在css中预览颜色\n9. color picker 颜色选择\n10. autocomplete path  自动补充文件路径\n11. script 在atom里运行代码\n\n## atom sippets\n\n```\n'.source.coffee':\n  'Console log':\n    'prefix': 'log'\n    'body': 'console.log $1'\n```\n\natom使用cson来定义snippet，scope可以参见snipppet,多行代码使用`'''code line here'''`\n\n# 参考\n1. https://codeforgeek.com/2014/09/install-atom-editor-ubuntu-14-04/\n2. placeholder\n\n3. 各种语言的scope\n\n```\nActionScript: source.actionscript.2\nAppleScript: source.applescript\nASP: source.asp\nBatch FIle: source.dosbatch\nC#: source.cs\nC++: source.c++\nClojure: source.clojure\nCoffeeScript: source.coffee\nCSS: source.css\nD: source.d\nDiff: source.diff\nErlang: source.erlang\nGo: source.go\nGraphViz: source.dot\nGroovy: source.groovy\nHaskell: source.haskell\nHTML: text.html(.basic)\nJSP: text.html.jsp\nJava: source.java\nJava Properties: source.java-props\nJava Doc: text.html.javadoc\nJSON: source.json\nJavascript: source.js\nBibTex: source.bibtex\nLatex Log: text.log.latex\nLatex Memoir: text.tex.latex.memoir\nLatex: text.tex.latex\nLESS: source.css.less\nTeX: text.tex\nLisp: source.lisp\nLua: source.lua\nMakeFile: source.makefile\nMarkdown: text.html.markdown\nMulti Markdown: text.html.markdown.multimarkdown\nMatlab: source.matlab\nObjective-C: source.objc\nObjective-C++: source.objc++\nOCaml campl4: source.camlp4.ocaml\nOCaml: source.ocaml\nOCamllex: source.ocamllex\nPerl: source.perl\nPHP: source.php\nRegular Expression(python): source.regexp.python\nPython: source.python\nR Console: source.r-console\nR: source.r\nRuby on Rails: source.ruby.rails\nRuby HAML: text.haml\nSQL(Ruby): source.sql.ruby\nRegular Expression: source.regexp\nRestructuredText: text.restructuredtext\nRuby: source.ruby\nSASS: source.sass\nScala: source.scala\nShell Script: source.shell\nSQL: source.sql\nStylus: source.stylus\nTCL: source.tcl\nHTML(TCL): text.html.tcl\nPlain text: text.plain\nTextile: text.html.textile\nXML: text.xml\nXSL: text.xml.xsl\nYAML: source.yaml\n```\n","source":"_drafts/2016-07-07-atom简明用法.md","raw":"---\nlayout: post\ntitle:\n---\n\n# atom 使用备忘  \n\n#### 由于sublime text在ubuntu下无法输入中文始终没有最好的解决办法，所以转战atom,等待sublime解决好问题在回归，atom由gituhub开发，它的slogan是\n>A hackable text editor\nfor the 21st Century\n\n## 安装atom\n\n[atom官网](https://atom.io/)\n\n```\nsudo add-apt-repository ppa:webupd8team/atom\nsudo apt-get update\nsudo apt-get install atom\n```\n\n## atom的扩展包\n\n1. emmet 前端必备\n2. Atom Beautify 美化html代码\n3. git plus git\n4. minimap 使atom具有sublimina的minimap\n5. open in browsers 预览网页\n6. sass autocompile sass自动编译\n7. autoprefix 自动添加厂商前缀\n8. pigments 在css中预览颜色\n9. color picker 颜色选择\n10. autocomplete path  自动补充文件路径\n11. script 在atom里运行代码\n\n## atom sippets\n\n```\n'.source.coffee':\n  'Console log':\n    'prefix': 'log'\n    'body': 'console.log $1'\n```\n\natom使用cson来定义snippet，scope可以参见snipppet,多行代码使用`'''code line here'''`\n\n# 参考\n1. https://codeforgeek.com/2014/09/install-atom-editor-ubuntu-14-04/\n2. placeholder\n\n3. 各种语言的scope\n\n```\nActionScript: source.actionscript.2\nAppleScript: source.applescript\nASP: source.asp\nBatch FIle: source.dosbatch\nC#: source.cs\nC++: source.c++\nClojure: source.clojure\nCoffeeScript: source.coffee\nCSS: source.css\nD: source.d\nDiff: source.diff\nErlang: source.erlang\nGo: source.go\nGraphViz: source.dot\nGroovy: source.groovy\nHaskell: source.haskell\nHTML: text.html(.basic)\nJSP: text.html.jsp\nJava: source.java\nJava Properties: source.java-props\nJava Doc: text.html.javadoc\nJSON: source.json\nJavascript: source.js\nBibTex: source.bibtex\nLatex Log: text.log.latex\nLatex Memoir: text.tex.latex.memoir\nLatex: text.tex.latex\nLESS: source.css.less\nTeX: text.tex\nLisp: source.lisp\nLua: source.lua\nMakeFile: source.makefile\nMarkdown: text.html.markdown\nMulti Markdown: text.html.markdown.multimarkdown\nMatlab: source.matlab\nObjective-C: source.objc\nObjective-C++: source.objc++\nOCaml campl4: source.camlp4.ocaml\nOCaml: source.ocaml\nOCamllex: source.ocamllex\nPerl: source.perl\nPHP: source.php\nRegular Expression(python): source.regexp.python\nPython: source.python\nR Console: source.r-console\nR: source.r\nRuby on Rails: source.ruby.rails\nRuby HAML: text.haml\nSQL(Ruby): source.sql.ruby\nRegular Expression: source.regexp\nRestructuredText: text.restructuredtext\nRuby: source.ruby\nSASS: source.sass\nScala: source.scala\nShell Script: source.shell\nSQL: source.sql\nStylus: source.stylus\nTCL: source.tcl\nHTML(TCL): text.html.tcl\nPlain text: text.plain\nTextile: text.html.textile\nXML: text.xml\nXSL: text.xml.xsl\nYAML: source.yaml\n```\n","slug":"2016-07-07-atom简明用法","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.192Z","comments":1,"photos":[],"link":"","_id":"civ3wzsam0007n9fkmayc7av6","content":"<h1 id=\"atom-使用备忘\"><a href=\"#atom-使用备忘\" class=\"headerlink\" title=\"atom 使用备忘\"></a>atom 使用备忘</h1><h4 id=\"由于sublime-text在ubuntu下无法输入中文始终没有最好的解决办法，所以转战atom-等待sublime解决好问题在回归，atom由gituhub开发，它的slogan是\"><a href=\"#由于sublime-text在ubuntu下无法输入中文始终没有最好的解决办法，所以转战atom-等待sublime解决好问题在回归，atom由gituhub开发，它的slogan是\" class=\"headerlink\" title=\"由于sublime text在ubuntu下无法输入中文始终没有最好的解决办法，所以转战atom,等待sublime解决好问题在回归，atom由gituhub开发，它的slogan是\"></a>由于sublime text在ubuntu下无法输入中文始终没有最好的解决办法，所以转战atom,等待sublime解决好问题在回归，atom由gituhub开发，它的slogan是</h4><blockquote>\n<p>A hackable text editor<br>for the 21st Century</p>\n</blockquote>\n<h2 id=\"安装atom\"><a href=\"#安装atom\" class=\"headerlink\" title=\"安装atom\"></a>安装atom</h2><p><a href=\"https://atom.io/\" target=\"_blank\" rel=\"external\">atom官网</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:webupd8team/atom</div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install atom</div></pre></td></tr></table></figure>\n<h2 id=\"atom的扩展包\"><a href=\"#atom的扩展包\" class=\"headerlink\" title=\"atom的扩展包\"></a>atom的扩展包</h2><ol>\n<li>emmet 前端必备</li>\n<li>Atom Beautify 美化html代码</li>\n<li>git plus git</li>\n<li>minimap 使atom具有sublimina的minimap</li>\n<li>open in browsers 预览网页</li>\n<li>sass autocompile sass自动编译</li>\n<li>autoprefix 自动添加厂商前缀</li>\n<li>pigments 在css中预览颜色</li>\n<li>color picker 颜色选择</li>\n<li>autocomplete path  自动补充文件路径</li>\n<li>script 在atom里运行代码</li>\n</ol>\n<h2 id=\"atom-sippets\"><a href=\"#atom-sippets\" class=\"headerlink\" title=\"atom sippets\"></a>atom sippets</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;.source.coffee&apos;:</div><div class=\"line\">  &apos;Console log&apos;:</div><div class=\"line\">    &apos;prefix&apos;: &apos;log&apos;</div><div class=\"line\">    &apos;body&apos;: &apos;console.log $1&apos;</div></pre></td></tr></table></figure>\n<p>atom使用cson来定义snippet，scope可以参见snipppet,多行代码使用<code>&#39;&#39;&#39;code line here&#39;&#39;&#39;</code></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ol>\n<li><a href=\"https://codeforgeek.com/2014/09/install-atom-editor-ubuntu-14-04/\" target=\"_blank\" rel=\"external\">https://codeforgeek.com/2014/09/install-atom-editor-ubuntu-14-04/</a></li>\n<li><p>placeholder</p>\n</li>\n<li><p>各种语言的scope</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\">ActionScript: source.actionscript.2</div><div class=\"line\">AppleScript: source.applescript</div><div class=\"line\">ASP: source.asp</div><div class=\"line\">Batch FIle: source.dosbatch</div><div class=\"line\">C#: source.cs</div><div class=\"line\">C++: source.c++</div><div class=\"line\">Clojure: source.clojure</div><div class=\"line\">CoffeeScript: source.coffee</div><div class=\"line\">CSS: source.css</div><div class=\"line\">D: source.d</div><div class=\"line\">Diff: source.diff</div><div class=\"line\">Erlang: source.erlang</div><div class=\"line\">Go: source.go</div><div class=\"line\">GraphViz: source.dot</div><div class=\"line\">Groovy: source.groovy</div><div class=\"line\">Haskell: source.haskell</div><div class=\"line\">HTML: text.html(.basic)</div><div class=\"line\">JSP: text.html.jsp</div><div class=\"line\">Java: source.java</div><div class=\"line\">Java Properties: source.java-props</div><div class=\"line\">Java Doc: text.html.javadoc</div><div class=\"line\">JSON: source.json</div><div class=\"line\">Javascript: source.js</div><div class=\"line\">BibTex: source.bibtex</div><div class=\"line\">Latex Log: text.log.latex</div><div class=\"line\">Latex Memoir: text.tex.latex.memoir</div><div class=\"line\">Latex: text.tex.latex</div><div class=\"line\">LESS: source.css.less</div><div class=\"line\">TeX: text.tex</div><div class=\"line\">Lisp: source.lisp</div><div class=\"line\">Lua: source.lua</div><div class=\"line\">MakeFile: source.makefile</div><div class=\"line\">Markdown: text.html.markdown</div><div class=\"line\">Multi Markdown: text.html.markdown.multimarkdown</div><div class=\"line\">Matlab: source.matlab</div><div class=\"line\">Objective-C: source.objc</div><div class=\"line\">Objective-C++: source.objc++</div><div class=\"line\">OCaml campl4: source.camlp4.ocaml</div><div class=\"line\">OCaml: source.ocaml</div><div class=\"line\">OCamllex: source.ocamllex</div><div class=\"line\">Perl: source.perl</div><div class=\"line\">PHP: source.php</div><div class=\"line\">Regular Expression(python): source.regexp.python</div><div class=\"line\">Python: source.python</div><div class=\"line\">R Console: source.r-console</div><div class=\"line\">R: source.r</div><div class=\"line\">Ruby on Rails: source.ruby.rails</div><div class=\"line\">Ruby HAML: text.haml</div><div class=\"line\">SQL(Ruby): source.sql.ruby</div><div class=\"line\">Regular Expression: source.regexp</div><div class=\"line\">RestructuredText: text.restructuredtext</div><div class=\"line\">Ruby: source.ruby</div><div class=\"line\">SASS: source.sass</div><div class=\"line\">Scala: source.scala</div><div class=\"line\">Shell Script: source.shell</div><div class=\"line\">SQL: source.sql</div><div class=\"line\">Stylus: source.stylus</div><div class=\"line\">TCL: source.tcl</div><div class=\"line\">HTML(TCL): text.html.tcl</div><div class=\"line\">Plain text: text.plain</div><div class=\"line\">Textile: text.html.textile</div><div class=\"line\">XML: text.xml</div><div class=\"line\">XSL: text.xml.xsl</div><div class=\"line\">YAML: source.yaml</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"atom-使用备忘\"><a href=\"#atom-使用备忘\" class=\"headerlink\" title=\"atom 使用备忘\"></a>atom 使用备忘</h1><h4 id=\"由于sublime-text在ubuntu下无法输入中文始终没有最好的解决办法，所以转战atom-等待sublime解决好问题在回归，atom由gituhub开发，它的slogan是\"><a href=\"#由于sublime-text在ubuntu下无法输入中文始终没有最好的解决办法，所以转战atom-等待sublime解决好问题在回归，atom由gituhub开发，它的slogan是\" class=\"headerlink\" title=\"由于sublime text在ubuntu下无法输入中文始终没有最好的解决办法，所以转战atom,等待sublime解决好问题在回归，atom由gituhub开发，它的slogan是\"></a>由于sublime text在ubuntu下无法输入中文始终没有最好的解决办法，所以转战atom,等待sublime解决好问题在回归，atom由gituhub开发，它的slogan是</h4><blockquote>\n<p>A hackable text editor<br>for the 21st Century</p>\n</blockquote>\n<h2 id=\"安装atom\"><a href=\"#安装atom\" class=\"headerlink\" title=\"安装atom\"></a>安装atom</h2><p><a href=\"https://atom.io/\">atom官网</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:webupd8team/atom</div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install atom</div></pre></td></tr></table></figure>\n<h2 id=\"atom的扩展包\"><a href=\"#atom的扩展包\" class=\"headerlink\" title=\"atom的扩展包\"></a>atom的扩展包</h2><ol>\n<li>emmet 前端必备</li>\n<li>Atom Beautify 美化html代码</li>\n<li>git plus git</li>\n<li>minimap 使atom具有sublimina的minimap</li>\n<li>open in browsers 预览网页</li>\n<li>sass autocompile sass自动编译</li>\n<li>autoprefix 自动添加厂商前缀</li>\n<li>pigments 在css中预览颜色</li>\n<li>color picker 颜色选择</li>\n<li>autocomplete path  自动补充文件路径</li>\n<li>script 在atom里运行代码</li>\n</ol>\n<h2 id=\"atom-sippets\"><a href=\"#atom-sippets\" class=\"headerlink\" title=\"atom sippets\"></a>atom sippets</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;.source.coffee&apos;:</div><div class=\"line\">  &apos;Console log&apos;:</div><div class=\"line\">    &apos;prefix&apos;: &apos;log&apos;</div><div class=\"line\">    &apos;body&apos;: &apos;console.log $1&apos;</div></pre></td></tr></table></figure>\n<p>atom使用cson来定义snippet，scope可以参见snipppet,多行代码使用<code>&#39;&#39;&#39;code line here&#39;&#39;&#39;</code></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ol>\n<li><a href=\"https://codeforgeek.com/2014/09/install-atom-editor-ubuntu-14-04/\">https://codeforgeek.com/2014/09/install-atom-editor-ubuntu-14-04/</a></li>\n<li><p>placeholder</p>\n</li>\n<li><p>各种语言的scope</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\">ActionScript: source.actionscript.2</div><div class=\"line\">AppleScript: source.applescript</div><div class=\"line\">ASP: source.asp</div><div class=\"line\">Batch FIle: source.dosbatch</div><div class=\"line\">C#: source.cs</div><div class=\"line\">C++: source.c++</div><div class=\"line\">Clojure: source.clojure</div><div class=\"line\">CoffeeScript: source.coffee</div><div class=\"line\">CSS: source.css</div><div class=\"line\">D: source.d</div><div class=\"line\">Diff: source.diff</div><div class=\"line\">Erlang: source.erlang</div><div class=\"line\">Go: source.go</div><div class=\"line\">GraphViz: source.dot</div><div class=\"line\">Groovy: source.groovy</div><div class=\"line\">Haskell: source.haskell</div><div class=\"line\">HTML: text.html(.basic)</div><div class=\"line\">JSP: text.html.jsp</div><div class=\"line\">Java: source.java</div><div class=\"line\">Java Properties: source.java-props</div><div class=\"line\">Java Doc: text.html.javadoc</div><div class=\"line\">JSON: source.json</div><div class=\"line\">Javascript: source.js</div><div class=\"line\">BibTex: source.bibtex</div><div class=\"line\">Latex Log: text.log.latex</div><div class=\"line\">Latex Memoir: text.tex.latex.memoir</div><div class=\"line\">Latex: text.tex.latex</div><div class=\"line\">LESS: source.css.less</div><div class=\"line\">TeX: text.tex</div><div class=\"line\">Lisp: source.lisp</div><div class=\"line\">Lua: source.lua</div><div class=\"line\">MakeFile: source.makefile</div><div class=\"line\">Markdown: text.html.markdown</div><div class=\"line\">Multi Markdown: text.html.markdown.multimarkdown</div><div class=\"line\">Matlab: source.matlab</div><div class=\"line\">Objective-C: source.objc</div><div class=\"line\">Objective-C++: source.objc++</div><div class=\"line\">OCaml campl4: source.camlp4.ocaml</div><div class=\"line\">OCaml: source.ocaml</div><div class=\"line\">OCamllex: source.ocamllex</div><div class=\"line\">Perl: source.perl</div><div class=\"line\">PHP: source.php</div><div class=\"line\">Regular Expression(python): source.regexp.python</div><div class=\"line\">Python: source.python</div><div class=\"line\">R Console: source.r-console</div><div class=\"line\">R: source.r</div><div class=\"line\">Ruby on Rails: source.ruby.rails</div><div class=\"line\">Ruby HAML: text.haml</div><div class=\"line\">SQL(Ruby): source.sql.ruby</div><div class=\"line\">Regular Expression: source.regexp</div><div class=\"line\">RestructuredText: text.restructuredtext</div><div class=\"line\">Ruby: source.ruby</div><div class=\"line\">SASS: source.sass</div><div class=\"line\">Scala: source.scala</div><div class=\"line\">Shell Script: source.shell</div><div class=\"line\">SQL: source.sql</div><div class=\"line\">Stylus: source.stylus</div><div class=\"line\">TCL: source.tcl</div><div class=\"line\">HTML(TCL): text.html.tcl</div><div class=\"line\">Plain text: text.plain</div><div class=\"line\">Textile: text.html.textile</div><div class=\"line\">XML: text.xml</div><div class=\"line\">XSL: text.xml.xsl</div><div class=\"line\">YAML: source.yaml</div></pre></td></tr></table></figure>\n"},{"_content":"## margin\n1. margin可以改变容器的可视尺寸，应用的对象是没有设定宽高值的普通block元素在水平方向上的值\n2. 普通元素的百分比margin都是相对于容器的**宽度**来计算的;绝对定位的百分比margin是想对于第一个positioned的祖先元素的宽度\n3. margin重叠只会发生在垂直方向上\n","source":"_drafts/2016-08-06-css进阶笔记.md","raw":"## margin\n1. margin可以改变容器的可视尺寸，应用的对象是没有设定宽高值的普通block元素在水平方向上的值\n2. 普通元素的百分比margin都是相对于容器的**宽度**来计算的;绝对定位的百分比margin是想对于第一个positioned的祖先元素的宽度\n3. margin重叠只会发生在垂直方向上\n","slug":"2016-08-06-css进阶笔记","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.196Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzsas0008n9fkbry68zc9","content":"<h2 id=\"margin\"><a href=\"#margin\" class=\"headerlink\" title=\"margin\"></a>margin</h2><ol>\n<li>margin可以改变容器的可视尺寸，应用的对象是没有设定宽高值的普通block元素在水平方向上的值</li>\n<li>普通元素的百分比margin都是相对于容器的<strong>宽度</strong>来计算的;绝对定位的百分比margin是想对于第一个positioned的祖先元素的宽度</li>\n<li>margin重叠只会发生在垂直方向上</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"margin\"><a href=\"#margin\" class=\"headerlink\" title=\"margin\"></a>margin</h2><ol>\n<li>margin可以改变容器的可视尺寸，应用的对象是没有设定宽高值的普通block元素在水平方向上的值</li>\n<li>普通元素的百分比margin都是相对于容器的<strong>宽度</strong>来计算的;绝对定位的百分比margin是想对于第一个positioned的祖先元素的宽度</li>\n<li>margin重叠只会发生在垂直方向上</li>\n</ol>\n"},{"_content":"# jQuery像一盘做好的菜,而JavaScript就是涩口的原材料\n\n## for-in语句在使用getElementsByTagName枚举时会将item和namedItem方法也枚举出来，所以在处理DOM的类数组对象时，使用简单的for循环语句能够正确的枚举出对象，不使用for-in的原因有二：\n1. 顺序不能保证\n2. 继承的属性可能被枚举出来\n\nhttp://stackoverflow.com/questions/3056172/javascript-getelementsbytagname-broken-firefox\n\n\n## \"\"和\" \"不同，前者是空字符串，后者不是\n\n## 时间处理程序只会添加到调用on()方法是已经存在的元素上，所以通过ajax更新内容之后，不会触发之前的事件，所以需要使用事件委托\n\n## JavaScript snippets\n```js\ndocument.querySelector('button').addEventListener('click', function(evt) {\n  this.textContent = this.textContent === 'hide' ? 'show' : 'hide';\n  document.querySelector('html').classList.toggle('loading');\n}, false);\n```\n\n## HTMLcollection只包含元素节点，而Nodelist可包含任意节点\n\n\n## 元素节点的offsetHeight和offsetWidth是只读的\n\n## JQ可以一次绑定多个事件，当时原生js不可以\n\n##  所有的迭代方法不适用于NodeList\n将nodeList转换成Array的两种方法\n\n```js\n[].forEach.call(document.getElementsByTagName('div'),function(ele,index,array){})\n\nNodeList.prototype.forEach = Array.prototype.forEach;\n//deprecated\n//Extending existing DOM functionality through prototypes is often considered bad practice as this can lead to masses of issues.\n```\n## 不要使用for in迭代数组，它用对象的属性名来迭代\n\n## NodeList包含任何节点类型,而HTMLCollection只包含元素节点\nconsole.log(NodeList instanceof HTMLCollection);\n\n## Element.getBoundingClientRect()\n返回一个对象，包含着这个元素的大小尺寸:widht,height，和相对于viewport的位置:top,left,right,bottom\n\n\n## pageX,pageY相对于可滚动的页面,clientX,clientY相对于viewport\n","source":"_drafts/2016-07-25-javascript陷阱.md","raw":"# jQuery像一盘做好的菜,而JavaScript就是涩口的原材料\n\n## for-in语句在使用getElementsByTagName枚举时会将item和namedItem方法也枚举出来，所以在处理DOM的类数组对象时，使用简单的for循环语句能够正确的枚举出对象，不使用for-in的原因有二：\n1. 顺序不能保证\n2. 继承的属性可能被枚举出来\n\nhttp://stackoverflow.com/questions/3056172/javascript-getelementsbytagname-broken-firefox\n\n\n## \"\"和\" \"不同，前者是空字符串，后者不是\n\n## 时间处理程序只会添加到调用on()方法是已经存在的元素上，所以通过ajax更新内容之后，不会触发之前的事件，所以需要使用事件委托\n\n## JavaScript snippets\n```js\ndocument.querySelector('button').addEventListener('click', function(evt) {\n  this.textContent = this.textContent === 'hide' ? 'show' : 'hide';\n  document.querySelector('html').classList.toggle('loading');\n}, false);\n```\n\n## HTMLcollection只包含元素节点，而Nodelist可包含任意节点\n\n\n## 元素节点的offsetHeight和offsetWidth是只读的\n\n## JQ可以一次绑定多个事件，当时原生js不可以\n\n##  所有的迭代方法不适用于NodeList\n将nodeList转换成Array的两种方法\n\n```js\n[].forEach.call(document.getElementsByTagName('div'),function(ele,index,array){})\n\nNodeList.prototype.forEach = Array.prototype.forEach;\n//deprecated\n//Extending existing DOM functionality through prototypes is often considered bad practice as this can lead to masses of issues.\n```\n## 不要使用for in迭代数组，它用对象的属性名来迭代\n\n## NodeList包含任何节点类型,而HTMLCollection只包含元素节点\nconsole.log(NodeList instanceof HTMLCollection);\n\n## Element.getBoundingClientRect()\n返回一个对象，包含着这个元素的大小尺寸:widht,height，和相对于viewport的位置:top,left,right,bottom\n\n\n## pageX,pageY相对于可滚动的页面,clientX,clientY相对于viewport\n","slug":"2016-07-25-javascript陷阱","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.192Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzsax000an9fkd494l9bq","content":"<h1 id=\"jQuery像一盘做好的菜-而JavaScript就是涩口的原材料\"><a href=\"#jQuery像一盘做好的菜-而JavaScript就是涩口的原材料\" class=\"headerlink\" title=\"jQuery像一盘做好的菜,而JavaScript就是涩口的原材料\"></a>jQuery像一盘做好的菜,而JavaScript就是涩口的原材料</h1><h2 id=\"for-in语句在使用getElementsByTagName枚举时会将item和namedItem方法也枚举出来，所以在处理DOM的类数组对象时，使用简单的for循环语句能够正确的枚举出对象，不使用for-in的原因有二：\"><a href=\"#for-in语句在使用getElementsByTagName枚举时会将item和namedItem方法也枚举出来，所以在处理DOM的类数组对象时，使用简单的for循环语句能够正确的枚举出对象，不使用for-in的原因有二：\" class=\"headerlink\" title=\"for-in语句在使用getElementsByTagName枚举时会将item和namedItem方法也枚举出来，所以在处理DOM的类数组对象时，使用简单的for循环语句能够正确的枚举出对象，不使用for-in的原因有二：\"></a>for-in语句在使用getElementsByTagName枚举时会将item和namedItem方法也枚举出来，所以在处理DOM的类数组对象时，使用简单的for循环语句能够正确的枚举出对象，不使用for-in的原因有二：</h2><ol>\n<li>顺序不能保证</li>\n<li>继承的属性可能被枚举出来</li>\n</ol>\n<p><a href=\"http://stackoverflow.com/questions/3056172/javascript-getelementsbytagname-broken-firefox\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/3056172/javascript-getelementsbytagname-broken-firefox</a></p>\n<h2 id=\"“”和”-“不同，前者是空字符串，后者不是\"><a href=\"#“”和”-“不同，前者是空字符串，后者不是\" class=\"headerlink\" title=\"“”和” “不同，前者是空字符串，后者不是\"></a>“”和” “不同，前者是空字符串，后者不是</h2><h2 id=\"时间处理程序只会添加到调用on-方法是已经存在的元素上，所以通过ajax更新内容之后，不会触发之前的事件，所以需要使用事件委托\"><a href=\"#时间处理程序只会添加到调用on-方法是已经存在的元素上，所以通过ajax更新内容之后，不会触发之前的事件，所以需要使用事件委托\" class=\"headerlink\" title=\"时间处理程序只会添加到调用on()方法是已经存在的元素上，所以通过ajax更新内容之后，不会触发之前的事件，所以需要使用事件委托\"></a>时间处理程序只会添加到调用on()方法是已经存在的元素上，所以通过ajax更新内容之后，不会触发之前的事件，所以需要使用事件委托</h2><h2 id=\"JavaScript-snippets\"><a href=\"#JavaScript-snippets\" class=\"headerlink\" title=\"JavaScript snippets\"></a>JavaScript snippets</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'button'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.textContent = <span class=\"keyword\">this</span>.textContent === <span class=\"string\">'hide'</span> ? <span class=\"string\">'show'</span> : <span class=\"string\">'hide'</span>;</div><div class=\"line\">  <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'html'</span>).classList.toggle(<span class=\"string\">'loading'</span>);</div><div class=\"line\">&#125;, <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"HTMLcollection只包含元素节点，而Nodelist可包含任意节点\"><a href=\"#HTMLcollection只包含元素节点，而Nodelist可包含任意节点\" class=\"headerlink\" title=\"HTMLcollection只包含元素节点，而Nodelist可包含任意节点\"></a>HTMLcollection只包含元素节点，而Nodelist可包含任意节点</h2><h2 id=\"元素节点的offsetHeight和offsetWidth是只读的\"><a href=\"#元素节点的offsetHeight和offsetWidth是只读的\" class=\"headerlink\" title=\"元素节点的offsetHeight和offsetWidth是只读的\"></a>元素节点的offsetHeight和offsetWidth是只读的</h2><h2 id=\"JQ可以一次绑定多个事件，当时原生js不可以\"><a href=\"#JQ可以一次绑定多个事件，当时原生js不可以\" class=\"headerlink\" title=\"JQ可以一次绑定多个事件，当时原生js不可以\"></a>JQ可以一次绑定多个事件，当时原生js不可以</h2><h2 id=\"所有的迭代方法不适用于NodeList\"><a href=\"#所有的迭代方法不适用于NodeList\" class=\"headerlink\" title=\"所有的迭代方法不适用于NodeList\"></a>所有的迭代方法不适用于NodeList</h2><p>将nodeList转换成Array的两种方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[].forEach.call(<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>),<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele,index,array</span>)</span>&#123;&#125;)</div><div class=\"line\"></div><div class=\"line\">NodeList.prototype.forEach = <span class=\"built_in\">Array</span>.prototype.forEach;</div><div class=\"line\"><span class=\"comment\">//deprecated</span></div><div class=\"line\"><span class=\"comment\">//Extending existing DOM functionality through prototypes is often considered bad practice as this can lead to masses of issues.</span></div></pre></td></tr></table></figure>\n<h2 id=\"不要使用for-in迭代数组，它用对象的属性名来迭代\"><a href=\"#不要使用for-in迭代数组，它用对象的属性名来迭代\" class=\"headerlink\" title=\"不要使用for in迭代数组，它用对象的属性名来迭代\"></a>不要使用for in迭代数组，它用对象的属性名来迭代</h2><h2 id=\"NodeList包含任何节点类型-而HTMLCollection只包含元素节点\"><a href=\"#NodeList包含任何节点类型-而HTMLCollection只包含元素节点\" class=\"headerlink\" title=\"NodeList包含任何节点类型,而HTMLCollection只包含元素节点\"></a>NodeList包含任何节点类型,而HTMLCollection只包含元素节点</h2><p>console.log(NodeList instanceof HTMLCollection);</p>\n<h2 id=\"Element-getBoundingClientRect\"><a href=\"#Element-getBoundingClientRect\" class=\"headerlink\" title=\"Element.getBoundingClientRect()\"></a>Element.getBoundingClientRect()</h2><p>返回一个对象，包含着这个元素的大小尺寸:widht,height，和相对于viewport的位置:top,left,right,bottom</p>\n<h2 id=\"pageX-pageY相对于可滚动的页面-clientX-clientY相对于viewport\"><a href=\"#pageX-pageY相对于可滚动的页面-clientX-clientY相对于viewport\" class=\"headerlink\" title=\"pageX,pageY相对于可滚动的页面,clientX,clientY相对于viewport\"></a>pageX,pageY相对于可滚动的页面,clientX,clientY相对于viewport</h2>","excerpt":"","more":"<h1 id=\"jQuery像一盘做好的菜-而JavaScript就是涩口的原材料\"><a href=\"#jQuery像一盘做好的菜-而JavaScript就是涩口的原材料\" class=\"headerlink\" title=\"jQuery像一盘做好的菜,而JavaScript就是涩口的原材料\"></a>jQuery像一盘做好的菜,而JavaScript就是涩口的原材料</h1><h2 id=\"for-in语句在使用getElementsByTagName枚举时会将item和namedItem方法也枚举出来，所以在处理DOM的类数组对象时，使用简单的for循环语句能够正确的枚举出对象，不使用for-in的原因有二：\"><a href=\"#for-in语句在使用getElementsByTagName枚举时会将item和namedItem方法也枚举出来，所以在处理DOM的类数组对象时，使用简单的for循环语句能够正确的枚举出对象，不使用for-in的原因有二：\" class=\"headerlink\" title=\"for-in语句在使用getElementsByTagName枚举时会将item和namedItem方法也枚举出来，所以在处理DOM的类数组对象时，使用简单的for循环语句能够正确的枚举出对象，不使用for-in的原因有二：\"></a>for-in语句在使用getElementsByTagName枚举时会将item和namedItem方法也枚举出来，所以在处理DOM的类数组对象时，使用简单的for循环语句能够正确的枚举出对象，不使用for-in的原因有二：</h2><ol>\n<li>顺序不能保证</li>\n<li>继承的属性可能被枚举出来</li>\n</ol>\n<p><a href=\"http://stackoverflow.com/questions/3056172/javascript-getelementsbytagname-broken-firefox\">http://stackoverflow.com/questions/3056172/javascript-getelementsbytagname-broken-firefox</a></p>\n<h2 id=\"“”和”-“不同，前者是空字符串，后者不是\"><a href=\"#“”和”-“不同，前者是空字符串，后者不是\" class=\"headerlink\" title=\"“”和” “不同，前者是空字符串，后者不是\"></a>“”和” “不同，前者是空字符串，后者不是</h2><h2 id=\"时间处理程序只会添加到调用on-方法是已经存在的元素上，所以通过ajax更新内容之后，不会触发之前的事件，所以需要使用事件委托\"><a href=\"#时间处理程序只会添加到调用on-方法是已经存在的元素上，所以通过ajax更新内容之后，不会触发之前的事件，所以需要使用事件委托\" class=\"headerlink\" title=\"时间处理程序只会添加到调用on()方法是已经存在的元素上，所以通过ajax更新内容之后，不会触发之前的事件，所以需要使用事件委托\"></a>时间处理程序只会添加到调用on()方法是已经存在的元素上，所以通过ajax更新内容之后，不会触发之前的事件，所以需要使用事件委托</h2><h2 id=\"JavaScript-snippets\"><a href=\"#JavaScript-snippets\" class=\"headerlink\" title=\"JavaScript snippets\"></a>JavaScript snippets</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'button'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.textContent = <span class=\"keyword\">this</span>.textContent === <span class=\"string\">'hide'</span> ? <span class=\"string\">'show'</span> : <span class=\"string\">'hide'</span>;</div><div class=\"line\">  <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'html'</span>).classList.toggle(<span class=\"string\">'loading'</span>);</div><div class=\"line\">&#125;, <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"HTMLcollection只包含元素节点，而Nodelist可包含任意节点\"><a href=\"#HTMLcollection只包含元素节点，而Nodelist可包含任意节点\" class=\"headerlink\" title=\"HTMLcollection只包含元素节点，而Nodelist可包含任意节点\"></a>HTMLcollection只包含元素节点，而Nodelist可包含任意节点</h2><h2 id=\"元素节点的offsetHeight和offsetWidth是只读的\"><a href=\"#元素节点的offsetHeight和offsetWidth是只读的\" class=\"headerlink\" title=\"元素节点的offsetHeight和offsetWidth是只读的\"></a>元素节点的offsetHeight和offsetWidth是只读的</h2><h2 id=\"JQ可以一次绑定多个事件，当时原生js不可以\"><a href=\"#JQ可以一次绑定多个事件，当时原生js不可以\" class=\"headerlink\" title=\"JQ可以一次绑定多个事件，当时原生js不可以\"></a>JQ可以一次绑定多个事件，当时原生js不可以</h2><h2 id=\"所有的迭代方法不适用于NodeList\"><a href=\"#所有的迭代方法不适用于NodeList\" class=\"headerlink\" title=\"所有的迭代方法不适用于NodeList\"></a>所有的迭代方法不适用于NodeList</h2><p>将nodeList转换成Array的两种方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[].forEach.call(<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>),<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele,index,array</span>)</span>&#123;&#125;)</div><div class=\"line\"></div><div class=\"line\">NodeList.prototype.forEach = <span class=\"built_in\">Array</span>.prototype.forEach;</div><div class=\"line\"><span class=\"comment\">//deprecated</span></div><div class=\"line\"><span class=\"comment\">//Extending existing DOM functionality through prototypes is often considered bad practice as this can lead to masses of issues.</span></div></pre></td></tr></table></figure>\n<h2 id=\"不要使用for-in迭代数组，它用对象的属性名来迭代\"><a href=\"#不要使用for-in迭代数组，它用对象的属性名来迭代\" class=\"headerlink\" title=\"不要使用for in迭代数组，它用对象的属性名来迭代\"></a>不要使用for in迭代数组，它用对象的属性名来迭代</h2><h2 id=\"NodeList包含任何节点类型-而HTMLCollection只包含元素节点\"><a href=\"#NodeList包含任何节点类型-而HTMLCollection只包含元素节点\" class=\"headerlink\" title=\"NodeList包含任何节点类型,而HTMLCollection只包含元素节点\"></a>NodeList包含任何节点类型,而HTMLCollection只包含元素节点</h2><p>console.log(NodeList instanceof HTMLCollection);</p>\n<h2 id=\"Element-getBoundingClientRect\"><a href=\"#Element-getBoundingClientRect\" class=\"headerlink\" title=\"Element.getBoundingClientRect()\"></a>Element.getBoundingClientRect()</h2><p>返回一个对象，包含着这个元素的大小尺寸:widht,height，和相对于viewport的位置:top,left,right,bottom</p>\n<h2 id=\"pageX-pageY相对于可滚动的页面-clientX-clientY相对于viewport\"><a href=\"#pageX-pageY相对于可滚动的页面-clientX-clientY相对于viewport\" class=\"headerlink\" title=\"pageX,pageY相对于可滚动的页面,clientX,clientY相对于viewport\"></a>pageX,pageY相对于可滚动的页面,clientX,clientY相对于viewport</h2>"},{"_content":"# Native JavaScript Equivalents of jQuery Methods: the DOM and Forms\n# 等同于JQuery方法的原生JavaScript:Dom和表单\n\n[原文地址](https://www.sitepoint.com/jquery-vs-raw-javascript-1-dom-forms/)\n\n# DOM 选择器\nJQuery访问DOM节点使用CSS选择器语法，例如\n\n```js\n// ID为first的文章里所有summary类的段落\nvar n = $(\"article#first p.summary\");\n```\n\n等价的原生js\n\n```js\nvar n = document.querySelectorAll(\"article#first p.summary\");\n```\n`document.querySelectorAll`在所有的现代浏览器及IE8中都实现了，但是jQuery支持许多额外的高级选择器，大多数情况下，在`$()`的包装下运行的是`document.querySelectorAll`\n\n原生JavaScript也提供了四种替代方法它们比querySelectorAll查询速度更快，前提是你的项目能够使用它们\n\n1. document.querySelector(selector) --仅取得地一个匹配到的节点\n2. document.getElementById(idname) --取得一个节点通过它的ID\n3. document.getElementsByTagName(tagname) --取得匹配一个元素节点的节点列表\n4. document.getElementsByClassName(class) --取得一个确切的类名的节点列表\n\ngetElementsByTagName和getElementsByClassName方法也能够被用在某一个节点列表上，这样可以限制特定的祖先元素，例如\n ```js\n var n = document.getElementById(\"first\");\nvar p = n.getElementsByTagName(\"p\");\n```\n作者做了一项测试，使用jQuery2.0和原生的JavaScript获取一个页面上的同一个元素节点，往往原生的速度要快，也证明了通过id或是class获得节点要比querySelectorAll要快\n\n# DOM操作\njQuery提供了许多方法向DOM添加内容，例如\n\n ```js\n $(\"#container\").append(\"<p>more content</p>\");\n ```\n\n它的原理是使用了原生的innerHTML方法，例如\n\n```js\ndocument.getElementById(\"container\").innerHTML += \"<p>more content</p>\";\n```\n\n你也可是使用DOM创建技术，他们更安全但是不比innerHTML快\n\n```js\nvar p = document.createElement(\"p\");\np.appendChild(document.createTextNode(\"more content\");\ndocument.getElementById(\"container\").appendChild(p);\n```\n\n我们也能通过jQuery移除所有的子节点：\n```js\n$(\"#container\").empty();\n```\n等价的原生js使用innerHTM：\n```js\ndocument.getElementById(\"container\").innerHTML = null;\n```\n\n或者一个小函数\n\n```js\nvar c = document.getElementById(\"container\");\nwhile (c.lastChild) c.removeChild(c.lastChild);\n```\n\n最后，我们使用jQuery从DOM移除这整个元素：\n\n```js\n$(\"#container\").remove();\n```\n\n或者原生js\n```\nvar c = document.getElementById(\"container\");\nc.parentNode.removeChild(c);\n```\n\n# SVG\nSVG也有DOM，但是jQuery没有向这些对象提供一个直接的操作方法，因为通常需要使用像createElementNS和getAttributeNS.但是有许多[插件](http://keith-wood.name/svg.html)可供使用，但是更有效的方法是自己打代码或者使用像[Raphaël](http://raphaeljs.com/)和[svg.js](http://svgjs.com/)这样的库\n\n\n# HTML5表单\n使用jQuery或是原生js？\n都不要\n\nHTML5指出不同的input type，例如 emails, telephones, URLs, numbers, times, dates, colors和通过正则表达式的自定义表单，例如，如果你想要强制用户输入邮箱地址，可以使用：\n```html\n<input type=\"email\" name=\"email\" required=\"required\" />\n```\n","source":"_drafts/2016-08-07-等同于JQuery方法的原生JavaScript.md","raw":"# Native JavaScript Equivalents of jQuery Methods: the DOM and Forms\n# 等同于JQuery方法的原生JavaScript:Dom和表单\n\n[原文地址](https://www.sitepoint.com/jquery-vs-raw-javascript-1-dom-forms/)\n\n# DOM 选择器\nJQuery访问DOM节点使用CSS选择器语法，例如\n\n```js\n// ID为first的文章里所有summary类的段落\nvar n = $(\"article#first p.summary\");\n```\n\n等价的原生js\n\n```js\nvar n = document.querySelectorAll(\"article#first p.summary\");\n```\n`document.querySelectorAll`在所有的现代浏览器及IE8中都实现了，但是jQuery支持许多额外的高级选择器，大多数情况下，在`$()`的包装下运行的是`document.querySelectorAll`\n\n原生JavaScript也提供了四种替代方法它们比querySelectorAll查询速度更快，前提是你的项目能够使用它们\n\n1. document.querySelector(selector) --仅取得地一个匹配到的节点\n2. document.getElementById(idname) --取得一个节点通过它的ID\n3. document.getElementsByTagName(tagname) --取得匹配一个元素节点的节点列表\n4. document.getElementsByClassName(class) --取得一个确切的类名的节点列表\n\ngetElementsByTagName和getElementsByClassName方法也能够被用在某一个节点列表上，这样可以限制特定的祖先元素，例如\n ```js\n var n = document.getElementById(\"first\");\nvar p = n.getElementsByTagName(\"p\");\n```\n作者做了一项测试，使用jQuery2.0和原生的JavaScript获取一个页面上的同一个元素节点，往往原生的速度要快，也证明了通过id或是class获得节点要比querySelectorAll要快\n\n# DOM操作\njQuery提供了许多方法向DOM添加内容，例如\n\n ```js\n $(\"#container\").append(\"<p>more content</p>\");\n ```\n\n它的原理是使用了原生的innerHTML方法，例如\n\n```js\ndocument.getElementById(\"container\").innerHTML += \"<p>more content</p>\";\n```\n\n你也可是使用DOM创建技术，他们更安全但是不比innerHTML快\n\n```js\nvar p = document.createElement(\"p\");\np.appendChild(document.createTextNode(\"more content\");\ndocument.getElementById(\"container\").appendChild(p);\n```\n\n我们也能通过jQuery移除所有的子节点：\n```js\n$(\"#container\").empty();\n```\n等价的原生js使用innerHTM：\n```js\ndocument.getElementById(\"container\").innerHTML = null;\n```\n\n或者一个小函数\n\n```js\nvar c = document.getElementById(\"container\");\nwhile (c.lastChild) c.removeChild(c.lastChild);\n```\n\n最后，我们使用jQuery从DOM移除这整个元素：\n\n```js\n$(\"#container\").remove();\n```\n\n或者原生js\n```\nvar c = document.getElementById(\"container\");\nc.parentNode.removeChild(c);\n```\n\n# SVG\nSVG也有DOM，但是jQuery没有向这些对象提供一个直接的操作方法，因为通常需要使用像createElementNS和getAttributeNS.但是有许多[插件](http://keith-wood.name/svg.html)可供使用，但是更有效的方法是自己打代码或者使用像[Raphaël](http://raphaeljs.com/)和[svg.js](http://svgjs.com/)这样的库\n\n\n# HTML5表单\n使用jQuery或是原生js？\n都不要\n\nHTML5指出不同的input type，例如 emails, telephones, URLs, numbers, times, dates, colors和通过正则表达式的自定义表单，例如，如果你想要强制用户输入邮箱地址，可以使用：\n```html\n<input type=\"email\" name=\"email\" required=\"required\" />\n```\n","slug":"2016-08-07-等同于JQuery方法的原生JavaScript","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.196Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzsb1000bn9fkaihtfqg9","content":"<h1 id=\"Native-JavaScript-Equivalents-of-jQuery-Methods-the-DOM-and-Forms\"><a href=\"#Native-JavaScript-Equivalents-of-jQuery-Methods-the-DOM-and-Forms\" class=\"headerlink\" title=\"Native JavaScript Equivalents of jQuery Methods: the DOM and Forms\"></a>Native JavaScript Equivalents of jQuery Methods: the DOM and Forms</h1><h1 id=\"等同于JQuery方法的原生JavaScript-Dom和表单\"><a href=\"#等同于JQuery方法的原生JavaScript-Dom和表单\" class=\"headerlink\" title=\"等同于JQuery方法的原生JavaScript:Dom和表单\"></a>等同于JQuery方法的原生JavaScript:Dom和表单</h1><p><a href=\"https://www.sitepoint.com/jquery-vs-raw-javascript-1-dom-forms/\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n<h1 id=\"DOM-选择器\"><a href=\"#DOM-选择器\" class=\"headerlink\" title=\"DOM 选择器\"></a>DOM 选择器</h1><p>JQuery访问DOM节点使用CSS选择器语法，例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ID为first的文章里所有summary类的段落</span></div><div class=\"line\"><span class=\"keyword\">var</span> n = $(<span class=\"string\">\"article#first p.summary\"</span>);</div></pre></td></tr></table></figure>\n<p>等价的原生js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"article#first p.summary\"</span>);</div></pre></td></tr></table></figure>\n<p><code>document.querySelectorAll</code>在所有的现代浏览器及IE8中都实现了，但是jQuery支持许多额外的高级选择器，大多数情况下，在<code>$()</code>的包装下运行的是<code>document.querySelectorAll</code></p>\n<p>原生JavaScript也提供了四种替代方法它们比querySelectorAll查询速度更快，前提是你的项目能够使用它们</p>\n<ol>\n<li>document.querySelector(selector) –仅取得地一个匹配到的节点</li>\n<li>document.getElementById(idname) –取得一个节点通过它的ID</li>\n<li>document.getElementsByTagName(tagname) –取得匹配一个元素节点的节点列表</li>\n<li>document.getElementsByClassName(class) –取得一个确切的类名的节点列表</li>\n</ol>\n<p>getElementsByTagName和getElementsByClassName方法也能够被用在某一个节点列表上，这样可以限制特定的祖先元素，例如<br> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">var</span> n = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"first\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> p = n.getElementsByTagName(<span class=\"string\">\"p\"</span>);</div></pre></td></tr></table></figure></p>\n<p>作者做了一项测试，使用jQuery2.0和原生的JavaScript获取一个页面上的同一个元素节点，往往原生的速度要快，也证明了通过id或是class获得节点要比querySelectorAll要快</p>\n<h1 id=\"DOM操作\"><a href=\"#DOM操作\" class=\"headerlink\" title=\"DOM操作\"></a>DOM操作</h1><p>jQuery提供了许多方法向DOM添加内容，例如</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"#container\"</span>).append(<span class=\"string\">\"&lt;p&gt;more content&lt;/p&gt;\"</span>);</div></pre></td></tr></table></figure>\n<p>它的原理是使用了原生的innerHTML方法，例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"container\"</span>).innerHTML += <span class=\"string\">\"&lt;p&gt;more content&lt;/p&gt;\"</span>;</div></pre></td></tr></table></figure>\n<p>你也可是使用DOM创建技术，他们更安全但是不比innerHTML快</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"p\"</span>);</div><div class=\"line\">p.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"more content\"</span>);</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"container\"</span>).appendChild(p);</div></pre></td></tr></table></figure>\n<p>我们也能通过jQuery移除所有的子节点：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"#container\"</span>).empty();</div></pre></td></tr></table></figure></p>\n<p>等价的原生js使用innerHTM：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"container\"</span>).innerHTML = <span class=\"literal\">null</span>;</div></pre></td></tr></table></figure></p>\n<p>或者一个小函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"container\"</span>);</div><div class=\"line\"><span class=\"keyword\">while</span> (c.lastChild) c.removeChild(c.lastChild);</div></pre></td></tr></table></figure>\n<p>最后，我们使用jQuery从DOM移除这整个元素：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"#container\"</span>).remove();</div></pre></td></tr></table></figure>\n<p>或者原生js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var c = document.getElementById(&quot;container&quot;);</div><div class=\"line\">c.parentNode.removeChild(c);</div></pre></td></tr></table></figure></p>\n<h1 id=\"SVG\"><a href=\"#SVG\" class=\"headerlink\" title=\"SVG\"></a>SVG</h1><p>SVG也有DOM，但是jQuery没有向这些对象提供一个直接的操作方法，因为通常需要使用像createElementNS和getAttributeNS.但是有许多<a href=\"http://keith-wood.name/svg.html\" target=\"_blank\" rel=\"external\">插件</a>可供使用，但是更有效的方法是自己打代码或者使用像<a href=\"http://raphaeljs.com/\" target=\"_blank\" rel=\"external\">Raphaël</a>和<a href=\"http://svgjs.com/\" target=\"_blank\" rel=\"external\">svg.js</a>这样的库</p>\n<h1 id=\"HTML5表单\"><a href=\"#HTML5表单\" class=\"headerlink\" title=\"HTML5表单\"></a>HTML5表单</h1><p>使用jQuery或是原生js？<br>都不要</p>\n<p>HTML5指出不同的input type，例如 emails, telephones, URLs, numbers, times, dates, colors和通过正则表达式的自定义表单，例如，如果你想要强制用户输入邮箱地址，可以使用：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">required</span>=<span class=\"string\">\"required\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h1 id=\"Native-JavaScript-Equivalents-of-jQuery-Methods-the-DOM-and-Forms\"><a href=\"#Native-JavaScript-Equivalents-of-jQuery-Methods-the-DOM-and-Forms\" class=\"headerlink\" title=\"Native JavaScript Equivalents of jQuery Methods: the DOM and Forms\"></a>Native JavaScript Equivalents of jQuery Methods: the DOM and Forms</h1><h1 id=\"等同于JQuery方法的原生JavaScript-Dom和表单\"><a href=\"#等同于JQuery方法的原生JavaScript-Dom和表单\" class=\"headerlink\" title=\"等同于JQuery方法的原生JavaScript:Dom和表单\"></a>等同于JQuery方法的原生JavaScript:Dom和表单</h1><p><a href=\"https://www.sitepoint.com/jquery-vs-raw-javascript-1-dom-forms/\">原文地址</a></p>\n<h1 id=\"DOM-选择器\"><a href=\"#DOM-选择器\" class=\"headerlink\" title=\"DOM 选择器\"></a>DOM 选择器</h1><p>JQuery访问DOM节点使用CSS选择器语法，例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ID为first的文章里所有summary类的段落</span></div><div class=\"line\"><span class=\"keyword\">var</span> n = $(<span class=\"string\">\"article#first p.summary\"</span>);</div></pre></td></tr></table></figure>\n<p>等价的原生js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">\"article#first p.summary\"</span>);</div></pre></td></tr></table></figure>\n<p><code>document.querySelectorAll</code>在所有的现代浏览器及IE8中都实现了，但是jQuery支持许多额外的高级选择器，大多数情况下，在<code>$()</code>的包装下运行的是<code>document.querySelectorAll</code></p>\n<p>原生JavaScript也提供了四种替代方法它们比querySelectorAll查询速度更快，前提是你的项目能够使用它们</p>\n<ol>\n<li>document.querySelector(selector) –仅取得地一个匹配到的节点</li>\n<li>document.getElementById(idname) –取得一个节点通过它的ID</li>\n<li>document.getElementsByTagName(tagname) –取得匹配一个元素节点的节点列表</li>\n<li>document.getElementsByClassName(class) –取得一个确切的类名的节点列表</li>\n</ol>\n<p>getElementsByTagName和getElementsByClassName方法也能够被用在某一个节点列表上，这样可以限制特定的祖先元素，例如<br> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">var</span> n = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"first\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> p = n.getElementsByTagName(<span class=\"string\">\"p\"</span>);</div></pre></td></tr></table></figure></p>\n<p>作者做了一项测试，使用jQuery2.0和原生的JavaScript获取一个页面上的同一个元素节点，往往原生的速度要快，也证明了通过id或是class获得节点要比querySelectorAll要快</p>\n<h1 id=\"DOM操作\"><a href=\"#DOM操作\" class=\"headerlink\" title=\"DOM操作\"></a>DOM操作</h1><p>jQuery提供了许多方法向DOM添加内容，例如</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"#container\"</span>).append(<span class=\"string\">\"&lt;p&gt;more content&lt;/p&gt;\"</span>);</div></pre></td></tr></table></figure>\n<p>它的原理是使用了原生的innerHTML方法，例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"container\"</span>).innerHTML += <span class=\"string\">\"&lt;p&gt;more content&lt;/p&gt;\"</span>;</div></pre></td></tr></table></figure>\n<p>你也可是使用DOM创建技术，他们更安全但是不比innerHTML快</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"p\"</span>);</div><div class=\"line\">p.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"more content\"</span>);</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"container\"</span>).appendChild(p);</div></pre></td></tr></table></figure>\n<p>我们也能通过jQuery移除所有的子节点：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"#container\"</span>).empty();</div></pre></td></tr></table></figure></p>\n<p>等价的原生js使用innerHTM：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"container\"</span>).innerHTML = <span class=\"literal\">null</span>;</div></pre></td></tr></table></figure></p>\n<p>或者一个小函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"container\"</span>);</div><div class=\"line\"><span class=\"keyword\">while</span> (c.lastChild) c.removeChild(c.lastChild);</div></pre></td></tr></table></figure>\n<p>最后，我们使用jQuery从DOM移除这整个元素：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"#container\"</span>).remove();</div></pre></td></tr></table></figure>\n<p>或者原生js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var c = document.getElementById(&quot;container&quot;);</div><div class=\"line\">c.parentNode.removeChild(c);</div></pre></td></tr></table></figure></p>\n<h1 id=\"SVG\"><a href=\"#SVG\" class=\"headerlink\" title=\"SVG\"></a>SVG</h1><p>SVG也有DOM，但是jQuery没有向这些对象提供一个直接的操作方法，因为通常需要使用像createElementNS和getAttributeNS.但是有许多<a href=\"http://keith-wood.name/svg.html\">插件</a>可供使用，但是更有效的方法是自己打代码或者使用像<a href=\"http://raphaeljs.com/\">Raphaël</a>和<a href=\"http://svgjs.com/\">svg.js</a>这样的库</p>\n<h1 id=\"HTML5表单\"><a href=\"#HTML5表单\" class=\"headerlink\" title=\"HTML5表单\"></a>HTML5表单</h1><p>使用jQuery或是原生js？<br>都不要</p>\n<p>HTML5指出不同的input type，例如 emails, telephones, URLs, numbers, times, dates, colors和通过正则表达式的自定义表单，例如，如果你想要强制用户输入邮箱地址，可以使用：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">required</span>=<span class=\"string\">\"required\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n"},{"_content":"# BOM\n## 全局作用域\nBOM的核心对象是window,它表示浏览器的一个实例，它既是JavaScript访问浏览器窗口的API，也是EcamaScript中的全局对象，所以网页中的任何变量，函数都会成为window的属性，方法。\n\n全局变量不可以通过delete操作符删除，而直接在window上定义的属性可以被删除（会在window对象上定义属性吗？），这是因为通过var操作符定义的window属性的[[configureable]]的特性默认设为了fasle\n\n## 窗口关系及框架\n    待阅读完成\n\n## 窗口位置\n以下是window对象的属性：\nscreenLeft screenTop  \n浏览器窗口相对于屏幕左边和上边的位置\n\ninnerWidth,innerHeight\n浏览器窗口的可视尺寸\n\nouterWidth,outerHeight\n浏览器的窗口本身的尺寸,有滚动条的尺寸\n\n以下是html或body的属性：\nclientWidth,clientHeight\n当前的浏览器窗口的大小，视口的大小\n\n\n调整窗口大小\nresizeTo(100,100) <!--调整到100x100-->\nresizeBy(100,50)  <!--在上面的基础上调整，参数是新窗口与旧窗口的差，所以这一行代码调整到200x150-->\n移动窗口\nmoveTo()\nmoveBy()\n由于安全原因，以上四个方法都已被禁用\n\n## 导航和打开窗口\nwindow.open()，这个方法接收四个参数，URL、窗口目标、一个特性字符串、一个表示新页面是否取代浏览器历史记录中当前加载页面的布尔值\n通常情况下只须传递第一个参数.他会默认为你在新窗口中打开与旧窗口功能一致的新窗口;\n第二参数制定窗口在哪里打开，若指定了框架，就会在指定框架中打开，若第二参数制定了一个不存在的窗口或者框架，那就会根据第三个参数的设定打开一根新的窗口，根据这些参数的设定，可以设置工具栏，大小，位置，状态栏等等，（需要时查书），这些名值对以逗号分隔，以等号表示\n可以将新打开的窗口赋给一个变量，这个对象的一个属性是opener，是指向旧窗口的指针\nwindow.close(),方法可以关闭新窗口，但是需要触发。\n虽然浏览器禁止使用resizeTo等方法，但是在新打开的窗口中可以使用\n\n## 间歇调用和超时调用\nsetTimeout(<function>,<time>),延时time后调用function。\nsetInterval(<function>,<time>),每隔time调用function。\n调用这两个方法后都会i返回一个ID，可以通过cleartTimeout().clearInterval()来取消执行这两个方法\n\n# location对象\n## location是最有用的BOM对象之一，它提供了当前窗口中加载的文档的有关信息\n下面列出了loacation的所有属性\n\n|属性名|例子|说明|\n|----|:-----:|-----|\n|hash|\"#content\"|返回hash值，即URL中#后免得字符|\n|host|\"www.host.com:80\"|返回服务器名称和端口号（如果有|\n|hostname|\"www.host.com\"|返回不带端口号的服务器名称|\n|href|\"http://www.href.com\"|返回完整的URL|\n|pathname|\"/page/3\"|返回URL中的目录|\n|port|\"8080\"|返回服务器的端口号|\n|protocol|\"https:\"|返回页面使用的协议|\n|search|\"?q=javascript\"|放回URL的查询字符串，以问号开头|\n\n## 位置操作\nlocation对象的assign()方法可以为其传递一个URL来跳转至另一个URL,例如location.assign(\"..\");\n同样设置window.location或者location.href同样可以跳转值特定的URL，还可以根据上面表格中的属性到达特定的location。\n这样的更改是会在浏览器中留下历史记录的，所以用户可以通过历史记录来进行后退和前进，禁用这种行为可以使用replace()方法来代替assign方法。\n还有一个reload()方法,可以重新加载当前页面，如果要强制从服务重新加载，可以为其传入参数true。\n\n# navgitor对象\n## navgaitor对象的属性都是关于浏览器的一些信心，例如vendor，language等等等等。可以用于浏览器检测(需要时查询)\n\n## 检测插件\n 待阅读\n\n## 注册处理程序\n关于RSS订阅和电子邮箱，将一个网站注册成rss或电子邮箱的处理程序\n\n# screen对象\n\n# history对象\n该对象保存着用户的历史记录\n## go()\n通过该对象的go()方法，可以实现页面的前进和后退，可以为其传入整数作为参数\nhistory.go(-1)  //代表后退一页\nhistory.go(2)  //前进两页\n还可以传入字符串作为参数，此时浏览器会跳转到历史记录中包含该字符串第一个位置\n\n## back(),forward()\n模仿浏览器的前进和后退\n","source":"_drafts/2016-08-07-JavaScript--BOM.md","raw":"# BOM\n## 全局作用域\nBOM的核心对象是window,它表示浏览器的一个实例，它既是JavaScript访问浏览器窗口的API，也是EcamaScript中的全局对象，所以网页中的任何变量，函数都会成为window的属性，方法。\n\n全局变量不可以通过delete操作符删除，而直接在window上定义的属性可以被删除（会在window对象上定义属性吗？），这是因为通过var操作符定义的window属性的[[configureable]]的特性默认设为了fasle\n\n## 窗口关系及框架\n    待阅读完成\n\n## 窗口位置\n以下是window对象的属性：\nscreenLeft screenTop  \n浏览器窗口相对于屏幕左边和上边的位置\n\ninnerWidth,innerHeight\n浏览器窗口的可视尺寸\n\nouterWidth,outerHeight\n浏览器的窗口本身的尺寸,有滚动条的尺寸\n\n以下是html或body的属性：\nclientWidth,clientHeight\n当前的浏览器窗口的大小，视口的大小\n\n\n调整窗口大小\nresizeTo(100,100) <!--调整到100x100-->\nresizeBy(100,50)  <!--在上面的基础上调整，参数是新窗口与旧窗口的差，所以这一行代码调整到200x150-->\n移动窗口\nmoveTo()\nmoveBy()\n由于安全原因，以上四个方法都已被禁用\n\n## 导航和打开窗口\nwindow.open()，这个方法接收四个参数，URL、窗口目标、一个特性字符串、一个表示新页面是否取代浏览器历史记录中当前加载页面的布尔值\n通常情况下只须传递第一个参数.他会默认为你在新窗口中打开与旧窗口功能一致的新窗口;\n第二参数制定窗口在哪里打开，若指定了框架，就会在指定框架中打开，若第二参数制定了一个不存在的窗口或者框架，那就会根据第三个参数的设定打开一根新的窗口，根据这些参数的设定，可以设置工具栏，大小，位置，状态栏等等，（需要时查书），这些名值对以逗号分隔，以等号表示\n可以将新打开的窗口赋给一个变量，这个对象的一个属性是opener，是指向旧窗口的指针\nwindow.close(),方法可以关闭新窗口，但是需要触发。\n虽然浏览器禁止使用resizeTo等方法，但是在新打开的窗口中可以使用\n\n## 间歇调用和超时调用\nsetTimeout(<function>,<time>),延时time后调用function。\nsetInterval(<function>,<time>),每隔time调用function。\n调用这两个方法后都会i返回一个ID，可以通过cleartTimeout().clearInterval()来取消执行这两个方法\n\n# location对象\n## location是最有用的BOM对象之一，它提供了当前窗口中加载的文档的有关信息\n下面列出了loacation的所有属性\n\n|属性名|例子|说明|\n|----|:-----:|-----|\n|hash|\"#content\"|返回hash值，即URL中#后免得字符|\n|host|\"www.host.com:80\"|返回服务器名称和端口号（如果有|\n|hostname|\"www.host.com\"|返回不带端口号的服务器名称|\n|href|\"http://www.href.com\"|返回完整的URL|\n|pathname|\"/page/3\"|返回URL中的目录|\n|port|\"8080\"|返回服务器的端口号|\n|protocol|\"https:\"|返回页面使用的协议|\n|search|\"?q=javascript\"|放回URL的查询字符串，以问号开头|\n\n## 位置操作\nlocation对象的assign()方法可以为其传递一个URL来跳转至另一个URL,例如location.assign(\"..\");\n同样设置window.location或者location.href同样可以跳转值特定的URL，还可以根据上面表格中的属性到达特定的location。\n这样的更改是会在浏览器中留下历史记录的，所以用户可以通过历史记录来进行后退和前进，禁用这种行为可以使用replace()方法来代替assign方法。\n还有一个reload()方法,可以重新加载当前页面，如果要强制从服务重新加载，可以为其传入参数true。\n\n# navgitor对象\n## navgaitor对象的属性都是关于浏览器的一些信心，例如vendor，language等等等等。可以用于浏览器检测(需要时查询)\n\n## 检测插件\n 待阅读\n\n## 注册处理程序\n关于RSS订阅和电子邮箱，将一个网站注册成rss或电子邮箱的处理程序\n\n# screen对象\n\n# history对象\n该对象保存着用户的历史记录\n## go()\n通过该对象的go()方法，可以实现页面的前进和后退，可以为其传入整数作为参数\nhistory.go(-1)  //代表后退一页\nhistory.go(2)  //前进两页\n还可以传入字符串作为参数，此时浏览器会跳转到历史记录中包含该字符串第一个位置\n\n## back(),forward()\n模仿浏览器的前进和后退\n","slug":"2016-08-07-JavaScript--BOM","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.196Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzsb8000cn9fk8cj04yok","content":"<h1 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h1><h2 id=\"全局作用域\"><a href=\"#全局作用域\" class=\"headerlink\" title=\"全局作用域\"></a>全局作用域</h2><p>BOM的核心对象是window,它表示浏览器的一个实例，它既是JavaScript访问浏览器窗口的API，也是EcamaScript中的全局对象，所以网页中的任何变量，函数都会成为window的属性，方法。</p>\n<p>全局变量不可以通过delete操作符删除，而直接在window上定义的属性可以被删除（会在window对象上定义属性吗？），这是因为通过var操作符定义的window属性的[[configureable]]的特性默认设为了fasle</p>\n<h2 id=\"窗口关系及框架\"><a href=\"#窗口关系及框架\" class=\"headerlink\" title=\"窗口关系及框架\"></a>窗口关系及框架</h2><pre><code>待阅读完成\n</code></pre><h2 id=\"窗口位置\"><a href=\"#窗口位置\" class=\"headerlink\" title=\"窗口位置\"></a>窗口位置</h2><p>以下是window对象的属性：<br>screenLeft screenTop<br>浏览器窗口相对于屏幕左边和上边的位置</p>\n<p>innerWidth,innerHeight<br>浏览器窗口的可视尺寸</p>\n<p>outerWidth,outerHeight<br>浏览器的窗口本身的尺寸,有滚动条的尺寸</p>\n<p>以下是html或body的属性：<br>clientWidth,clientHeight<br>当前的浏览器窗口的大小，视口的大小</p>\n<p>调整窗口大小<br>resizeTo(100,100) <!--调整到100x100--><br>resizeBy(100,50)  <!--在上面的基础上调整，参数是新窗口与旧窗口的差，所以这一行代码调整到200x150--><br>移动窗口<br>moveTo()<br>moveBy()<br>由于安全原因，以上四个方法都已被禁用</p>\n<h2 id=\"导航和打开窗口\"><a href=\"#导航和打开窗口\" class=\"headerlink\" title=\"导航和打开窗口\"></a>导航和打开窗口</h2><p>window.open()，这个方法接收四个参数，URL、窗口目标、一个特性字符串、一个表示新页面是否取代浏览器历史记录中当前加载页面的布尔值<br>通常情况下只须传递第一个参数.他会默认为你在新窗口中打开与旧窗口功能一致的新窗口;<br>第二参数制定窗口在哪里打开，若指定了框架，就会在指定框架中打开，若第二参数制定了一个不存在的窗口或者框架，那就会根据第三个参数的设定打开一根新的窗口，根据这些参数的设定，可以设置工具栏，大小，位置，状态栏等等，（需要时查书），这些名值对以逗号分隔，以等号表示<br>可以将新打开的窗口赋给一个变量，这个对象的一个属性是opener，是指向旧窗口的指针<br>window.close(),方法可以关闭新窗口，但是需要触发。<br>虽然浏览器禁止使用resizeTo等方法，但是在新打开的窗口中可以使用</p>\n<h2 id=\"间歇调用和超时调用\"><a href=\"#间歇调用和超时调用\" class=\"headerlink\" title=\"间歇调用和超时调用\"></a>间歇调用和超时调用</h2><p>setTimeout(<function>,<time>),延时time后调用function。<br>setInterval(<function>,<time>),每隔time调用function。<br>调用这两个方法后都会i返回一个ID，可以通过cleartTimeout().clearInterval()来取消执行这两个方法</time></function></time></function></p>\n<h1 id=\"location对象\"><a href=\"#location对象\" class=\"headerlink\" title=\"location对象\"></a>location对象</h1><h2 id=\"location是最有用的BOM对象之一，它提供了当前窗口中加载的文档的有关信息\"><a href=\"#location是最有用的BOM对象之一，它提供了当前窗口中加载的文档的有关信息\" class=\"headerlink\" title=\"location是最有用的BOM对象之一，它提供了当前窗口中加载的文档的有关信息\"></a>location是最有用的BOM对象之一，它提供了当前窗口中加载的文档的有关信息</h2><p>下面列出了loacation的所有属性</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th style=\"text-align:center\">例子</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hash</td>\n<td style=\"text-align:center\">“#content”</td>\n<td>返回hash值，即URL中#后免得字符</td>\n</tr>\n<tr>\n<td>host</td>\n<td style=\"text-align:center\">“www.host.com:80”</td>\n<td>返回服务器名称和端口号（如果有</td>\n</tr>\n<tr>\n<td>hostname</td>\n<td style=\"text-align:center\">“www.host.com”</td>\n<td>返回不带端口号的服务器名称</td>\n</tr>\n<tr>\n<td>href</td>\n<td style=\"text-align:center\">“<a href=\"http://www.href.com\" target=\"_blank\" rel=\"external\">http://www.href.com</a>“</td>\n<td>返回完整的URL</td>\n</tr>\n<tr>\n<td>pathname</td>\n<td style=\"text-align:center\">“/page/3”</td>\n<td>返回URL中的目录</td>\n</tr>\n<tr>\n<td>port</td>\n<td style=\"text-align:center\">“8080”</td>\n<td>返回服务器的端口号</td>\n</tr>\n<tr>\n<td>protocol</td>\n<td style=\"text-align:center\">“https:”</td>\n<td>返回页面使用的协议</td>\n</tr>\n<tr>\n<td>search</td>\n<td style=\"text-align:center\">“?q=javascript”</td>\n<td>放回URL的查询字符串，以问号开头</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"位置操作\"><a href=\"#位置操作\" class=\"headerlink\" title=\"位置操作\"></a>位置操作</h2><p>location对象的assign()方法可以为其传递一个URL来跳转至另一个URL,例如location.assign(“..”);<br>同样设置window.location或者location.href同样可以跳转值特定的URL，还可以根据上面表格中的属性到达特定的location。<br>这样的更改是会在浏览器中留下历史记录的，所以用户可以通过历史记录来进行后退和前进，禁用这种行为可以使用replace()方法来代替assign方法。<br>还有一个reload()方法,可以重新加载当前页面，如果要强制从服务重新加载，可以为其传入参数true。</p>\n<h1 id=\"navgitor对象\"><a href=\"#navgitor对象\" class=\"headerlink\" title=\"navgitor对象\"></a>navgitor对象</h1><h2 id=\"navgaitor对象的属性都是关于浏览器的一些信心，例如vendor，language等等等等。可以用于浏览器检测-需要时查询\"><a href=\"#navgaitor对象的属性都是关于浏览器的一些信心，例如vendor，language等等等等。可以用于浏览器检测-需要时查询\" class=\"headerlink\" title=\"navgaitor对象的属性都是关于浏览器的一些信心，例如vendor，language等等等等。可以用于浏览器检测(需要时查询)\"></a>navgaitor对象的属性都是关于浏览器的一些信心，例如vendor，language等等等等。可以用于浏览器检测(需要时查询)</h2><h2 id=\"检测插件\"><a href=\"#检测插件\" class=\"headerlink\" title=\"检测插件\"></a>检测插件</h2><p> 待阅读</p>\n<h2 id=\"注册处理程序\"><a href=\"#注册处理程序\" class=\"headerlink\" title=\"注册处理程序\"></a>注册处理程序</h2><p>关于RSS订阅和电子邮箱，将一个网站注册成rss或电子邮箱的处理程序</p>\n<h1 id=\"screen对象\"><a href=\"#screen对象\" class=\"headerlink\" title=\"screen对象\"></a>screen对象</h1><h1 id=\"history对象\"><a href=\"#history对象\" class=\"headerlink\" title=\"history对象\"></a>history对象</h1><p>该对象保存着用户的历史记录</p>\n<h2 id=\"go\"><a href=\"#go\" class=\"headerlink\" title=\"go()\"></a>go()</h2><p>通过该对象的go()方法，可以实现页面的前进和后退，可以为其传入整数作为参数<br>history.go(-1)  //代表后退一页<br>history.go(2)  //前进两页<br>还可以传入字符串作为参数，此时浏览器会跳转到历史记录中包含该字符串第一个位置</p>\n<h2 id=\"back-forward\"><a href=\"#back-forward\" class=\"headerlink\" title=\"back(),forward()\"></a>back(),forward()</h2><p>模仿浏览器的前进和后退</p>\n","excerpt":"","more":"<h1 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h1><h2 id=\"全局作用域\"><a href=\"#全局作用域\" class=\"headerlink\" title=\"全局作用域\"></a>全局作用域</h2><p>BOM的核心对象是window,它表示浏览器的一个实例，它既是JavaScript访问浏览器窗口的API，也是EcamaScript中的全局对象，所以网页中的任何变量，函数都会成为window的属性，方法。</p>\n<p>全局变量不可以通过delete操作符删除，而直接在window上定义的属性可以被删除（会在window对象上定义属性吗？），这是因为通过var操作符定义的window属性的[[configureable]]的特性默认设为了fasle</p>\n<h2 id=\"窗口关系及框架\"><a href=\"#窗口关系及框架\" class=\"headerlink\" title=\"窗口关系及框架\"></a>窗口关系及框架</h2><pre><code>待阅读完成\n</code></pre><h2 id=\"窗口位置\"><a href=\"#窗口位置\" class=\"headerlink\" title=\"窗口位置\"></a>窗口位置</h2><p>以下是window对象的属性：<br>screenLeft screenTop<br>浏览器窗口相对于屏幕左边和上边的位置</p>\n<p>innerWidth,innerHeight<br>浏览器窗口的可视尺寸</p>\n<p>outerWidth,outerHeight<br>浏览器的窗口本身的尺寸,有滚动条的尺寸</p>\n<p>以下是html或body的属性：<br>clientWidth,clientHeight<br>当前的浏览器窗口的大小，视口的大小</p>\n<p>调整窗口大小<br>resizeTo(100,100) <!--调整到100x100--><br>resizeBy(100,50)  <!--在上面的基础上调整，参数是新窗口与旧窗口的差，所以这一行代码调整到200x150--><br>移动窗口<br>moveTo()<br>moveBy()<br>由于安全原因，以上四个方法都已被禁用</p>\n<h2 id=\"导航和打开窗口\"><a href=\"#导航和打开窗口\" class=\"headerlink\" title=\"导航和打开窗口\"></a>导航和打开窗口</h2><p>window.open()，这个方法接收四个参数，URL、窗口目标、一个特性字符串、一个表示新页面是否取代浏览器历史记录中当前加载页面的布尔值<br>通常情况下只须传递第一个参数.他会默认为你在新窗口中打开与旧窗口功能一致的新窗口;<br>第二参数制定窗口在哪里打开，若指定了框架，就会在指定框架中打开，若第二参数制定了一个不存在的窗口或者框架，那就会根据第三个参数的设定打开一根新的窗口，根据这些参数的设定，可以设置工具栏，大小，位置，状态栏等等，（需要时查书），这些名值对以逗号分隔，以等号表示<br>可以将新打开的窗口赋给一个变量，这个对象的一个属性是opener，是指向旧窗口的指针<br>window.close(),方法可以关闭新窗口，但是需要触发。<br>虽然浏览器禁止使用resizeTo等方法，但是在新打开的窗口中可以使用</p>\n<h2 id=\"间歇调用和超时调用\"><a href=\"#间歇调用和超时调用\" class=\"headerlink\" title=\"间歇调用和超时调用\"></a>间歇调用和超时调用</h2><p>setTimeout(<function>,<time>),延时time后调用function。<br>setInterval(<function>,<time>),每隔time调用function。<br>调用这两个方法后都会i返回一个ID，可以通过cleartTimeout().clearInterval()来取消执行这两个方法</p>\n<h1 id=\"location对象\"><a href=\"#location对象\" class=\"headerlink\" title=\"location对象\"></a>location对象</h1><h2 id=\"location是最有用的BOM对象之一，它提供了当前窗口中加载的文档的有关信息\"><a href=\"#location是最有用的BOM对象之一，它提供了当前窗口中加载的文档的有关信息\" class=\"headerlink\" title=\"location是最有用的BOM对象之一，它提供了当前窗口中加载的文档的有关信息\"></a>location是最有用的BOM对象之一，它提供了当前窗口中加载的文档的有关信息</h2><p>下面列出了loacation的所有属性</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th style=\"text-align:center\">例子</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hash</td>\n<td style=\"text-align:center\">“#content”</td>\n<td>返回hash值，即URL中#后免得字符</td>\n</tr>\n<tr>\n<td>host</td>\n<td style=\"text-align:center\">“www.host.com:80”</td>\n<td>返回服务器名称和端口号（如果有</td>\n</tr>\n<tr>\n<td>hostname</td>\n<td style=\"text-align:center\">“www.host.com”</td>\n<td>返回不带端口号的服务器名称</td>\n</tr>\n<tr>\n<td>href</td>\n<td style=\"text-align:center\">“<a href=\"http://www.href.com\">http://www.href.com</a>“</td>\n<td>返回完整的URL</td>\n</tr>\n<tr>\n<td>pathname</td>\n<td style=\"text-align:center\">“/page/3”</td>\n<td>返回URL中的目录</td>\n</tr>\n<tr>\n<td>port</td>\n<td style=\"text-align:center\">“8080”</td>\n<td>返回服务器的端口号</td>\n</tr>\n<tr>\n<td>protocol</td>\n<td style=\"text-align:center\">“https:”</td>\n<td>返回页面使用的协议</td>\n</tr>\n<tr>\n<td>search</td>\n<td style=\"text-align:center\">“?q=javascript”</td>\n<td>放回URL的查询字符串，以问号开头</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"位置操作\"><a href=\"#位置操作\" class=\"headerlink\" title=\"位置操作\"></a>位置操作</h2><p>location对象的assign()方法可以为其传递一个URL来跳转至另一个URL,例如location.assign(“..”);<br>同样设置window.location或者location.href同样可以跳转值特定的URL，还可以根据上面表格中的属性到达特定的location。<br>这样的更改是会在浏览器中留下历史记录的，所以用户可以通过历史记录来进行后退和前进，禁用这种行为可以使用replace()方法来代替assign方法。<br>还有一个reload()方法,可以重新加载当前页面，如果要强制从服务重新加载，可以为其传入参数true。</p>\n<h1 id=\"navgitor对象\"><a href=\"#navgitor对象\" class=\"headerlink\" title=\"navgitor对象\"></a>navgitor对象</h1><h2 id=\"navgaitor对象的属性都是关于浏览器的一些信心，例如vendor，language等等等等。可以用于浏览器检测-需要时查询\"><a href=\"#navgaitor对象的属性都是关于浏览器的一些信心，例如vendor，language等等等等。可以用于浏览器检测-需要时查询\" class=\"headerlink\" title=\"navgaitor对象的属性都是关于浏览器的一些信心，例如vendor，language等等等等。可以用于浏览器检测(需要时查询)\"></a>navgaitor对象的属性都是关于浏览器的一些信心，例如vendor，language等等等等。可以用于浏览器检测(需要时查询)</h2><h2 id=\"检测插件\"><a href=\"#检测插件\" class=\"headerlink\" title=\"检测插件\"></a>检测插件</h2><p> 待阅读</p>\n<h2 id=\"注册处理程序\"><a href=\"#注册处理程序\" class=\"headerlink\" title=\"注册处理程序\"></a>注册处理程序</h2><p>关于RSS订阅和电子邮箱，将一个网站注册成rss或电子邮箱的处理程序</p>\n<h1 id=\"screen对象\"><a href=\"#screen对象\" class=\"headerlink\" title=\"screen对象\"></a>screen对象</h1><h1 id=\"history对象\"><a href=\"#history对象\" class=\"headerlink\" title=\"history对象\"></a>history对象</h1><p>该对象保存着用户的历史记录</p>\n<h2 id=\"go\"><a href=\"#go\" class=\"headerlink\" title=\"go()\"></a>go()</h2><p>通过该对象的go()方法，可以实现页面的前进和后退，可以为其传入整数作为参数<br>history.go(-1)  //代表后退一页<br>history.go(2)  //前进两页<br>还可以传入字符串作为参数，此时浏览器会跳转到历史记录中包含该字符串第一个位置</p>\n<h2 id=\"back-forward\"><a href=\"#back-forward\" class=\"headerlink\" title=\"back(),forward()\"></a>back(),forward()</h2><p>模仿浏览器的前进和后退</p>\n"},{"_content":"# 表单\n## 提交表单\ntype为submit的input和button可以提交表单，而且会触发submit事件\n可以使用event对象的preventDefault阻止提交表单\n还可以使用form的引用的submit()方法提交表单，但是不会触发submit时间\n\n## 重置表单\ntype为reset的input和button可以重置表单，而且会触发reset事件\n可以使用event对象的preventDefault阻止重置表单\n还可以使用form的引用的reset()方法重置表单，会触发reset事件\n\n## 表单字段\nform的elements属性可以用来访问form下的字段，可以按照name和[]来取得不同的字段，如果name字段相同，则取得一个NodeList，这样的选择只会选择到是表单字段的元素\n### 表单字段共有的属性\nvalue 可读可写\ndisable 可以设置布尔值，使字段bukeyong\n。。。\n为了防止多次提交表单，监听form，在触发submit事件的时候禁用提交按钮\n\n### 表单字段共有的方法\nfocus() 对某一个字段使用，能够激活该字段\nblur() 与focus()相对，使用比较少\n可以使用HTML5的autofocus在html中使用，自动聚焦\n\n### 表单字段共有的事件\nfocus  在表单被聚焦的时候触发\nblur   失去焦点时触发\nchange 对于input和textarea是失去焦点且value值改变时触发，对于select，改变选项时触发\n可以利用这些事件在进行表单填写的时候进行一些交互\n","source":"_drafts/2016-08-09-JavaScript-表单.md","raw":"# 表单\n## 提交表单\ntype为submit的input和button可以提交表单，而且会触发submit事件\n可以使用event对象的preventDefault阻止提交表单\n还可以使用form的引用的submit()方法提交表单，但是不会触发submit时间\n\n## 重置表单\ntype为reset的input和button可以重置表单，而且会触发reset事件\n可以使用event对象的preventDefault阻止重置表单\n还可以使用form的引用的reset()方法重置表单，会触发reset事件\n\n## 表单字段\nform的elements属性可以用来访问form下的字段，可以按照name和[]来取得不同的字段，如果name字段相同，则取得一个NodeList，这样的选择只会选择到是表单字段的元素\n### 表单字段共有的属性\nvalue 可读可写\ndisable 可以设置布尔值，使字段bukeyong\n。。。\n为了防止多次提交表单，监听form，在触发submit事件的时候禁用提交按钮\n\n### 表单字段共有的方法\nfocus() 对某一个字段使用，能够激活该字段\nblur() 与focus()相对，使用比较少\n可以使用HTML5的autofocus在html中使用，自动聚焦\n\n### 表单字段共有的事件\nfocus  在表单被聚焦的时候触发\nblur   失去焦点时触发\nchange 对于input和textarea是失去焦点且value值改变时触发，对于select，改变选项时触发\n可以利用这些事件在进行表单填写的时候进行一些交互\n","slug":"2016-08-09-JavaScript-表单","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.196Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzsbc000dn9fka5t3lv7r","content":"<h1 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h1><h2 id=\"提交表单\"><a href=\"#提交表单\" class=\"headerlink\" title=\"提交表单\"></a>提交表单</h2><p>type为submit的input和button可以提交表单，而且会触发submit事件<br>可以使用event对象的preventDefault阻止提交表单<br>还可以使用form的引用的submit()方法提交表单，但是不会触发submit时间</p>\n<h2 id=\"重置表单\"><a href=\"#重置表单\" class=\"headerlink\" title=\"重置表单\"></a>重置表单</h2><p>type为reset的input和button可以重置表单，而且会触发reset事件<br>可以使用event对象的preventDefault阻止重置表单<br>还可以使用form的引用的reset()方法重置表单，会触发reset事件</p>\n<h2 id=\"表单字段\"><a href=\"#表单字段\" class=\"headerlink\" title=\"表单字段\"></a>表单字段</h2><p>form的elements属性可以用来访问form下的字段，可以按照name和[]来取得不同的字段，如果name字段相同，则取得一个NodeList，这样的选择只会选择到是表单字段的元素</p>\n<h3 id=\"表单字段共有的属性\"><a href=\"#表单字段共有的属性\" class=\"headerlink\" title=\"表单字段共有的属性\"></a>表单字段共有的属性</h3><p>value 可读可写<br>disable 可以设置布尔值，使字段bukeyong<br>。。。<br>为了防止多次提交表单，监听form，在触发submit事件的时候禁用提交按钮</p>\n<h3 id=\"表单字段共有的方法\"><a href=\"#表单字段共有的方法\" class=\"headerlink\" title=\"表单字段共有的方法\"></a>表单字段共有的方法</h3><p>focus() 对某一个字段使用，能够激活该字段<br>blur() 与focus()相对，使用比较少<br>可以使用HTML5的autofocus在html中使用，自动聚焦</p>\n<h3 id=\"表单字段共有的事件\"><a href=\"#表单字段共有的事件\" class=\"headerlink\" title=\"表单字段共有的事件\"></a>表单字段共有的事件</h3><p>focus  在表单被聚焦的时候触发<br>blur   失去焦点时触发<br>change 对于input和textarea是失去焦点且value值改变时触发，对于select，改变选项时触发<br>可以利用这些事件在进行表单填写的时候进行一些交互</p>\n","excerpt":"","more":"<h1 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h1><h2 id=\"提交表单\"><a href=\"#提交表单\" class=\"headerlink\" title=\"提交表单\"></a>提交表单</h2><p>type为submit的input和button可以提交表单，而且会触发submit事件<br>可以使用event对象的preventDefault阻止提交表单<br>还可以使用form的引用的submit()方法提交表单，但是不会触发submit时间</p>\n<h2 id=\"重置表单\"><a href=\"#重置表单\" class=\"headerlink\" title=\"重置表单\"></a>重置表单</h2><p>type为reset的input和button可以重置表单，而且会触发reset事件<br>可以使用event对象的preventDefault阻止重置表单<br>还可以使用form的引用的reset()方法重置表单，会触发reset事件</p>\n<h2 id=\"表单字段\"><a href=\"#表单字段\" class=\"headerlink\" title=\"表单字段\"></a>表单字段</h2><p>form的elements属性可以用来访问form下的字段，可以按照name和[]来取得不同的字段，如果name字段相同，则取得一个NodeList，这样的选择只会选择到是表单字段的元素</p>\n<h3 id=\"表单字段共有的属性\"><a href=\"#表单字段共有的属性\" class=\"headerlink\" title=\"表单字段共有的属性\"></a>表单字段共有的属性</h3><p>value 可读可写<br>disable 可以设置布尔值，使字段bukeyong<br>。。。<br>为了防止多次提交表单，监听form，在触发submit事件的时候禁用提交按钮</p>\n<h3 id=\"表单字段共有的方法\"><a href=\"#表单字段共有的方法\" class=\"headerlink\" title=\"表单字段共有的方法\"></a>表单字段共有的方法</h3><p>focus() 对某一个字段使用，能够激活该字段<br>blur() 与focus()相对，使用比较少<br>可以使用HTML5的autofocus在html中使用，自动聚焦</p>\n<h3 id=\"表单字段共有的事件\"><a href=\"#表单字段共有的事件\" class=\"headerlink\" title=\"表单字段共有的事件\"></a>表单字段共有的事件</h3><p>focus  在表单被聚焦的时候触发<br>blur   失去焦点时触发<br>change 对于input和textarea是失去焦点且value值改变时触发，对于select，改变选项时触发<br>可以利用这些事件在进行表单填写的时候进行一些交互</p>\n"},{"_content":"# HTTP服务器\n 1. 引入http模块\n 2. 使用http的createServer方法创建服务器\n 3. 编写基本的路由，其步骤分为\n    1. 判断请求的url，根据不同的请求进行不同的响应\n    2. 如果判断成功，返回正确的页面，使用res的writeHead方法编写响应的头信息，其中包括状态码，和以JSON书写的Content-Type\n    3. 再使用fs模块的createReadStream方法读取服务器上需要进行响应的html文件，再使用pipe管道输送到res\n    4. 如果没有相应的url,则使用上述相同的方法返回404页面\n4. 设置监听端口和服务器地址\n\n# Express\n为了实现功能更强的路由，引入了express模块\n将express对象赋值给app\n通过app的get，post，delete，put方法可以实现基本的HTTP方法\nget方法接收两个参数，第一个是路由地址，第二个是功能函数，对请求和响应作出处理\nres的send可以返回字符串，sendFile可以放回html文件\napp的listen方法监听端口\n## 模板\n可以为express指定view模板引擎，方法是set('view engine','jade'),创建一个views目录存放模板\n使用模板时，使用的是res的render方法，对不同的路由使用不同的模板\n动态的数据可以传递对象给模板，在模板中插入数据\n","source":"_drafts/2016-08-11-Node笔记.md","raw":"# HTTP服务器\n 1. 引入http模块\n 2. 使用http的createServer方法创建服务器\n 3. 编写基本的路由，其步骤分为\n    1. 判断请求的url，根据不同的请求进行不同的响应\n    2. 如果判断成功，返回正确的页面，使用res的writeHead方法编写响应的头信息，其中包括状态码，和以JSON书写的Content-Type\n    3. 再使用fs模块的createReadStream方法读取服务器上需要进行响应的html文件，再使用pipe管道输送到res\n    4. 如果没有相应的url,则使用上述相同的方法返回404页面\n4. 设置监听端口和服务器地址\n\n# Express\n为了实现功能更强的路由，引入了express模块\n将express对象赋值给app\n通过app的get，post，delete，put方法可以实现基本的HTTP方法\nget方法接收两个参数，第一个是路由地址，第二个是功能函数，对请求和响应作出处理\nres的send可以返回字符串，sendFile可以放回html文件\napp的listen方法监听端口\n## 模板\n可以为express指定view模板引擎，方法是set('view engine','jade'),创建一个views目录存放模板\n使用模板时，使用的是res的render方法，对不同的路由使用不同的模板\n动态的数据可以传递对象给模板，在模板中插入数据\n","slug":"2016-08-11-Node笔记","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.196Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzsbf000en9fkx3sp2nuc","content":"<h1 id=\"HTTP服务器\"><a href=\"#HTTP服务器\" class=\"headerlink\" title=\"HTTP服务器\"></a>HTTP服务器</h1><ol>\n<li>引入http模块</li>\n<li>使用http的createServer方法创建服务器</li>\n<li>编写基本的路由，其步骤分为<ol>\n<li>判断请求的url，根据不同的请求进行不同的响应</li>\n<li>如果判断成功，返回正确的页面，使用res的writeHead方法编写响应的头信息，其中包括状态码，和以JSON书写的Content-Type</li>\n<li>再使用fs模块的createReadStream方法读取服务器上需要进行响应的html文件，再使用pipe管道输送到res</li>\n<li>如果没有相应的url,则使用上述相同的方法返回404页面</li>\n<li>设置监听端口和服务器地址</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"Express\"><a href=\"#Express\" class=\"headerlink\" title=\"Express\"></a>Express</h1><p>为了实现功能更强的路由，引入了express模块<br>将express对象赋值给app<br>通过app的get，post，delete，put方法可以实现基本的HTTP方法<br>get方法接收两个参数，第一个是路由地址，第二个是功能函数，对请求和响应作出处理<br>res的send可以返回字符串，sendFile可以放回html文件<br>app的listen方法监听端口</p>\n<h2 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h2><p>可以为express指定view模板引擎，方法是set(‘view engine’,’jade’),创建一个views目录存放模板<br>使用模板时，使用的是res的render方法，对不同的路由使用不同的模板<br>动态的数据可以传递对象给模板，在模板中插入数据</p>\n","excerpt":"","more":"<h1 id=\"HTTP服务器\"><a href=\"#HTTP服务器\" class=\"headerlink\" title=\"HTTP服务器\"></a>HTTP服务器</h1><ol>\n<li>引入http模块</li>\n<li>使用http的createServer方法创建服务器</li>\n<li>编写基本的路由，其步骤分为<ol>\n<li>判断请求的url，根据不同的请求进行不同的响应</li>\n<li>如果判断成功，返回正确的页面，使用res的writeHead方法编写响应的头信息，其中包括状态码，和以JSON书写的Content-Type</li>\n<li>再使用fs模块的createReadStream方法读取服务器上需要进行响应的html文件，再使用pipe管道输送到res</li>\n<li>如果没有相应的url,则使用上述相同的方法返回404页面</li>\n<li>设置监听端口和服务器地址</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"Express\"><a href=\"#Express\" class=\"headerlink\" title=\"Express\"></a>Express</h1><p>为了实现功能更强的路由，引入了express模块<br>将express对象赋值给app<br>通过app的get，post，delete，put方法可以实现基本的HTTP方法<br>get方法接收两个参数，第一个是路由地址，第二个是功能函数，对请求和响应作出处理<br>res的send可以返回字符串，sendFile可以放回html文件<br>app的listen方法监听端口</p>\n<h2 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h2><p>可以为express指定view模板引擎，方法是set(‘view engine’,’jade’),创建一个views目录存放模板<br>使用模板时，使用的是res的render方法，对不同的路由使用不同的模板<br>动态的数据可以传递对象给模板，在模板中插入数据</p>\n"},{"_content":"# DOM扩展\n","source":"_drafts/2016-08-15-JavaScript-DOM扩展.md","raw":"# DOM扩展\n","slug":"2016-08-15-JavaScript-DOM扩展","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.200Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzsbi000fn9fk89my2zqg","content":"<h1 id=\"DOM扩展\"><a href=\"#DOM扩展\" class=\"headerlink\" title=\"DOM扩展\"></a>DOM扩展</h1>","excerpt":"","more":"<h1 id=\"DOM扩展\"><a href=\"#DOM扩展\" class=\"headerlink\" title=\"DOM扩展\"></a>DOM扩展</h1>"},{"_content":"# 引用类型\n\n## Object类型\nObject类型常用来保存数据，可以使用两种方法来创建、\n```js\nvar people = new Obejct();\npeople.age = 29;\npeople.name = 'foo';\n\nor\n\nvar people={\n    age: 29;\n    name : 'foo';\n}\n```\n## Array类型\nArray的length属性可以得到数组的长度，所以数组的最后一项的索引是length-1\n\n### 检测数组\nvalue instanceOf Array 可以检测，但如果页面中有两个框架就会出现问题\n所以有专门针对Array.isArray(value)的方法\n\n### 转换方法\n这些转换方法不改变原有的数组\nvalueOf 对于数组使用这个方法会返回原本的数组\ntoString() 返回一个将数组的每一项以逗号连接的字符串\ntoLocaleString() 待讨论\njoin()  可以使用任意字符串将数组的每一项连接起来\n\n### 栈方法\npush() 将一个值从数组的尾部插入\npop()  将一个值从数组的尾部推出\nshift() 将一个值从数组的首部推出\nunshift() 将一个值从数组的首部插入\n\n### 重排序方法\nsort()\nreverse()\n这两个方法需要传入一个compare函数才能更好的工作\n\n```js\nfunction compare(a,b) {\n    return a - b ;\n}\n```\n\n### 操作方法\n\n#### concat()\n\nconcat()方法与前面的push()方法不同的是它操作的的对象是原来数组的副本，所以它不会影响原来的数组，只是返回一个新的数组\nconcat()如果不传递参数，只是复制这一个数组;可以为其传入一个或多个数组，它会将其加入数组;如果传递的不是数组，就会简单的将其加入数组的末尾\n\n#### slice()\n\n也是返回一个新数组，它对数组进行切片操作，左闭右开\n如果只传入一个参数，那么就从这个索引开始到最后\n它不影响原来的数组\n\n#### splice()\n\n这个方法的返回值是所删除的项目，会影响原来的数组\n它接受三种参数\n第一种也是第一项参数，开始的索引位置\n第二种是第二项参数，是要删除的项目;如果没有给，就删除从第一个参数所给的索引位置开始的所有项\n第三种是第三个参数开始，用来替换的原数组的内容\n\n\n### 位置方法\n#### indexOf()\n很语义化的方法，传递的参数是数组中的某一项，返回的是该项的索引;如果传递的参数不是数组中的一项，那么会返回-1\n如果传入的参数在数组中重复出现，也只会返回第一项的索引\n如果传入的参数是两个？待讨论？\n\n```js\nvar arr = [1,2,10,9,'hi']\nvar indexOfHi =  arr.indexOf('hi');\nconsole.log(indexOfHi); // 4\n\nvar indexOfHi =  arr.indexOf('hello');\nconsole.log(indexOfHi); // -1\n```\n#### lastIndexOf()\n与indexOf的不同是从数组的末尾开始逆向查找，但是索引还是正常顺序\n\n### 迭代方法\n**所有的迭代方法不适用于NodeList**\n数组的迭代方法接收一个函数，函数有三个参数:item，index，array;都不改变原来的数组\n#### some() every()\nsome方法对传入的数组array的每一项item运行函数中的语句，只要有一项返回true，整个方法就返回true\nevery方法对传入的数组array的每一项item运行函数中的语句，如果每一项都返回true，整个方法就返回true;有一项返回false，整个函数就会返回false\n#### map()\n对数组中的每一项都运行函数中的语句，返回一个新数组\n#### filter()\n对数组中的每一项进行筛选，返回一个新数组，数组中的项是传入函数的筛选条件为true的\n#### forEach()\n没有返回值，对数组中的每一项进行函数的执行\n\n### 缩小方法\n#### reduce() reduceRight()\n这两个方法只是遍历的开始位置不同，其余的都相同\nreduce()接收两个参数，第一个是要在每一项上调用的函数，另一项是初始值\n这个函数接收四个参数: prev,cur,index,array\n\n\n## Date()类型\n使用 var now =  new Date()创建一个日期对象\n如果不传入任何参数，那么则返回当前时间当前时区的日期和时间。\nDate()通过传入毫秒数来获取时间对象，这样是很不方便的，如果想要方便取得确切的某一个时间点所经过的毫秒数，可以使用两种方法\n1. Date.parse()\n传入字符串,返回毫秒数。有几种常用的日期格式\n'月/年/日'   ==>  '6/6/1996'  溢出了会自动进位\n'英文月名 日，年'   ==>  'Jun 6,1996'\n'英文星期几 英文月名 日 年 时:分：秒：时区' ==> 'Thu Jun 06 1996 00:00:00 GMT+0800'\n\n2. Date.UTC()\n传入数值，获取一个时间对象\n\n||格式|例子|\n|---|---|---|\n|年份| 整数|1996|\n|月份| 0～11| 5|\n|日期|1～31|6|\n|小时|0～23|6|\n|分钟|0～59|6|    \n|秒|0～59|6|\nvar now = new Date(Date.parse(1996,5,6,6,6,6))\n结果 ==> Thu Jun 06 1996 06:06:06 GMT+0800 (CST)\n\n在这些参数中，只有前两个是必须的，如果只提供了前两个参数，则日期会设置为1,其余的设置为0\n\n如果在Date()构造函数中直接传入上述的两种参数，会在后台调用各自的方法，从而也能取得正确的日期对象\n\nDate.now()方法返回调用该方法时的日期和时间的毫秒数，起始日期是1970年1月1日零时零分零秒\n\n### 继承的方法\n每个对象都有的toString(),toLocaleString(),valueOf()在Date()中被重写了\ntoLocaleString()，toString()返回日期时间的字符串\nvalueOf()返回对象的毫秒数，可以用于来比较日期\n\n\n## RegExp()类型\n","source":"_drafts/2016-08-14-JavaScript-引用类型.md","raw":"# 引用类型\n\n## Object类型\nObject类型常用来保存数据，可以使用两种方法来创建、\n```js\nvar people = new Obejct();\npeople.age = 29;\npeople.name = 'foo';\n\nor\n\nvar people={\n    age: 29;\n    name : 'foo';\n}\n```\n## Array类型\nArray的length属性可以得到数组的长度，所以数组的最后一项的索引是length-1\n\n### 检测数组\nvalue instanceOf Array 可以检测，但如果页面中有两个框架就会出现问题\n所以有专门针对Array.isArray(value)的方法\n\n### 转换方法\n这些转换方法不改变原有的数组\nvalueOf 对于数组使用这个方法会返回原本的数组\ntoString() 返回一个将数组的每一项以逗号连接的字符串\ntoLocaleString() 待讨论\njoin()  可以使用任意字符串将数组的每一项连接起来\n\n### 栈方法\npush() 将一个值从数组的尾部插入\npop()  将一个值从数组的尾部推出\nshift() 将一个值从数组的首部推出\nunshift() 将一个值从数组的首部插入\n\n### 重排序方法\nsort()\nreverse()\n这两个方法需要传入一个compare函数才能更好的工作\n\n```js\nfunction compare(a,b) {\n    return a - b ;\n}\n```\n\n### 操作方法\n\n#### concat()\n\nconcat()方法与前面的push()方法不同的是它操作的的对象是原来数组的副本，所以它不会影响原来的数组，只是返回一个新的数组\nconcat()如果不传递参数，只是复制这一个数组;可以为其传入一个或多个数组，它会将其加入数组;如果传递的不是数组，就会简单的将其加入数组的末尾\n\n#### slice()\n\n也是返回一个新数组，它对数组进行切片操作，左闭右开\n如果只传入一个参数，那么就从这个索引开始到最后\n它不影响原来的数组\n\n#### splice()\n\n这个方法的返回值是所删除的项目，会影响原来的数组\n它接受三种参数\n第一种也是第一项参数，开始的索引位置\n第二种是第二项参数，是要删除的项目;如果没有给，就删除从第一个参数所给的索引位置开始的所有项\n第三种是第三个参数开始，用来替换的原数组的内容\n\n\n### 位置方法\n#### indexOf()\n很语义化的方法，传递的参数是数组中的某一项，返回的是该项的索引;如果传递的参数不是数组中的一项，那么会返回-1\n如果传入的参数在数组中重复出现，也只会返回第一项的索引\n如果传入的参数是两个？待讨论？\n\n```js\nvar arr = [1,2,10,9,'hi']\nvar indexOfHi =  arr.indexOf('hi');\nconsole.log(indexOfHi); // 4\n\nvar indexOfHi =  arr.indexOf('hello');\nconsole.log(indexOfHi); // -1\n```\n#### lastIndexOf()\n与indexOf的不同是从数组的末尾开始逆向查找，但是索引还是正常顺序\n\n### 迭代方法\n**所有的迭代方法不适用于NodeList**\n数组的迭代方法接收一个函数，函数有三个参数:item，index，array;都不改变原来的数组\n#### some() every()\nsome方法对传入的数组array的每一项item运行函数中的语句，只要有一项返回true，整个方法就返回true\nevery方法对传入的数组array的每一项item运行函数中的语句，如果每一项都返回true，整个方法就返回true;有一项返回false，整个函数就会返回false\n#### map()\n对数组中的每一项都运行函数中的语句，返回一个新数组\n#### filter()\n对数组中的每一项进行筛选，返回一个新数组，数组中的项是传入函数的筛选条件为true的\n#### forEach()\n没有返回值，对数组中的每一项进行函数的执行\n\n### 缩小方法\n#### reduce() reduceRight()\n这两个方法只是遍历的开始位置不同，其余的都相同\nreduce()接收两个参数，第一个是要在每一项上调用的函数，另一项是初始值\n这个函数接收四个参数: prev,cur,index,array\n\n\n## Date()类型\n使用 var now =  new Date()创建一个日期对象\n如果不传入任何参数，那么则返回当前时间当前时区的日期和时间。\nDate()通过传入毫秒数来获取时间对象，这样是很不方便的，如果想要方便取得确切的某一个时间点所经过的毫秒数，可以使用两种方法\n1. Date.parse()\n传入字符串,返回毫秒数。有几种常用的日期格式\n'月/年/日'   ==>  '6/6/1996'  溢出了会自动进位\n'英文月名 日，年'   ==>  'Jun 6,1996'\n'英文星期几 英文月名 日 年 时:分：秒：时区' ==> 'Thu Jun 06 1996 00:00:00 GMT+0800'\n\n2. Date.UTC()\n传入数值，获取一个时间对象\n\n||格式|例子|\n|---|---|---|\n|年份| 整数|1996|\n|月份| 0～11| 5|\n|日期|1～31|6|\n|小时|0～23|6|\n|分钟|0～59|6|    \n|秒|0～59|6|\nvar now = new Date(Date.parse(1996,5,6,6,6,6))\n结果 ==> Thu Jun 06 1996 06:06:06 GMT+0800 (CST)\n\n在这些参数中，只有前两个是必须的，如果只提供了前两个参数，则日期会设置为1,其余的设置为0\n\n如果在Date()构造函数中直接传入上述的两种参数，会在后台调用各自的方法，从而也能取得正确的日期对象\n\nDate.now()方法返回调用该方法时的日期和时间的毫秒数，起始日期是1970年1月1日零时零分零秒\n\n### 继承的方法\n每个对象都有的toString(),toLocaleString(),valueOf()在Date()中被重写了\ntoLocaleString()，toString()返回日期时间的字符串\nvalueOf()返回对象的毫秒数，可以用于来比较日期\n\n\n## RegExp()类型\n","slug":"2016-08-14-JavaScript-引用类型","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.200Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzsbl000gn9fktqsrd5zv","content":"<h1 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h1><h2 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h2><p>Object类型常用来保存数据，可以使用两种方法来创建、<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> people = <span class=\"keyword\">new</span> Obejct();</div><div class=\"line\">people.age = <span class=\"number\">29</span>;</div><div class=\"line\">people.name = <span class=\"string\">'foo'</span>;</div><div class=\"line\"></div><div class=\"line\">or</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> people=&#123;</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">29</span>;</div><div class=\"line\">    name : <span class=\"string\">'foo'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Array类型\"><a href=\"#Array类型\" class=\"headerlink\" title=\"Array类型\"></a>Array类型</h2><p>Array的length属性可以得到数组的长度，所以数组的最后一项的索引是length-1</p>\n<h3 id=\"检测数组\"><a href=\"#检测数组\" class=\"headerlink\" title=\"检测数组\"></a>检测数组</h3><p>value instanceOf Array 可以检测，但如果页面中有两个框架就会出现问题<br>所以有专门针对Array.isArray(value)的方法</p>\n<h3 id=\"转换方法\"><a href=\"#转换方法\" class=\"headerlink\" title=\"转换方法\"></a>转换方法</h3><p>这些转换方法不改变原有的数组<br>valueOf 对于数组使用这个方法会返回原本的数组<br>toString() 返回一个将数组的每一项以逗号连接的字符串<br>toLocaleString() 待讨论<br>join()  可以使用任意字符串将数组的每一项连接起来</p>\n<h3 id=\"栈方法\"><a href=\"#栈方法\" class=\"headerlink\" title=\"栈方法\"></a>栈方法</h3><p>push() 将一个值从数组的尾部插入<br>pop()  将一个值从数组的尾部推出<br>shift() 将一个值从数组的首部推出<br>unshift() 将一个值从数组的首部插入</p>\n<h3 id=\"重排序方法\"><a href=\"#重排序方法\" class=\"headerlink\" title=\"重排序方法\"></a>重排序方法</h3><p>sort()<br>reverse()<br>这两个方法需要传入一个compare函数才能更好的工作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">a,b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a - b ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"操作方法\"><a href=\"#操作方法\" class=\"headerlink\" title=\"操作方法\"></a>操作方法</h3><h4 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h4><p>concat()方法与前面的push()方法不同的是它操作的的对象是原来数组的副本，所以它不会影响原来的数组，只是返回一个新的数组<br>concat()如果不传递参数，只是复制这一个数组;可以为其传入一个或多个数组，它会将其加入数组;如果传递的不是数组，就会简单的将其加入数组的末尾</p>\n<h4 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice()\"></a>slice()</h4><p>也是返回一个新数组，它对数组进行切片操作，左闭右开<br>如果只传入一个参数，那么就从这个索引开始到最后<br>它不影响原来的数组</p>\n<h4 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice()\"></a>splice()</h4><p>这个方法的返回值是所删除的项目，会影响原来的数组<br>它接受三种参数<br>第一种也是第一项参数，开始的索引位置<br>第二种是第二项参数，是要删除的项目;如果没有给，就删除从第一个参数所给的索引位置开始的所有项<br>第三种是第三个参数开始，用来替换的原数组的内容</p>\n<h3 id=\"位置方法\"><a href=\"#位置方法\" class=\"headerlink\" title=\"位置方法\"></a>位置方法</h3><h4 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"indexOf()\"></a>indexOf()</h4><p>很语义化的方法，传递的参数是数组中的某一项，返回的是该项的索引;如果传递的参数不是数组中的一项，那么会返回-1<br>如果传入的参数在数组中重复出现，也只会返回第一项的索引<br>如果传入的参数是两个？待讨论？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">10</span>,<span class=\"number\">9</span>,<span class=\"string\">'hi'</span>]</div><div class=\"line\"><span class=\"keyword\">var</span> indexOfHi =  arr.indexOf(<span class=\"string\">'hi'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(indexOfHi); <span class=\"comment\">// 4</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> indexOfHi =  arr.indexOf(<span class=\"string\">'hello'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(indexOfHi); <span class=\"comment\">// -1</span></div></pre></td></tr></table></figure>\n<h4 id=\"lastIndexOf\"><a href=\"#lastIndexOf\" class=\"headerlink\" title=\"lastIndexOf()\"></a>lastIndexOf()</h4><p>与indexOf的不同是从数组的末尾开始逆向查找，但是索引还是正常顺序</p>\n<h3 id=\"迭代方法\"><a href=\"#迭代方法\" class=\"headerlink\" title=\"迭代方法\"></a>迭代方法</h3><p><strong>所有的迭代方法不适用于NodeList</strong><br>数组的迭代方法接收一个函数，函数有三个参数:item，index，array;都不改变原来的数组</p>\n<h4 id=\"some-every\"><a href=\"#some-every\" class=\"headerlink\" title=\"some() every()\"></a>some() every()</h4><p>some方法对传入的数组array的每一项item运行函数中的语句，只要有一项返回true，整个方法就返回true<br>every方法对传入的数组array的每一项item运行函数中的语句，如果每一项都返回true，整个方法就返回true;有一项返回false，整个函数就会返回false</p>\n<h4 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h4><p>对数组中的每一项都运行函数中的语句，返回一个新数组</p>\n<h4 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h4><p>对数组中的每一项进行筛选，返回一个新数组，数组中的项是传入函数的筛选条件为true的</p>\n<h4 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach()\"></a>forEach()</h4><p>没有返回值，对数组中的每一项进行函数的执行</p>\n<h3 id=\"缩小方法\"><a href=\"#缩小方法\" class=\"headerlink\" title=\"缩小方法\"></a>缩小方法</h3><h4 id=\"reduce-reduceRight\"><a href=\"#reduce-reduceRight\" class=\"headerlink\" title=\"reduce() reduceRight()\"></a>reduce() reduceRight()</h4><p>这两个方法只是遍历的开始位置不同，其余的都相同<br>reduce()接收两个参数，第一个是要在每一项上调用的函数，另一项是初始值<br>这个函数接收四个参数: prev,cur,index,array</p>\n<h2 id=\"Date-类型\"><a href=\"#Date-类型\" class=\"headerlink\" title=\"Date()类型\"></a>Date()类型</h2><p>使用 var now =  new Date()创建一个日期对象<br>如果不传入任何参数，那么则返回当前时间当前时区的日期和时间。<br>Date()通过传入毫秒数来获取时间对象，这样是很不方便的，如果想要方便取得确切的某一个时间点所经过的毫秒数，可以使用两种方法</p>\n<ol>\n<li><p>Date.parse()<br>传入字符串,返回毫秒数。有几种常用的日期格式<br>‘月/年/日’   ==&gt;  ‘6/6/1996’  溢出了会自动进位<br>‘英文月名 日，年’   ==&gt;  ‘Jun 6,1996’<br>‘英文星期几 英文月名 日 年 时:分：秒：时区’ ==&gt; ‘Thu Jun 06 1996 00:00:00 GMT+0800’</p>\n</li>\n<li><p>Date.UTC()<br>传入数值，获取一个时间对象</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>格式</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>年份</td>\n<td>整数</td>\n<td>1996</td>\n</tr>\n<tr>\n<td>月份</td>\n<td>0～11</td>\n<td>5</td>\n</tr>\n<tr>\n<td>日期</td>\n<td>1～31</td>\n<td>6</td>\n</tr>\n<tr>\n<td>小时</td>\n<td>0～23</td>\n<td>6</td>\n</tr>\n<tr>\n<td>分钟</td>\n<td>0～59</td>\n<td>6</td>\n</tr>\n<tr>\n<td>秒</td>\n<td>0～59</td>\n<td>6</td>\n</tr>\n</tbody>\n</table>\n<p>var now = new Date(Date.parse(1996,5,6,6,6,6))<br>结果 ==&gt; Thu Jun 06 1996 06:06:06 GMT+0800 (CST)</p>\n<p>在这些参数中，只有前两个是必须的，如果只提供了前两个参数，则日期会设置为1,其余的设置为0</p>\n<p>如果在Date()构造函数中直接传入上述的两种参数，会在后台调用各自的方法，从而也能取得正确的日期对象</p>\n<p>Date.now()方法返回调用该方法时的日期和时间的毫秒数，起始日期是1970年1月1日零时零分零秒</p>\n<h3 id=\"继承的方法\"><a href=\"#继承的方法\" class=\"headerlink\" title=\"继承的方法\"></a>继承的方法</h3><p>每个对象都有的toString(),toLocaleString(),valueOf()在Date()中被重写了<br>toLocaleString()，toString()返回日期时间的字符串<br>valueOf()返回对象的毫秒数，可以用于来比较日期</p>\n<h2 id=\"RegExp-类型\"><a href=\"#RegExp-类型\" class=\"headerlink\" title=\"RegExp()类型\"></a>RegExp()类型</h2>","excerpt":"","more":"<h1 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h1><h2 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h2><p>Object类型常用来保存数据，可以使用两种方法来创建、<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> people = <span class=\"keyword\">new</span> Obejct();</div><div class=\"line\">people.age = <span class=\"number\">29</span>;</div><div class=\"line\">people.name = <span class=\"string\">'foo'</span>;</div><div class=\"line\"></div><div class=\"line\">or</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> people=&#123;</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">29</span>;</div><div class=\"line\">    name : <span class=\"string\">'foo'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Array类型\"><a href=\"#Array类型\" class=\"headerlink\" title=\"Array类型\"></a>Array类型</h2><p>Array的length属性可以得到数组的长度，所以数组的最后一项的索引是length-1</p>\n<h3 id=\"检测数组\"><a href=\"#检测数组\" class=\"headerlink\" title=\"检测数组\"></a>检测数组</h3><p>value instanceOf Array 可以检测，但如果页面中有两个框架就会出现问题<br>所以有专门针对Array.isArray(value)的方法</p>\n<h3 id=\"转换方法\"><a href=\"#转换方法\" class=\"headerlink\" title=\"转换方法\"></a>转换方法</h3><p>这些转换方法不改变原有的数组<br>valueOf 对于数组使用这个方法会返回原本的数组<br>toString() 返回一个将数组的每一项以逗号连接的字符串<br>toLocaleString() 待讨论<br>join()  可以使用任意字符串将数组的每一项连接起来</p>\n<h3 id=\"栈方法\"><a href=\"#栈方法\" class=\"headerlink\" title=\"栈方法\"></a>栈方法</h3><p>push() 将一个值从数组的尾部插入<br>pop()  将一个值从数组的尾部推出<br>shift() 将一个值从数组的首部推出<br>unshift() 将一个值从数组的首部插入</p>\n<h3 id=\"重排序方法\"><a href=\"#重排序方法\" class=\"headerlink\" title=\"重排序方法\"></a>重排序方法</h3><p>sort()<br>reverse()<br>这两个方法需要传入一个compare函数才能更好的工作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">a,b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a - b ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"操作方法\"><a href=\"#操作方法\" class=\"headerlink\" title=\"操作方法\"></a>操作方法</h3><h4 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h4><p>concat()方法与前面的push()方法不同的是它操作的的对象是原来数组的副本，所以它不会影响原来的数组，只是返回一个新的数组<br>concat()如果不传递参数，只是复制这一个数组;可以为其传入一个或多个数组，它会将其加入数组;如果传递的不是数组，就会简单的将其加入数组的末尾</p>\n<h4 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice()\"></a>slice()</h4><p>也是返回一个新数组，它对数组进行切片操作，左闭右开<br>如果只传入一个参数，那么就从这个索引开始到最后<br>它不影响原来的数组</p>\n<h4 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice()\"></a>splice()</h4><p>这个方法的返回值是所删除的项目，会影响原来的数组<br>它接受三种参数<br>第一种也是第一项参数，开始的索引位置<br>第二种是第二项参数，是要删除的项目;如果没有给，就删除从第一个参数所给的索引位置开始的所有项<br>第三种是第三个参数开始，用来替换的原数组的内容</p>\n<h3 id=\"位置方法\"><a href=\"#位置方法\" class=\"headerlink\" title=\"位置方法\"></a>位置方法</h3><h4 id=\"indexOf\"><a href=\"#indexOf\" class=\"headerlink\" title=\"indexOf()\"></a>indexOf()</h4><p>很语义化的方法，传递的参数是数组中的某一项，返回的是该项的索引;如果传递的参数不是数组中的一项，那么会返回-1<br>如果传入的参数在数组中重复出现，也只会返回第一项的索引<br>如果传入的参数是两个？待讨论？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">10</span>,<span class=\"number\">9</span>,<span class=\"string\">'hi'</span>]</div><div class=\"line\"><span class=\"keyword\">var</span> indexOfHi =  arr.indexOf(<span class=\"string\">'hi'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(indexOfHi); <span class=\"comment\">// 4</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> indexOfHi =  arr.indexOf(<span class=\"string\">'hello'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(indexOfHi); <span class=\"comment\">// -1</span></div></pre></td></tr></table></figure>\n<h4 id=\"lastIndexOf\"><a href=\"#lastIndexOf\" class=\"headerlink\" title=\"lastIndexOf()\"></a>lastIndexOf()</h4><p>与indexOf的不同是从数组的末尾开始逆向查找，但是索引还是正常顺序</p>\n<h3 id=\"迭代方法\"><a href=\"#迭代方法\" class=\"headerlink\" title=\"迭代方法\"></a>迭代方法</h3><p><strong>所有的迭代方法不适用于NodeList</strong><br>数组的迭代方法接收一个函数，函数有三个参数:item，index，array;都不改变原来的数组</p>\n<h4 id=\"some-every\"><a href=\"#some-every\" class=\"headerlink\" title=\"some() every()\"></a>some() every()</h4><p>some方法对传入的数组array的每一项item运行函数中的语句，只要有一项返回true，整个方法就返回true<br>every方法对传入的数组array的每一项item运行函数中的语句，如果每一项都返回true，整个方法就返回true;有一项返回false，整个函数就会返回false</p>\n<h4 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h4><p>对数组中的每一项都运行函数中的语句，返回一个新数组</p>\n<h4 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h4><p>对数组中的每一项进行筛选，返回一个新数组，数组中的项是传入函数的筛选条件为true的</p>\n<h4 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach()\"></a>forEach()</h4><p>没有返回值，对数组中的每一项进行函数的执行</p>\n<h3 id=\"缩小方法\"><a href=\"#缩小方法\" class=\"headerlink\" title=\"缩小方法\"></a>缩小方法</h3><h4 id=\"reduce-reduceRight\"><a href=\"#reduce-reduceRight\" class=\"headerlink\" title=\"reduce() reduceRight()\"></a>reduce() reduceRight()</h4><p>这两个方法只是遍历的开始位置不同，其余的都相同<br>reduce()接收两个参数，第一个是要在每一项上调用的函数，另一项是初始值<br>这个函数接收四个参数: prev,cur,index,array</p>\n<h2 id=\"Date-类型\"><a href=\"#Date-类型\" class=\"headerlink\" title=\"Date()类型\"></a>Date()类型</h2><p>使用 var now =  new Date()创建一个日期对象<br>如果不传入任何参数，那么则返回当前时间当前时区的日期和时间。<br>Date()通过传入毫秒数来获取时间对象，这样是很不方便的，如果想要方便取得确切的某一个时间点所经过的毫秒数，可以使用两种方法</p>\n<ol>\n<li><p>Date.parse()<br>传入字符串,返回毫秒数。有几种常用的日期格式<br>‘月/年/日’   ==&gt;  ‘6/6/1996’  溢出了会自动进位<br>‘英文月名 日，年’   ==&gt;  ‘Jun 6,1996’<br>‘英文星期几 英文月名 日 年 时:分：秒：时区’ ==&gt; ‘Thu Jun 06 1996 00:00:00 GMT+0800’</p>\n</li>\n<li><p>Date.UTC()<br>传入数值，获取一个时间对象</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>格式</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>年份</td>\n<td>整数</td>\n<td>1996</td>\n</tr>\n<tr>\n<td>月份</td>\n<td>0～11</td>\n<td>5</td>\n</tr>\n<tr>\n<td>日期</td>\n<td>1～31</td>\n<td>6</td>\n</tr>\n<tr>\n<td>小时</td>\n<td>0～23</td>\n<td>6</td>\n</tr>\n<tr>\n<td>分钟</td>\n<td>0～59</td>\n<td>6</td>\n</tr>\n<tr>\n<td>秒</td>\n<td>0～59</td>\n<td>6</td>\n</tr>\n</tbody>\n</table>\n<p>var now = new Date(Date.parse(1996,5,6,6,6,6))<br>结果 ==&gt; Thu Jun 06 1996 06:06:06 GMT+0800 (CST)</p>\n<p>在这些参数中，只有前两个是必须的，如果只提供了前两个参数，则日期会设置为1,其余的设置为0</p>\n<p>如果在Date()构造函数中直接传入上述的两种参数，会在后台调用各自的方法，从而也能取得正确的日期对象</p>\n<p>Date.now()方法返回调用该方法时的日期和时间的毫秒数，起始日期是1970年1月1日零时零分零秒</p>\n<h3 id=\"继承的方法\"><a href=\"#继承的方法\" class=\"headerlink\" title=\"继承的方法\"></a>继承的方法</h3><p>每个对象都有的toString(),toLocaleString(),valueOf()在Date()中被重写了<br>toLocaleString()，toString()返回日期时间的字符串<br>valueOf()返回对象的毫秒数，可以用于来比较日期</p>\n<h2 id=\"RegExp-类型\"><a href=\"#RegExp-类型\" class=\"headerlink\" title=\"RegExp()类型\"></a>RegExp()类型</h2>"},{"_content":"# HTML5 Video and Music Player\n\nHTML5和CSS3让电脑科技变得平易近人，这让我们可以自由定制自己的HTML5播放器\n\n## 视频播放器\n\n```html\n<video controls=\"controls\" preload=\"auto\" id=\"video\" poster=\"../../../img/maxresdefault.jpg\">\n  <source src=\"../../../video/The Chainsmokers - Closer (Lyric) ft. Halsey.mp4\" type=\"video/mp4\"/>\n  <p>你的浏览器不支持<code>video</code>元素</p>\n</video>\n```\n取得对video元素的引用，可以通过w3c标准的media events API对这个对象进行控制\n\n* play() 播放视频\n* pause() 暂停播放视频\n* load() 重新加载视频\n* currentTime += 10 播放进度前进10s\n* currentTime -= 10 播放进度后退10s\n* currentTime = 50 播放进度定位至10s\n* currentTime = 50 播放进度定位至50s\n* playbackRate++ 播放速率加1\n* playbackRate-- 播放速率减1\n* playbackRate+=0.1 播放速率加快0.1\n* playbackRate+=0.1 播放速率减慢0.1\nps:正常速度1,chrome的速率范围是0.0625 - 16.0，火狐的速率范围是0.25 - 5.0，超出这些范围会被静音\n* volume+=0.1 加快0.1音量\n* volume+=0.1 加快0.1音量\nps:音量的范围在0～1之间\n* muted=true 静音\n* muted=false  恢复音量\n\n\npaused属性\nduration\ncurrentTime\n\ntimeupdate事件\n","source":"_drafts/2016-08-17-HTML5-Video-and-Audio.md","raw":"# HTML5 Video and Music Player\n\nHTML5和CSS3让电脑科技变得平易近人，这让我们可以自由定制自己的HTML5播放器\n\n## 视频播放器\n\n```html\n<video controls=\"controls\" preload=\"auto\" id=\"video\" poster=\"../../../img/maxresdefault.jpg\">\n  <source src=\"../../../video/The Chainsmokers - Closer (Lyric) ft. Halsey.mp4\" type=\"video/mp4\"/>\n  <p>你的浏览器不支持<code>video</code>元素</p>\n</video>\n```\n取得对video元素的引用，可以通过w3c标准的media events API对这个对象进行控制\n\n* play() 播放视频\n* pause() 暂停播放视频\n* load() 重新加载视频\n* currentTime += 10 播放进度前进10s\n* currentTime -= 10 播放进度后退10s\n* currentTime = 50 播放进度定位至10s\n* currentTime = 50 播放进度定位至50s\n* playbackRate++ 播放速率加1\n* playbackRate-- 播放速率减1\n* playbackRate+=0.1 播放速率加快0.1\n* playbackRate+=0.1 播放速率减慢0.1\nps:正常速度1,chrome的速率范围是0.0625 - 16.0，火狐的速率范围是0.25 - 5.0，超出这些范围会被静音\n* volume+=0.1 加快0.1音量\n* volume+=0.1 加快0.1音量\nps:音量的范围在0～1之间\n* muted=true 静音\n* muted=false  恢复音量\n\n\npaused属性\nduration\ncurrentTime\n\ntimeupdate事件\n","slug":"2016-08-17-HTML5-Video-and-Audio","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.200Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzsbq000hn9fkuhqnepzj","content":"<h1 id=\"HTML5-Video-and-Music-Player\"><a href=\"#HTML5-Video-and-Music-Player\" class=\"headerlink\" title=\"HTML5 Video and Music Player\"></a>HTML5 Video and Music Player</h1><p>HTML5和CSS3让电脑科技变得平易近人，这让我们可以自由定制自己的HTML5播放器</p>\n<h2 id=\"视频播放器\"><a href=\"#视频播放器\" class=\"headerlink\" title=\"视频播放器\"></a>视频播放器</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">controls</span>=<span class=\"string\">\"controls\"</span> <span class=\"attr\">preload</span>=<span class=\"string\">\"auto\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">poster</span>=<span class=\"string\">\"../../../img/maxresdefault.jpg\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../../video/The Chainsmokers - Closer (Lyric) ft. Halsey.mp4\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/mp4\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>你的浏览器不支持<span class=\"tag\">&lt;<span class=\"name\">code</span>&gt;</span>video<span class=\"tag\">&lt;/<span class=\"name\">code</span>&gt;</span>元素<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>取得对video元素的引用，可以通过w3c标准的media events API对这个对象进行控制</p>\n<ul>\n<li>play() 播放视频</li>\n<li>pause() 暂停播放视频</li>\n<li>load() 重新加载视频</li>\n<li>currentTime += 10 播放进度前进10s</li>\n<li>currentTime -= 10 播放进度后退10s</li>\n<li>currentTime = 50 播放进度定位至10s</li>\n<li>currentTime = 50 播放进度定位至50s</li>\n<li>playbackRate++ 播放速率加1</li>\n<li>playbackRate– 播放速率减1</li>\n<li>playbackRate+=0.1 播放速率加快0.1</li>\n<li>playbackRate+=0.1 播放速率减慢0.1<br>ps:正常速度1,chrome的速率范围是0.0625 - 16.0，火狐的速率范围是0.25 - 5.0，超出这些范围会被静音</li>\n<li>volume+=0.1 加快0.1音量</li>\n<li>volume+=0.1 加快0.1音量<br>ps:音量的范围在0～1之间</li>\n<li>muted=true 静音</li>\n<li>muted=false  恢复音量</li>\n</ul>\n<p>paused属性<br>duration<br>currentTime</p>\n<p>timeupdate事件</p>\n","excerpt":"","more":"<h1 id=\"HTML5-Video-and-Music-Player\"><a href=\"#HTML5-Video-and-Music-Player\" class=\"headerlink\" title=\"HTML5 Video and Music Player\"></a>HTML5 Video and Music Player</h1><p>HTML5和CSS3让电脑科技变得平易近人，这让我们可以自由定制自己的HTML5播放器</p>\n<h2 id=\"视频播放器\"><a href=\"#视频播放器\" class=\"headerlink\" title=\"视频播放器\"></a>视频播放器</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">controls</span>=<span class=\"string\">\"controls\"</span> <span class=\"attr\">preload</span>=<span class=\"string\">\"auto\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">poster</span>=<span class=\"string\">\"../../../img/maxresdefault.jpg\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../../video/The Chainsmokers - Closer (Lyric) ft. Halsey.mp4\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/mp4\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>你的浏览器不支持<span class=\"tag\">&lt;<span class=\"name\">code</span>&gt;</span>video<span class=\"tag\">&lt;/<span class=\"name\">code</span>&gt;</span>元素<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>取得对video元素的引用，可以通过w3c标准的media events API对这个对象进行控制</p>\n<ul>\n<li>play() 播放视频</li>\n<li>pause() 暂停播放视频</li>\n<li>load() 重新加载视频</li>\n<li>currentTime += 10 播放进度前进10s</li>\n<li>currentTime -= 10 播放进度后退10s</li>\n<li>currentTime = 50 播放进度定位至10s</li>\n<li>currentTime = 50 播放进度定位至50s</li>\n<li>playbackRate++ 播放速率加1</li>\n<li>playbackRate– 播放速率减1</li>\n<li>playbackRate+=0.1 播放速率加快0.1</li>\n<li>playbackRate+=0.1 播放速率减慢0.1<br>ps:正常速度1,chrome的速率范围是0.0625 - 16.0，火狐的速率范围是0.25 - 5.0，超出这些范围会被静音</li>\n<li>volume+=0.1 加快0.1音量</li>\n<li>volume+=0.1 加快0.1音量<br>ps:音量的范围在0～1之间</li>\n<li>muted=true 静音</li>\n<li>muted=false  恢复音量</li>\n</ul>\n<p>paused属性<br>duration<br>currentTime</p>\n<p>timeupdate事件</p>\n"},{"_content":"x   svg标签\n\nｇ　for group\n\ndefs hide svg\n\nuse　复用 <use xlink:href:\"#id\"></use> 类似与模板\n\ntitle 标题\n\nfill　填充  fill-opacity 决定填充的透明度\n\nstroke 轮廓　stroke-width决定线宽 stroke-opacity 决定轮廓的透明度 stroke-dasharray:n,m 可以产生n个像素的实线,m个像素的空隙的虚线\n\n使用use复制svg的副本后，只能对整个g的fill　style,不能对g的后代元素进行style\n\ncurrentColor可以用于子元素,只要父元素的color设置了\n\nSMIL 10px 10px pink\n\ncircle 画圆，cx,cy为圆心,r为半径\n\nline 画线 x1,y1为起点坐标,x2,y2为终点坐标\n\npolyline 折线\n\ntext 文本的容器,x\n\nviewport 视口,画布区域\n\nrect 画矩形,x为矩形起点的x轴位置,y为矩形起点的y轴位置 width,height决定宽高\n要获得圆角矩形,rx制定x方向的圆角半径,ry决定y方向的圆角半径,如果只指定一个,则认为二者相等\n\ncircle 画圆,cx圆心x轴坐标,cy圆心y轴坐标\n\nellipse 椭圆,cx,cy为原点坐标,rx,ry分别代表x轴和y轴的半径\n\npolygon 多边形 points的值为多边形的每个顶点的坐标\n\npolyline 折线 具有与polygon同样的points属性\nline和polyline都有一个stroke-linecap属性确定头尾的形状,可以为round,butt,space\n当stroke-width宽到一定程度,线与线之间的交界处就可以使用stroke-linejoin来style,可选的值有round,bevel,miter\n\npath 是前面所有形状的简写形式\npath M -- moveto\n     L -- lineto\n     Z -- closePath\n     H -- horizatol 水平线\n     V -- vertical 垂直线\n     描述轮廓的数据都放在d:data属性中\n如果使用小写的l,h等命令则会启动相对位置,m,z大小写无差异\n\n\ntext\n","source":"_drafts/2016-08-28-SVG.md","raw":"x   svg标签\n\nｇ　for group\n\ndefs hide svg\n\nuse　复用 <use xlink:href:\"#id\"></use> 类似与模板\n\ntitle 标题\n\nfill　填充  fill-opacity 决定填充的透明度\n\nstroke 轮廓　stroke-width决定线宽 stroke-opacity 决定轮廓的透明度 stroke-dasharray:n,m 可以产生n个像素的实线,m个像素的空隙的虚线\n\n使用use复制svg的副本后，只能对整个g的fill　style,不能对g的后代元素进行style\n\ncurrentColor可以用于子元素,只要父元素的color设置了\n\nSMIL 10px 10px pink\n\ncircle 画圆，cx,cy为圆心,r为半径\n\nline 画线 x1,y1为起点坐标,x2,y2为终点坐标\n\npolyline 折线\n\ntext 文本的容器,x\n\nviewport 视口,画布区域\n\nrect 画矩形,x为矩形起点的x轴位置,y为矩形起点的y轴位置 width,height决定宽高\n要获得圆角矩形,rx制定x方向的圆角半径,ry决定y方向的圆角半径,如果只指定一个,则认为二者相等\n\ncircle 画圆,cx圆心x轴坐标,cy圆心y轴坐标\n\nellipse 椭圆,cx,cy为原点坐标,rx,ry分别代表x轴和y轴的半径\n\npolygon 多边形 points的值为多边形的每个顶点的坐标\n\npolyline 折线 具有与polygon同样的points属性\nline和polyline都有一个stroke-linecap属性确定头尾的形状,可以为round,butt,space\n当stroke-width宽到一定程度,线与线之间的交界处就可以使用stroke-linejoin来style,可选的值有round,bevel,miter\n\npath 是前面所有形状的简写形式\npath M -- moveto\n     L -- lineto\n     Z -- closePath\n     H -- horizatol 水平线\n     V -- vertical 垂直线\n     描述轮廓的数据都放在d:data属性中\n如果使用小写的l,h等命令则会启动相对位置,m,z大小写无差异\n\n\ntext\n","slug":"2016-08-28-SVG","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.200Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzsbt000in9fk1ry6woav","content":"<p>x   svg标签</p>\n<p>ｇ　for group</p>\n<p>defs hide svg</p>\n<p>use　复用 <use xlink:href:\"#id\"=\"\"></use> 类似与模板</p>\n<p>title 标题</p>\n<p>fill　填充  fill-opacity 决定填充的透明度</p>\n<p>stroke 轮廓　stroke-width决定线宽 stroke-opacity 决定轮廓的透明度 stroke-dasharray:n,m 可以产生n个像素的实线,m个像素的空隙的虚线</p>\n<p>使用use复制svg的副本后，只能对整个g的fill　style,不能对g的后代元素进行style</p>\n<p>currentColor可以用于子元素,只要父元素的color设置了</p>\n<p>SMIL 10px 10px pink</p>\n<p>circle 画圆，cx,cy为圆心,r为半径</p>\n<p>line 画线 x1,y1为起点坐标,x2,y2为终点坐标</p>\n<p>polyline 折线</p>\n<p>text 文本的容器,x</p>\n<p>viewport 视口,画布区域</p>\n<p>rect 画矩形,x为矩形起点的x轴位置,y为矩形起点的y轴位置 width,height决定宽高<br>要获得圆角矩形,rx制定x方向的圆角半径,ry决定y方向的圆角半径,如果只指定一个,则认为二者相等</p>\n<p>circle 画圆,cx圆心x轴坐标,cy圆心y轴坐标</p>\n<p>ellipse 椭圆,cx,cy为原点坐标,rx,ry分别代表x轴和y轴的半径</p>\n<p>polygon 多边形 points的值为多边形的每个顶点的坐标</p>\n<p>polyline 折线 具有与polygon同样的points属性<br>line和polyline都有一个stroke-linecap属性确定头尾的形状,可以为round,butt,space<br>当stroke-width宽到一定程度,线与线之间的交界处就可以使用stroke-linejoin来style,可选的值有round,bevel,miter</p>\n<p>path 是前面所有形状的简写形式<br>path M – moveto<br>     L – lineto<br>     Z – closePath<br>     H – horizatol 水平线<br>     V – vertical 垂直线<br>     描述轮廓的数据都放在d:data属性中<br>如果使用小写的l,h等命令则会启动相对位置,m,z大小写无差异</p>\n<p>text</p>\n","excerpt":"","more":"<p>x   svg标签</p>\n<p>ｇ　for group</p>\n<p>defs hide svg</p>\n<p>use　复用 <use xlink:href:\"#id\"></use> 类似与模板</p>\n<p>title 标题</p>\n<p>fill　填充  fill-opacity 决定填充的透明度</p>\n<p>stroke 轮廓　stroke-width决定线宽 stroke-opacity 决定轮廓的透明度 stroke-dasharray:n,m 可以产生n个像素的实线,m个像素的空隙的虚线</p>\n<p>使用use复制svg的副本后，只能对整个g的fill　style,不能对g的后代元素进行style</p>\n<p>currentColor可以用于子元素,只要父元素的color设置了</p>\n<p>SMIL 10px 10px pink</p>\n<p>circle 画圆，cx,cy为圆心,r为半径</p>\n<p>line 画线 x1,y1为起点坐标,x2,y2为终点坐标</p>\n<p>polyline 折线</p>\n<p>text 文本的容器,x</p>\n<p>viewport 视口,画布区域</p>\n<p>rect 画矩形,x为矩形起点的x轴位置,y为矩形起点的y轴位置 width,height决定宽高<br>要获得圆角矩形,rx制定x方向的圆角半径,ry决定y方向的圆角半径,如果只指定一个,则认为二者相等</p>\n<p>circle 画圆,cx圆心x轴坐标,cy圆心y轴坐标</p>\n<p>ellipse 椭圆,cx,cy为原点坐标,rx,ry分别代表x轴和y轴的半径</p>\n<p>polygon 多边形 points的值为多边形的每个顶点的坐标</p>\n<p>polyline 折线 具有与polygon同样的points属性<br>line和polyline都有一个stroke-linecap属性确定头尾的形状,可以为round,butt,space<br>当stroke-width宽到一定程度,线与线之间的交界处就可以使用stroke-linejoin来style,可选的值有round,bevel,miter</p>\n<p>path 是前面所有形状的简写形式<br>path M – moveto<br>     L – lineto<br>     Z – closePath<br>     H – horizatol 水平线<br>     V – vertical 垂直线<br>     描述轮廓的数据都放在d:data属性中<br>如果使用小写的l,h等命令则会启动相对位置,m,z大小写无差异</p>\n<p>text</p>\n"},{"_content":"!\n","source":"_drafts/2016-09-02-CSS揭秘.md","raw":"!\n","slug":"2016-09-02-CSS揭秘","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.200Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzsbw000jn9fk07m4vtl5","content":"<p>!</p>\n","excerpt":"","more":"<p>!</p>\n"},{"_content":"SVG优点\n* 压缩后体积小\n* 可伸缩，不失真\n* 在retina屏幕上效果好\n* 可以进行交互\n\nSVG可以使用css进行控制的原因是它和html本质上都是XML，\n\n\n## 使用SVG的方法\n* 可以在img标签的src中引入，和使用其它jpg格式的图片无异，但是这样是不能对svg进行太多的控制的而且不能交互，因为它只是一个图片\n* 可以作为背景图片在css的background中插入，这和使用img标签大同小异\n* 可以复制svg的xml代码到html中作为一个标签插入，这样做可以充分通过css控制\n```svg\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 68 65\">\n  <path fill=\"#1A374D\" d=\"M42 27v-20c0-3.7-3.3-7-7-7s-7 3.3-7 7v21l12 15-7 15.7c14.5 13.9 35 2.8 35-13.7 0-13.3-13.4-21.8-26-18zm6 25c-3.9 0-7-3.1-7-7s3.1-7 7-7 7 3.1 7 7-3.1 7-7 7z\"/>\n  <path d=\"M14 27v-20c0-3.7-3.3-7-7-7s-7 3.3-7 7v41c0 8.2 9.2 17 20 17s20-9.2 20-20c0-13.3-13.4-21.8-26-18zm6 25c-3.9 0-7-3.1-7-7s3.1-7 7-7 7 3.1 7 7-3.1 7-7 7z\"/>\n</svg>\n```\n* 使用<object>标签插入像这样\n\n```html\n<object type=\"image/svg+xml\" data=\"data:image/svg+xml;base64,[data]\">\n  fallback\n</object>\n```\n这样做的好处是可以在浏览器上缓存，而且跨浏览器的兼容性更好，而且可以进行交互\n#### 为<object>SVG使用额外的样式表\n```html\n<?xml-stylesheet type=\"text/css\" href=\"svg.css\" ?>\n```\n将这个插入到svg标签中\n\n* SVG的Data URL's\n另一种使用SVG的方法是把它们转换成Data URL'S,它不要求额外的网络请求\nMobilefish.com有[在线转换工具](http://www.mobilefish.com/services/base64/base64.php)可以转换SVG，把svg代码粘贴进去就可以得到结果，记得清楚结果中的换行空格\n","source":"_drafts/SVG.md","raw":"SVG优点\n* 压缩后体积小\n* 可伸缩，不失真\n* 在retina屏幕上效果好\n* 可以进行交互\n\nSVG可以使用css进行控制的原因是它和html本质上都是XML，\n\n\n## 使用SVG的方法\n* 可以在img标签的src中引入，和使用其它jpg格式的图片无异，但是这样是不能对svg进行太多的控制的而且不能交互，因为它只是一个图片\n* 可以作为背景图片在css的background中插入，这和使用img标签大同小异\n* 可以复制svg的xml代码到html中作为一个标签插入，这样做可以充分通过css控制\n```svg\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 68 65\">\n  <path fill=\"#1A374D\" d=\"M42 27v-20c0-3.7-3.3-7-7-7s-7 3.3-7 7v21l12 15-7 15.7c14.5 13.9 35 2.8 35-13.7 0-13.3-13.4-21.8-26-18zm6 25c-3.9 0-7-3.1-7-7s3.1-7 7-7 7 3.1 7 7-3.1 7-7 7z\"/>\n  <path d=\"M14 27v-20c0-3.7-3.3-7-7-7s-7 3.3-7 7v41c0 8.2 9.2 17 20 17s20-9.2 20-20c0-13.3-13.4-21.8-26-18zm6 25c-3.9 0-7-3.1-7-7s3.1-7 7-7 7 3.1 7 7-3.1 7-7 7z\"/>\n</svg>\n```\n* 使用<object>标签插入像这样\n\n```html\n<object type=\"image/svg+xml\" data=\"data:image/svg+xml;base64,[data]\">\n  fallback\n</object>\n```\n这样做的好处是可以在浏览器上缓存，而且跨浏览器的兼容性更好，而且可以进行交互\n#### 为<object>SVG使用额外的样式表\n```html\n<?xml-stylesheet type=\"text/css\" href=\"svg.css\" ?>\n```\n将这个插入到svg标签中\n\n* SVG的Data URL's\n另一种使用SVG的方法是把它们转换成Data URL'S,它不要求额外的网络请求\nMobilefish.com有[在线转换工具](http://www.mobilefish.com/services/base64/base64.php)可以转换SVG，把svg代码粘贴进去就可以得到结果，记得清楚结果中的换行空格\n","slug":"SVG","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.204Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzsc3000kn9fkhyoft761","content":"<p>SVG优点</p>\n<ul>\n<li>压缩后体积小</li>\n<li>可伸缩，不失真</li>\n<li>在retina屏幕上效果好</li>\n<li>可以进行交互</li>\n</ul>\n<p>SVG可以使用css进行控制的原因是它和html本质上都是XML，</p>\n<h2 id=\"使用SVG的方法\"><a href=\"#使用SVG的方法\" class=\"headerlink\" title=\"使用SVG的方法\"></a>使用SVG的方法</h2><ul>\n<li>可以在img标签的src中引入，和使用其它jpg格式的图片无异，但是这样是不能对svg进行太多的控制的而且不能交互，因为它只是一个图片</li>\n<li>可以作为背景图片在css的background中插入，这和使用img标签大同小异</li>\n<li><p>可以复制svg的xml代码到html中作为一个标签插入，这样做可以充分通过css控制</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 68 65&quot;&gt;</div><div class=\"line\">  &lt;path fill=&quot;#1A374D&quot; d=&quot;M42 27v-20c0-3.7-3.3-7-7-7s-7 3.3-7 7v21l12 15-7 15.7c14.5 13.9 35 2.8 35-13.7 0-13.3-13.4-21.8-26-18zm6 25c-3.9 0-7-3.1-7-7s3.1-7 7-7 7 3.1 7 7-3.1 7-7 7z&quot;/&gt;</div><div class=\"line\">  &lt;path d=&quot;M14 27v-20c0-3.7-3.3-7-7-7s-7 3.3-7 7v41c0 8.2 9.2 17 20 17s20-9.2 20-20c0-13.3-13.4-21.8-26-18zm6 25c-3.9 0-7-3.1-7-7s3.1-7 7-7 7 3.1 7 7-3.1 7-7 7z&quot;/&gt;</div><div class=\"line\">&lt;/svg&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用<object>标签插入像这样</object></p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">object</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/svg+xml\"</span> <span class=\"attr\">data</span>=<span class=\"string\">\"data:image/svg+xml;base64,[data]\"</span>&gt;</span></div><div class=\"line\">  fallback</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">object</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这样做的好处是可以在浏览器上缓存，而且跨浏览器的兼容性更好，而且可以进行交互</p>\n<h4 id=\"为SVG使用额外的样式表\"><a href=\"#为SVG使用额外的样式表\" class=\"headerlink\" title=\"为SVG使用额外的样式表\"></a>为<object>SVG使用额外的样式表</object></h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml-stylesheet type=\"text/css\" href=\"svg.css\" ?&gt;</div></pre></td></tr></table></figure>\n<p>将这个插入到svg标签中</p>\n<ul>\n<li>SVG的Data URL’s<br>另一种使用SVG的方法是把它们转换成Data URL’S,它不要求额外的网络请求<br>Mobilefish.com有<a href=\"http://www.mobilefish.com/services/base64/base64.php\" target=\"_blank\" rel=\"external\">在线转换工具</a>可以转换SVG，把svg代码粘贴进去就可以得到结果，记得清楚结果中的换行空格</li>\n</ul>\n","excerpt":"","more":"<p>SVG优点</p>\n<ul>\n<li>压缩后体积小</li>\n<li>可伸缩，不失真</li>\n<li>在retina屏幕上效果好</li>\n<li>可以进行交互</li>\n</ul>\n<p>SVG可以使用css进行控制的原因是它和html本质上都是XML，</p>\n<h2 id=\"使用SVG的方法\"><a href=\"#使用SVG的方法\" class=\"headerlink\" title=\"使用SVG的方法\"></a>使用SVG的方法</h2><ul>\n<li>可以在img标签的src中引入，和使用其它jpg格式的图片无异，但是这样是不能对svg进行太多的控制的而且不能交互，因为它只是一个图片</li>\n<li>可以作为背景图片在css的background中插入，这和使用img标签大同小异</li>\n<li><p>可以复制svg的xml代码到html中作为一个标签插入，这样做可以充分通过css控制</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 68 65&quot;&gt;</div><div class=\"line\">  &lt;path fill=&quot;#1A374D&quot; d=&quot;M42 27v-20c0-3.7-3.3-7-7-7s-7 3.3-7 7v21l12 15-7 15.7c14.5 13.9 35 2.8 35-13.7 0-13.3-13.4-21.8-26-18zm6 25c-3.9 0-7-3.1-7-7s3.1-7 7-7 7 3.1 7 7-3.1 7-7 7z&quot;/&gt;</div><div class=\"line\">  &lt;path d=&quot;M14 27v-20c0-3.7-3.3-7-7-7s-7 3.3-7 7v41c0 8.2 9.2 17 20 17s20-9.2 20-20c0-13.3-13.4-21.8-26-18zm6 25c-3.9 0-7-3.1-7-7s3.1-7 7-7 7 3.1 7 7-3.1 7-7 7z&quot;/&gt;</div><div class=\"line\">&lt;/svg&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用<object>标签插入像这样</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">object</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/svg+xml\"</span> <span class=\"attr\">data</span>=<span class=\"string\">\"data:image/svg+xml;base64,[data]\"</span>&gt;</span></div><div class=\"line\">  fallback</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">object</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这样做的好处是可以在浏览器上缓存，而且跨浏览器的兼容性更好，而且可以进行交互</p>\n<h4 id=\"为SVG使用额外的样式表\"><a href=\"#为SVG使用额外的样式表\" class=\"headerlink\" title=\"为SVG使用额外的样式表\"></a>为<object>SVG使用额外的样式表</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml-stylesheet type=\"text/css\" href=\"svg.css\" ?&gt;</div></pre></td></tr></table></figure>\n<p>将这个插入到svg标签中</p>\n<ul>\n<li>SVG的Data URL’s<br>另一种使用SVG的方法是把它们转换成Data URL’S,它不要求额外的网络请求<br>Mobilefish.com有<a href=\"http://www.mobilefish.com/services/base64/base64.php\">在线转换工具</a>可以转换SVG，把svg代码粘贴进去就可以得到结果，记得清楚结果中的换行空格</li>\n</ul>\n"},{"layout":"post","title":"","_content":"\n\n# Python\n## 集合\n1. 有序集合：list，tuple，str和unicode；\n2. 无序集合：set\n3. 无序集合并且具有 key-value 对：dict","source":"_drafts/2016-6-29-python入门笔记.md","raw":"---\nlayout: post\ntitle: \ntag: Python\n---\n\n\n# Python\n## 集合\n1. 有序集合：list，tuple，str和unicode；\n2. 无序集合：set\n3. 无序集合并且具有 key-value 对：dict","slug":"2016-6-29-python入门笔记","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.200Z","comments":1,"photos":[],"link":"","_id":"civ3wzsc7000ln9fkx4jr9b7b","content":"<h1 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h1><h2 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h2><ol>\n<li>有序集合：list，tuple，str和unicode；</li>\n<li>无序集合：set</li>\n<li>无序集合并且具有 key-value 对：dict</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h1><h2 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h2><ol>\n<li>有序集合：list，tuple，str和unicode；</li>\n<li>无序集合：set</li>\n<li>无序集合并且具有 key-value 对：dict</li>\n</ol>\n"},{"_content":"database > collection > document\n\nshow dbs 展示所有数据库\n\ndb 展示当前所在数据库\n\nuse 指定使用某个数据库\n\n\n数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。\n* 不能是空字符串（\"\")。\n* 不得含有' '（空格)、.、$、/、\\和\\0 (空宇符)。\n* 应全部小写。\n* 最多64字节。\n","source":"_drafts/2016-09-11-Mongodb.md","raw":"database > collection > document\n\nshow dbs 展示所有数据库\n\ndb 展示当前所在数据库\n\nuse 指定使用某个数据库\n\n\n数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。\n* 不能是空字符串（\"\")。\n* 不得含有' '（空格)、.、$、/、\\和\\0 (空宇符)。\n* 应全部小写。\n* 最多64字节。\n","slug":"2016-09-11-Mongodb","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.200Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzsc9000mn9fkdpshdl00","content":"<p>database &gt; collection &gt; document</p>\n<p>show dbs 展示所有数据库</p>\n<p>db 展示当前所在数据库</p>\n<p>use 指定使用某个数据库</p>\n<p>数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。</p>\n<ul>\n<li>不能是空字符串（””)。</li>\n<li>不得含有’ ‘（空格)、.、$、/、\\和\\0 (空宇符)。</li>\n<li>应全部小写。</li>\n<li>最多64字节。</li>\n</ul>\n","excerpt":"","more":"<p>database &gt; collection &gt; document</p>\n<p>show dbs 展示所有数据库</p>\n<p>db 展示当前所在数据库</p>\n<p>use 指定使用某个数据库</p>\n<p>数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。</p>\n<ul>\n<li>不能是空字符串（””)。</li>\n<li>不得含有’ ‘（空格)、.、$、/、\\和\\0 (空宇符)。</li>\n<li>应全部小写。</li>\n<li>最多64字节。</li>\n</ul>\n"},{"title":"学习express","description":"express是基于Node.js的一个简洁，快速的web框架。Fast, unopinionated, minimalist web framework for Node.js。","_content":"# tips\n1. body-parser中间不能处理Content-Type为multipart/form-data的表单.而FormData实例出来的表单数据都是。解决这个问题有两种种方法\n- 使用FormData,在服务器端使用另外一个中间件[multer](https://www.npmjs.com/package/multer)\n- 不使用FromData，手动拼接表单\n\n2. 中间件\n\n- app-level 中间件，对每一个请求都会执行这个函数\n```js\n// 编写中间件\nvar requestTime = function (req,res,next) {\n    req.requestTime = new Date();\n    next();\n}\n\n// 使用中间件\napp.use(requestTime);\n\napp.get('/',function(req,res) {\n    res.send(req.requestTime);  // send  requestTime\n})\n```\n\n\n\n```js\n\n```\n","source":"_drafts/学习express.md","raw":"---\ntitle: 学习express\ntags:\ndescription: express是基于Node.js的一个简洁，快速的web框架。Fast, unopinionated, minimalist web framework for Node.js。\n---\n# tips\n1. body-parser中间不能处理Content-Type为multipart/form-data的表单.而FormData实例出来的表单数据都是。解决这个问题有两种种方法\n- 使用FormData,在服务器端使用另外一个中间件[multer](https://www.npmjs.com/package/multer)\n- 不使用FromData，手动拼接表单\n\n2. 中间件\n\n- app-level 中间件，对每一个请求都会执行这个函数\n```js\n// 编写中间件\nvar requestTime = function (req,res,next) {\n    req.requestTime = new Date();\n    next();\n}\n\n// 使用中间件\napp.use(requestTime);\n\napp.get('/',function(req,res) {\n    res.send(req.requestTime);  // send  requestTime\n})\n```\n\n\n\n```js\n\n```\n","slug":"学习express","published":0,"date":"2016-11-01T16:17:29.672Z","updated":"2016-11-01T16:17:29.672Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzscc000on9fk97er7xbf","content":"<h1 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips\"></a>tips</h1><ol>\n<li>body-parser中间不能处理Content-Type为multipart/form-data的表单.而FormData实例出来的表单数据都是。解决这个问题有两种种方法</li>\n</ol>\n<ul>\n<li>使用FormData,在服务器端使用另外一个中间件<a href=\"https://www.npmjs.com/package/multer\" target=\"_blank\" rel=\"external\">multer</a></li>\n<li>不使用FromData，手动拼接表单</li>\n</ul>\n<ol>\n<li>中间件</li>\n</ol>\n<ul>\n<li>app-level 中间件，对每一个请求都会执行这个函数<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 编写中间件</span></div><div class=\"line\"><span class=\"keyword\">var</span> requestTime = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req,res,next</span>) </span>&#123;</div><div class=\"line\">    req.requestTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">    next();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用中间件</span></div><div class=\"line\">app.use(requestTime);</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>) </span>&#123;</div><div class=\"line\">    res.send(req.requestTime);  <span class=\"comment\">// send  requestTime</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips\"></a>tips</h1><ol>\n<li>body-parser中间不能处理Content-Type为multipart/form-data的表单.而FormData实例出来的表单数据都是。解决这个问题有两种种方法</li>\n</ol>\n<ul>\n<li>使用FormData,在服务器端使用另外一个中间件<a href=\"https://www.npmjs.com/package/multer\">multer</a></li>\n<li>不使用FromData，手动拼接表单</li>\n</ul>\n<ol>\n<li>中间件</li>\n</ol>\n<ul>\n<li>app-level 中间件，对每一个请求都会执行这个函数<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 编写中间件</span></div><div class=\"line\"><span class=\"keyword\">var</span> requestTime = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req,res,next</span>) </span>&#123;</div><div class=\"line\">    req.requestTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">    next();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用中间件</span></div><div class=\"line\">app.use(requestTime);</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>) </span>&#123;</div><div class=\"line\">    res.send(req.requestTime);  <span class=\"comment\">// send  requestTime</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure>\n"},{"title":"学习mongoose基本语法","<!-- tags":"-->","description":"mongoose是mongodb-node最受欢迎的ORM之一，这里记录学习mongoose时候遇到的问题和收获","_content":"\n1. mongoose 定义在Schema的methods对象中的方法会被作为实例的方法，而定义在Statics对象上的方法会作为Ｍodel的方法\n\nmongoose查询数据\n所有的CRUD都是针对于Ｍodel来操作的\n1. 创建Schema　and Model\n```js\nvar UserSchema = new mongoose.Schema(\n        {\n            name: String,\n            age: Number\n        }\n    )\n\nvar User = mongoose.model('User',UserSchema);\n// 编译出来的User就是我们所操作的Ｍodel对象，就是一个collection的Ｍodel.它每实例出一个对象就是一个documen\n```\n2. 操作\n- 查询数据\n传入callback\n\n```js\nUser.find({},function(err,result){\n\n    })\n\n// or\nUser.find().then(cb).catch(cb)  // Promise based\n```\n\n不传入callback\n\n```js\nvar query = User.find()\n\nquery.select('name age');\n// 选择name 和　age的field\n\nquery.exec(function(err,result){\n    res.send(result);\n})\n// 执行任务函数\n// 其实可以链式调用上面的方法\n\nUser.find()\n    .select('name age')\n    .exec(function(err,result) {\n        res.send(result);\n    })\n```\n不传入返回选取的一个Ｑuery()对象的实例，这个实例上面有许多方法可以使用，[详见](http://mongoosejs.com/docs/api.html#query-js)\n\n存储数据\n```js\nvar user = new User({name:'quill'})\nuser.save(function(err){\n    if(err) return handler(err);\n})\n\n// or\nUser.create({name:'quill'},function(err) {\n    if(err) return handler(err);j\n}) // note: 这里是Model类上面的create方法，不是save\n```\n\n\n中间件是我们在执行数据库的某一项任务过程中，执行的一些函数\n，它有两种类型，针对于document的和Query的，中间件定义在Schema实例上面\n\n\n1. pre,在执行某项任务之前执行的中间件函数\n它也有两种类型，serial和parallel\n\n```js\nUser.pre('save',function(next){\n    // do something\n    next()\n})\n```\n\n```js\nUser.pre('save',function(next,done){\n    // do something\n    next();\n    setTimeOut(done,100)\n})\n```\n\n2. post,在执行某项任务之后执行的中间件函数\n","source":"_drafts/学习mongoose基本语法.md","raw":"---\ntitle: 学习mongoose基本语法\n<!-- tags: -->\ndescription: mongoose是mongodb-node最受欢迎的ORM之一，这里记录学习mongoose时候遇到的问题和收获\n---\n\n1. mongoose 定义在Schema的methods对象中的方法会被作为实例的方法，而定义在Statics对象上的方法会作为Ｍodel的方法\n\nmongoose查询数据\n所有的CRUD都是针对于Ｍodel来操作的\n1. 创建Schema　and Model\n```js\nvar UserSchema = new mongoose.Schema(\n        {\n            name: String,\n            age: Number\n        }\n    )\n\nvar User = mongoose.model('User',UserSchema);\n// 编译出来的User就是我们所操作的Ｍodel对象，就是一个collection的Ｍodel.它每实例出一个对象就是一个documen\n```\n2. 操作\n- 查询数据\n传入callback\n\n```js\nUser.find({},function(err,result){\n\n    })\n\n// or\nUser.find().then(cb).catch(cb)  // Promise based\n```\n\n不传入callback\n\n```js\nvar query = User.find()\n\nquery.select('name age');\n// 选择name 和　age的field\n\nquery.exec(function(err,result){\n    res.send(result);\n})\n// 执行任务函数\n// 其实可以链式调用上面的方法\n\nUser.find()\n    .select('name age')\n    .exec(function(err,result) {\n        res.send(result);\n    })\n```\n不传入返回选取的一个Ｑuery()对象的实例，这个实例上面有许多方法可以使用，[详见](http://mongoosejs.com/docs/api.html#query-js)\n\n存储数据\n```js\nvar user = new User({name:'quill'})\nuser.save(function(err){\n    if(err) return handler(err);\n})\n\n// or\nUser.create({name:'quill'},function(err) {\n    if(err) return handler(err);j\n}) // note: 这里是Model类上面的create方法，不是save\n```\n\n\n中间件是我们在执行数据库的某一项任务过程中，执行的一些函数\n，它有两种类型，针对于document的和Query的，中间件定义在Schema实例上面\n\n\n1. pre,在执行某项任务之前执行的中间件函数\n它也有两种类型，serial和parallel\n\n```js\nUser.pre('save',function(next){\n    // do something\n    next()\n})\n```\n\n```js\nUser.pre('save',function(next,done){\n    // do something\n    next();\n    setTimeOut(done,100)\n})\n```\n\n2. post,在执行某项任务之后执行的中间件函数\n","slug":"学习mongoose基本语法","published":0,"date":"2016-11-01T16:17:28.252Z","updated":"2016-11-01T16:17:28.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzscf000pn9fk03eboeir","content":"<ol>\n<li>mongoose 定义在Schema的methods对象中的方法会被作为实例的方法，而定义在Statics对象上的方法会作为Ｍodel的方法</li>\n</ol>\n<p>mongoose查询数据<br>所有的CRUD都是针对于Ｍodel来操作的</p>\n<ol>\n<li><p>创建Schema　and Model</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> UserSchema = <span class=\"keyword\">new</span> mongoose.Schema(</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"built_in\">String</span>,</div><div class=\"line\">            <span class=\"attr\">age</span>: <span class=\"built_in\">Number</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    )</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> User = mongoose.model(<span class=\"string\">'User'</span>,UserSchema);</div><div class=\"line\"><span class=\"comment\">// 编译出来的User就是我们所操作的Ｍodel对象，就是一个collection的Ｍodel.它每实例出一个对象就是一个documen</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>操作</p>\n</li>\n</ol>\n<ul>\n<li>查询数据<br>传入callback</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.find(&#123;&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,result</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// or</span></div><div class=\"line\">User.find().then(cb).catch(cb)  <span class=\"comment\">// Promise based</span></div></pre></td></tr></table></figure>\n<p>不传入callback</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> query = User.find()</div><div class=\"line\"></div><div class=\"line\">query.select(<span class=\"string\">'name age'</span>);</div><div class=\"line\"><span class=\"comment\">// 选择name 和　age的field</span></div><div class=\"line\"></div><div class=\"line\">query.exec(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,result</span>)</span>&#123;</div><div class=\"line\">    res.send(result);</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 执行任务函数</span></div><div class=\"line\"><span class=\"comment\">// 其实可以链式调用上面的方法</span></div><div class=\"line\"></div><div class=\"line\">User.find()</div><div class=\"line\">    .select(<span class=\"string\">'name age'</span>)</div><div class=\"line\">    .exec(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,result</span>) </span>&#123;</div><div class=\"line\">        res.send(result);</div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure>\n<p>不传入返回选取的一个Ｑuery()对象的实例，这个实例上面有许多方法可以使用，<a href=\"http://mongoosejs.com/docs/api.html#query-js\" target=\"_blank\" rel=\"external\">详见</a></p>\n<p>存储数据<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> User(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'quill'</span>&#125;)</div><div class=\"line\">user.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> handler(err);</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// or</span></div><div class=\"line\">User.create(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'quill'</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> handler(err);j</div><div class=\"line\">&#125;) <span class=\"comment\">// note: 这里是Model类上面的create方法，不是save</span></div></pre></td></tr></table></figure></p>\n<p>中间件是我们在执行数据库的某一项任务过程中，执行的一些函数<br>，它有两种类型，针对于document的和Query的，中间件定义在Schema实例上面</p>\n<ol>\n<li>pre,在执行某项任务之前执行的中间件函数<br>它也有两种类型，serial和parallel</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.pre(<span class=\"string\">'save'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">next</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do something</span></div><div class=\"line\">    next()</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.pre(<span class=\"string\">'save'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">next,done</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do something</span></div><div class=\"line\">    next();</div><div class=\"line\">    setTimeOut(done,<span class=\"number\">100</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ol>\n<li>post,在执行某项任务之后执行的中间件函数</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li>mongoose 定义在Schema的methods对象中的方法会被作为实例的方法，而定义在Statics对象上的方法会作为Ｍodel的方法</li>\n</ol>\n<p>mongoose查询数据<br>所有的CRUD都是针对于Ｍodel来操作的</p>\n<ol>\n<li><p>创建Schema　and Model</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> UserSchema = <span class=\"keyword\">new</span> mongoose.Schema(</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"built_in\">String</span>,</div><div class=\"line\">            <span class=\"attr\">age</span>: <span class=\"built_in\">Number</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    )</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> User = mongoose.model(<span class=\"string\">'User'</span>,UserSchema);</div><div class=\"line\"><span class=\"comment\">// 编译出来的User就是我们所操作的Ｍodel对象，就是一个collection的Ｍodel.它每实例出一个对象就是一个documen</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>操作</p>\n</li>\n</ol>\n<ul>\n<li>查询数据<br>传入callback</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.find(&#123;&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,result</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// or</span></div><div class=\"line\">User.find().then(cb).catch(cb)  <span class=\"comment\">// Promise based</span></div></pre></td></tr></table></figure>\n<p>不传入callback</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> query = User.find()</div><div class=\"line\"></div><div class=\"line\">query.select(<span class=\"string\">'name age'</span>);</div><div class=\"line\"><span class=\"comment\">// 选择name 和　age的field</span></div><div class=\"line\"></div><div class=\"line\">query.exec(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,result</span>)</span>&#123;</div><div class=\"line\">    res.send(result);</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 执行任务函数</span></div><div class=\"line\"><span class=\"comment\">// 其实可以链式调用上面的方法</span></div><div class=\"line\"></div><div class=\"line\">User.find()</div><div class=\"line\">    .select(<span class=\"string\">'name age'</span>)</div><div class=\"line\">    .exec(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,result</span>) </span>&#123;</div><div class=\"line\">        res.send(result);</div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure>\n<p>不传入返回选取的一个Ｑuery()对象的实例，这个实例上面有许多方法可以使用，<a href=\"http://mongoosejs.com/docs/api.html#query-js\">详见</a></p>\n<p>存储数据<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> User(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'quill'</span>&#125;)</div><div class=\"line\">user.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> handler(err);</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// or</span></div><div class=\"line\">User.create(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'quill'</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> handler(err);j</div><div class=\"line\">&#125;) <span class=\"comment\">// note: 这里是Model类上面的create方法，不是save</span></div></pre></td></tr></table></figure></p>\n<p>中间件是我们在执行数据库的某一项任务过程中，执行的一些函数<br>，它有两种类型，针对于document的和Query的，中间件定义在Schema实例上面</p>\n<ol>\n<li>pre,在执行某项任务之前执行的中间件函数<br>它也有两种类型，serial和parallel</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.pre(<span class=\"string\">'save'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">next</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do something</span></div><div class=\"line\">    next()</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">User.pre(<span class=\"string\">'save'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">next,done</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do something</span></div><div class=\"line\">    next();</div><div class=\"line\">    setTimeOut(done,<span class=\"number\">100</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ol>\n<li>post,在执行某项任务之后执行的中间件函数</li>\n</ol>\n"},{"_content":"## p标签不能嵌套div,ul等块级标签,浏览器或自动分段.并且产生一个空的p块\n\n## 各个元素的概况\n块级元素代表它是默认占领整一行的\n### p   块级元素,代表一个段落,理所当然段落之间有段落间距,所以有margin-top和margin-bottom,没有默认的padding\n### div 块级元素,代表一个division.单纯的一个块,没有默认的margin和padding\n### h1  块级元素,h标签代表标题,有默认的与之标题级别想对应的margin-top和margin-bottom,没有默认的padding\n### U  行内元素,代表underline,没有默认的margin和padding,可不使用该标签,在css中使用text-decoration: underline;\n### big small 行内元素,默认设置分别是font-size: lager,font-size: smaller;均没有默认的margin和padding\n### img 行内元素,代表图片,没有默认的margin和padding\n### span 行内元素,代表,没有默认的margin和padding\n### ul 块级元素,代表列表的包裹块,有默认的margin-bottom,margin-top,还有默认的padding-left,默认的padding存在是让我们可以识别出它就是一个列表.而且列表是可以嵌套的,意味着li可以嵌套div块级元素\n### li list-item元素,没有默认的margin和padding\n### button 代表按钮,自带2px的border,有默认的margin,padding\n### input inline-block元素,无默认margin和paddding有border\n\n## 一个元素的子元素的大小是可以大于父元素的\n\n## css类名,id名不能以数字开头\n\n## 能不使用固定宽度就不用固定宽度\n\n## overflow:hidden可以清除浮动\n\n## 居中的文字不要使用p标签\n\n## 貌似input标签不能设置margin-left\n\n##  visibility:隐藏对应的元素但不挤占该元素原来的空间。\n## display:隐藏对应的元素并且挤占该元素原来的空间\n\n# hack\n\n## checkbox,:checked伪属性toggle,使用+,~选择器来toggle input后面的内容\n\n##a:target也可以用来做开关\n\n##一个icon居中的方法，text-align，line-height设置为容器的高度，\n\n\n## 在reset后，因为html和body都没有了高度，linear-gradient不能被用在html和body上，究其原因，linear-gradient是background-image的值，但是的background-color可以实现。background的范围是盒模型中的content和padding\n\n## clac()计算top值，使其居中，锁区的值应该是calc(50% -height/2)\n\n## 使用inline-block注意子元素之间的留白,100%分成两份50%，一行容不下这两份\n\n## 对于设置了absolute后的元素使用top，left进行定位，注意这个距离是使用离容器的最外那条边框来计算的\n\n## display:flex影响最近的text-align\n\n## transform的百分比单位是基于本身的尺寸，而不是父元素的尺寸\n\n## background-position: right 20px bottom 10px;　　偏移量前面指定关键字，精确定位背景图片\n\n## outline-offset 描边的偏移量，可以为负值\n\n## background-origin: 默认值是padding-box,这样边框才不会遮挡住图片．可以设置为content-box,这样在加上padding,就可以很好的实现背景图片的定位，还可以和background-position复用实现更加适合的背景定位\n\n## background-image的定位background-position基于background-origin，默认是padding-box。而background-color在默认border之下的，因为切割background的边框默认是border-box，这是通过background-clip实现的，可以设置为padding-box，这样background-color就不再border之下了;那有时候设置了background-image为linear-gradient我们会发现它居然也在border之下，这是为什么呢，不是background-origin默认是padding-box吗，按理说渐变应该不再border之下，这是因为background-repeat默认设置为repeat，这样background-image就会覆盖整个元素\n》》》》》》\n## background\nbackground-clip限制所有的背景，包括image和color\nbackground-color基于background-clip，默认值border-box\nbackground-image在norepeat的情况下基于background-clip的前提下基于background-origin;\n如果有background-repeat：repeat则就会把background-image平铺到整个background-color区域\n","source":"_drafts/2016-7-10-placehoder.md","raw":"## p标签不能嵌套div,ul等块级标签,浏览器或自动分段.并且产生一个空的p块\n\n## 各个元素的概况\n块级元素代表它是默认占领整一行的\n### p   块级元素,代表一个段落,理所当然段落之间有段落间距,所以有margin-top和margin-bottom,没有默认的padding\n### div 块级元素,代表一个division.单纯的一个块,没有默认的margin和padding\n### h1  块级元素,h标签代表标题,有默认的与之标题级别想对应的margin-top和margin-bottom,没有默认的padding\n### U  行内元素,代表underline,没有默认的margin和padding,可不使用该标签,在css中使用text-decoration: underline;\n### big small 行内元素,默认设置分别是font-size: lager,font-size: smaller;均没有默认的margin和padding\n### img 行内元素,代表图片,没有默认的margin和padding\n### span 行内元素,代表,没有默认的margin和padding\n### ul 块级元素,代表列表的包裹块,有默认的margin-bottom,margin-top,还有默认的padding-left,默认的padding存在是让我们可以识别出它就是一个列表.而且列表是可以嵌套的,意味着li可以嵌套div块级元素\n### li list-item元素,没有默认的margin和padding\n### button 代表按钮,自带2px的border,有默认的margin,padding\n### input inline-block元素,无默认margin和paddding有border\n\n## 一个元素的子元素的大小是可以大于父元素的\n\n## css类名,id名不能以数字开头\n\n## 能不使用固定宽度就不用固定宽度\n\n## overflow:hidden可以清除浮动\n\n## 居中的文字不要使用p标签\n\n## 貌似input标签不能设置margin-left\n\n##  visibility:隐藏对应的元素但不挤占该元素原来的空间。\n## display:隐藏对应的元素并且挤占该元素原来的空间\n\n# hack\n\n## checkbox,:checked伪属性toggle,使用+,~选择器来toggle input后面的内容\n\n##a:target也可以用来做开关\n\n##一个icon居中的方法，text-align，line-height设置为容器的高度，\n\n\n## 在reset后，因为html和body都没有了高度，linear-gradient不能被用在html和body上，究其原因，linear-gradient是background-image的值，但是的background-color可以实现。background的范围是盒模型中的content和padding\n\n## clac()计算top值，使其居中，锁区的值应该是calc(50% -height/2)\n\n## 使用inline-block注意子元素之间的留白,100%分成两份50%，一行容不下这两份\n\n## 对于设置了absolute后的元素使用top，left进行定位，注意这个距离是使用离容器的最外那条边框来计算的\n\n## display:flex影响最近的text-align\n\n## transform的百分比单位是基于本身的尺寸，而不是父元素的尺寸\n\n## background-position: right 20px bottom 10px;　　偏移量前面指定关键字，精确定位背景图片\n\n## outline-offset 描边的偏移量，可以为负值\n\n## background-origin: 默认值是padding-box,这样边框才不会遮挡住图片．可以设置为content-box,这样在加上padding,就可以很好的实现背景图片的定位，还可以和background-position复用实现更加适合的背景定位\n\n## background-image的定位background-position基于background-origin，默认是padding-box。而background-color在默认border之下的，因为切割background的边框默认是border-box，这是通过background-clip实现的，可以设置为padding-box，这样background-color就不再border之下了;那有时候设置了background-image为linear-gradient我们会发现它居然也在border之下，这是为什么呢，不是background-origin默认是padding-box吗，按理说渐变应该不再border之下，这是因为background-repeat默认设置为repeat，这样background-image就会覆盖整个元素\n》》》》》》\n## background\nbackground-clip限制所有的背景，包括image和color\nbackground-color基于background-clip，默认值border-box\nbackground-image在norepeat的情况下基于background-clip的前提下基于background-origin;\n如果有background-repeat：repeat则就会把background-image平铺到整个background-color区域\n","slug":"2016-7-10-placehoder","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.200Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzsch000qn9fkjisx6pby","content":"<h2 id=\"p标签不能嵌套div-ul等块级标签-浏览器或自动分段-并且产生一个空的p块\"><a href=\"#p标签不能嵌套div-ul等块级标签-浏览器或自动分段-并且产生一个空的p块\" class=\"headerlink\" title=\"p标签不能嵌套div,ul等块级标签,浏览器或自动分段.并且产生一个空的p块\"></a>p标签不能嵌套div,ul等块级标签,浏览器或自动分段.并且产生一个空的p块</h2><h2 id=\"各个元素的概况\"><a href=\"#各个元素的概况\" class=\"headerlink\" title=\"各个元素的概况\"></a>各个元素的概况</h2><p>块级元素代表它是默认占领整一行的</p>\n<h3 id=\"p-块级元素-代表一个段落-理所当然段落之间有段落间距-所以有margin-top和margin-bottom-没有默认的padding\"><a href=\"#p-块级元素-代表一个段落-理所当然段落之间有段落间距-所以有margin-top和margin-bottom-没有默认的padding\" class=\"headerlink\" title=\"p   块级元素,代表一个段落,理所当然段落之间有段落间距,所以有margin-top和margin-bottom,没有默认的padding\"></a>p   块级元素,代表一个段落,理所当然段落之间有段落间距,所以有margin-top和margin-bottom,没有默认的padding</h3><h3 id=\"div-块级元素-代表一个division-单纯的一个块-没有默认的margin和padding\"><a href=\"#div-块级元素-代表一个division-单纯的一个块-没有默认的margin和padding\" class=\"headerlink\" title=\"div 块级元素,代表一个division.单纯的一个块,没有默认的margin和padding\"></a>div 块级元素,代表一个division.单纯的一个块,没有默认的margin和padding</h3><h3 id=\"h1-块级元素-h标签代表标题-有默认的与之标题级别想对应的margin-top和margin-bottom-没有默认的padding\"><a href=\"#h1-块级元素-h标签代表标题-有默认的与之标题级别想对应的margin-top和margin-bottom-没有默认的padding\" class=\"headerlink\" title=\"h1  块级元素,h标签代表标题,有默认的与之标题级别想对应的margin-top和margin-bottom,没有默认的padding\"></a>h1  块级元素,h标签代表标题,有默认的与之标题级别想对应的margin-top和margin-bottom,没有默认的padding</h3><h3 id=\"U-行内元素-代表underline-没有默认的margin和padding-可不使用该标签-在css中使用text-decoration-underline\"><a href=\"#U-行内元素-代表underline-没有默认的margin和padding-可不使用该标签-在css中使用text-decoration-underline\" class=\"headerlink\" title=\"U  行内元素,代表underline,没有默认的margin和padding,可不使用该标签,在css中使用text-decoration: underline;\"></a>U  行内元素,代表underline,没有默认的margin和padding,可不使用该标签,在css中使用text-decoration: underline;</h3><h3 id=\"big-small-行内元素-默认设置分别是font-size-lager-font-size-smaller-均没有默认的margin和padding\"><a href=\"#big-small-行内元素-默认设置分别是font-size-lager-font-size-smaller-均没有默认的margin和padding\" class=\"headerlink\" title=\"big small 行内元素,默认设置分别是font-size: lager,font-size: smaller;均没有默认的margin和padding\"></a>big small 行内元素,默认设置分别是font-size: lager,font-size: smaller;均没有默认的margin和padding</h3><h3 id=\"img-行内元素-代表图片-没有默认的margin和padding\"><a href=\"#img-行内元素-代表图片-没有默认的margin和padding\" class=\"headerlink\" title=\"img 行内元素,代表图片,没有默认的margin和padding\"></a>img 行内元素,代表图片,没有默认的margin和padding</h3><h3 id=\"span-行内元素-代表-没有默认的margin和padding\"><a href=\"#span-行内元素-代表-没有默认的margin和padding\" class=\"headerlink\" title=\"span 行内元素,代表,没有默认的margin和padding\"></a>span 行内元素,代表,没有默认的margin和padding</h3><h3 id=\"ul-块级元素-代表列表的包裹块-有默认的margin-bottom-margin-top-还有默认的padding-left-默认的padding存在是让我们可以识别出它就是一个列表-而且列表是可以嵌套的-意味着li可以嵌套div块级元素\"><a href=\"#ul-块级元素-代表列表的包裹块-有默认的margin-bottom-margin-top-还有默认的padding-left-默认的padding存在是让我们可以识别出它就是一个列表-而且列表是可以嵌套的-意味着li可以嵌套div块级元素\" class=\"headerlink\" title=\"ul 块级元素,代表列表的包裹块,有默认的margin-bottom,margin-top,还有默认的padding-left,默认的padding存在是让我们可以识别出它就是一个列表.而且列表是可以嵌套的,意味着li可以嵌套div块级元素\"></a>ul 块级元素,代表列表的包裹块,有默认的margin-bottom,margin-top,还有默认的padding-left,默认的padding存在是让我们可以识别出它就是一个列表.而且列表是可以嵌套的,意味着li可以嵌套div块级元素</h3><h3 id=\"li-list-item元素-没有默认的margin和padding\"><a href=\"#li-list-item元素-没有默认的margin和padding\" class=\"headerlink\" title=\"li list-item元素,没有默认的margin和padding\"></a>li list-item元素,没有默认的margin和padding</h3><h3 id=\"button-代表按钮-自带2px的border-有默认的margin-padding\"><a href=\"#button-代表按钮-自带2px的border-有默认的margin-padding\" class=\"headerlink\" title=\"button 代表按钮,自带2px的border,有默认的margin,padding\"></a>button 代表按钮,自带2px的border,有默认的margin,padding</h3><h3 id=\"input-inline-block元素-无默认margin和paddding有border\"><a href=\"#input-inline-block元素-无默认margin和paddding有border\" class=\"headerlink\" title=\"input inline-block元素,无默认margin和paddding有border\"></a>input inline-block元素,无默认margin和paddding有border</h3><h2 id=\"一个元素的子元素的大小是可以大于父元素的\"><a href=\"#一个元素的子元素的大小是可以大于父元素的\" class=\"headerlink\" title=\"一个元素的子元素的大小是可以大于父元素的\"></a>一个元素的子元素的大小是可以大于父元素的</h2><h2 id=\"css类名-id名不能以数字开头\"><a href=\"#css类名-id名不能以数字开头\" class=\"headerlink\" title=\"css类名,id名不能以数字开头\"></a>css类名,id名不能以数字开头</h2><h2 id=\"能不使用固定宽度就不用固定宽度\"><a href=\"#能不使用固定宽度就不用固定宽度\" class=\"headerlink\" title=\"能不使用固定宽度就不用固定宽度\"></a>能不使用固定宽度就不用固定宽度</h2><h2 id=\"overflow-hidden可以清除浮动\"><a href=\"#overflow-hidden可以清除浮动\" class=\"headerlink\" title=\"overflow:hidden可以清除浮动\"></a>overflow:hidden可以清除浮动</h2><h2 id=\"居中的文字不要使用p标签\"><a href=\"#居中的文字不要使用p标签\" class=\"headerlink\" title=\"居中的文字不要使用p标签\"></a>居中的文字不要使用p标签</h2><h2 id=\"貌似input标签不能设置margin-left\"><a href=\"#貌似input标签不能设置margin-left\" class=\"headerlink\" title=\"貌似input标签不能设置margin-left\"></a>貌似input标签不能设置margin-left</h2><h2 id=\"visibility-隐藏对应的元素但不挤占该元素原来的空间。\"><a href=\"#visibility-隐藏对应的元素但不挤占该元素原来的空间。\" class=\"headerlink\" title=\"visibility:隐藏对应的元素但不挤占该元素原来的空间。\"></a>visibility:隐藏对应的元素但不挤占该元素原来的空间。</h2><h2 id=\"display-隐藏对应的元素并且挤占该元素原来的空间\"><a href=\"#display-隐藏对应的元素并且挤占该元素原来的空间\" class=\"headerlink\" title=\"display:隐藏对应的元素并且挤占该元素原来的空间\"></a>display:隐藏对应的元素并且挤占该元素原来的空间</h2><h1 id=\"hack\"><a href=\"#hack\" class=\"headerlink\" title=\"hack\"></a>hack</h1><h2 id=\"checkbox-checked伪属性toggle-使用-选择器来toggle-input后面的内容\"><a href=\"#checkbox-checked伪属性toggle-使用-选择器来toggle-input后面的内容\" class=\"headerlink\" title=\"checkbox,:checked伪属性toggle,使用+,~选择器来toggle input后面的内容\"></a>checkbox,:checked伪属性toggle,使用+,~选择器来toggle input后面的内容</h2><p>##a:target也可以用来做开关</p>\n<p>##一个icon居中的方法，text-align，line-height设置为容器的高度，</p>\n<h2 id=\"在reset后，因为html和body都没有了高度，linear-gradient不能被用在html和body上，究其原因，linear-gradient是background-image的值，但是的background-color可以实现。background的范围是盒模型中的content和padding\"><a href=\"#在reset后，因为html和body都没有了高度，linear-gradient不能被用在html和body上，究其原因，linear-gradient是background-image的值，但是的background-color可以实现。background的范围是盒模型中的content和padding\" class=\"headerlink\" title=\"在reset后，因为html和body都没有了高度，linear-gradient不能被用在html和body上，究其原因，linear-gradient是background-image的值，但是的background-color可以实现。background的范围是盒模型中的content和padding\"></a>在reset后，因为html和body都没有了高度，linear-gradient不能被用在html和body上，究其原因，linear-gradient是background-image的值，但是的background-color可以实现。background的范围是盒模型中的content和padding</h2><h2 id=\"clac-计算top值，使其居中，锁区的值应该是calc-50-height-2\"><a href=\"#clac-计算top值，使其居中，锁区的值应该是calc-50-height-2\" class=\"headerlink\" title=\"clac()计算top值，使其居中，锁区的值应该是calc(50% -height/2)\"></a>clac()计算top值，使其居中，锁区的值应该是calc(50% -height/2)</h2><h2 id=\"使用inline-block注意子元素之间的留白-100-分成两份50-，一行容不下这两份\"><a href=\"#使用inline-block注意子元素之间的留白-100-分成两份50-，一行容不下这两份\" class=\"headerlink\" title=\"使用inline-block注意子元素之间的留白,100%分成两份50%，一行容不下这两份\"></a>使用inline-block注意子元素之间的留白,100%分成两份50%，一行容不下这两份</h2><h2 id=\"对于设置了absolute后的元素使用top，left进行定位，注意这个距离是使用离容器的最外那条边框来计算的\"><a href=\"#对于设置了absolute后的元素使用top，left进行定位，注意这个距离是使用离容器的最外那条边框来计算的\" class=\"headerlink\" title=\"对于设置了absolute后的元素使用top，left进行定位，注意这个距离是使用离容器的最外那条边框来计算的\"></a>对于设置了absolute后的元素使用top，left进行定位，注意这个距离是使用离容器的最外那条边框来计算的</h2><h2 id=\"display-flex影响最近的text-align\"><a href=\"#display-flex影响最近的text-align\" class=\"headerlink\" title=\"display:flex影响最近的text-align\"></a>display:flex影响最近的text-align</h2><h2 id=\"transform的百分比单位是基于本身的尺寸，而不是父元素的尺寸\"><a href=\"#transform的百分比单位是基于本身的尺寸，而不是父元素的尺寸\" class=\"headerlink\" title=\"transform的百分比单位是基于本身的尺寸，而不是父元素的尺寸\"></a>transform的百分比单位是基于本身的尺寸，而不是父元素的尺寸</h2><h2 id=\"background-position-right-20px-bottom-10px-偏移量前面指定关键字，精确定位背景图片\"><a href=\"#background-position-right-20px-bottom-10px-偏移量前面指定关键字，精确定位背景图片\" class=\"headerlink\" title=\"background-position: right 20px bottom 10px;　　偏移量前面指定关键字，精确定位背景图片\"></a>background-position: right 20px bottom 10px;　　偏移量前面指定关键字，精确定位背景图片</h2><h2 id=\"outline-offset-描边的偏移量，可以为负值\"><a href=\"#outline-offset-描边的偏移量，可以为负值\" class=\"headerlink\" title=\"outline-offset 描边的偏移量，可以为负值\"></a>outline-offset 描边的偏移量，可以为负值</h2><h2 id=\"background-origin-默认值是padding-box-这样边框才不会遮挡住图片．可以设置为content-box-这样在加上padding-就可以很好的实现背景图片的定位，还可以和background-position复用实现更加适合的背景定位\"><a href=\"#background-origin-默认值是padding-box-这样边框才不会遮挡住图片．可以设置为content-box-这样在加上padding-就可以很好的实现背景图片的定位，还可以和background-position复用实现更加适合的背景定位\" class=\"headerlink\" title=\"background-origin: 默认值是padding-box,这样边框才不会遮挡住图片．可以设置为content-box,这样在加上padding,就可以很好的实现背景图片的定位，还可以和background-position复用实现更加适合的背景定位\"></a>background-origin: 默认值是padding-box,这样边框才不会遮挡住图片．可以设置为content-box,这样在加上padding,就可以很好的实现背景图片的定位，还可以和background-position复用实现更加适合的背景定位</h2><h2 id=\"background-image的定位background-position基于background-origin，默认是padding-box。而background-color在默认border之下的，因为切割background的边框默认是border-box，这是通过background-clip实现的，可以设置为padding-box，这样background-color就不再border之下了-那有时候设置了background-image为linear-gradient我们会发现它居然也在border之下，这是为什么呢，不是background-origin默认是padding-box吗，按理说渐变应该不再border之下，这是因为background-repeat默认设置为repeat，这样background-image就会覆盖整个元素\"><a href=\"#background-image的定位background-position基于background-origin，默认是padding-box。而background-color在默认border之下的，因为切割background的边框默认是border-box，这是通过background-clip实现的，可以设置为padding-box，这样background-color就不再border之下了-那有时候设置了background-image为linear-gradient我们会发现它居然也在border之下，这是为什么呢，不是background-origin默认是padding-box吗，按理说渐变应该不再border之下，这是因为background-repeat默认设置为repeat，这样background-image就会覆盖整个元素\" class=\"headerlink\" title=\"background-image的定位background-position基于background-origin，默认是padding-box。而background-color在默认border之下的，因为切割background的边框默认是border-box，这是通过background-clip实现的，可以设置为padding-box，这样background-color就不再border之下了;那有时候设置了background-image为linear-gradient我们会发现它居然也在border之下，这是为什么呢，不是background-origin默认是padding-box吗，按理说渐变应该不再border之下，这是因为background-repeat默认设置为repeat，这样background-image就会覆盖整个元素\"></a>background-image的定位background-position基于background-origin，默认是padding-box。而background-color在默认border之下的，因为切割background的边框默认是border-box，这是通过background-clip实现的，可以设置为padding-box，这样background-color就不再border之下了;那有时候设置了background-image为linear-gradient我们会发现它居然也在border之下，这是为什么呢，不是background-origin默认是padding-box吗，按理说渐变应该不再border之下，这是因为background-repeat默认设置为repeat，这样background-image就会覆盖整个元素</h2><p>》》》》》》</p>\n<h2 id=\"background\"><a href=\"#background\" class=\"headerlink\" title=\"background\"></a>background</h2><p>background-clip限制所有的背景，包括image和color<br>background-color基于background-clip，默认值border-box<br>background-image在norepeat的情况下基于background-clip的前提下基于background-origin;<br>如果有background-repeat：repeat则就会把background-image平铺到整个background-color区域</p>\n","excerpt":"","more":"<h2 id=\"p标签不能嵌套div-ul等块级标签-浏览器或自动分段-并且产生一个空的p块\"><a href=\"#p标签不能嵌套div-ul等块级标签-浏览器或自动分段-并且产生一个空的p块\" class=\"headerlink\" title=\"p标签不能嵌套div,ul等块级标签,浏览器或自动分段.并且产生一个空的p块\"></a>p标签不能嵌套div,ul等块级标签,浏览器或自动分段.并且产生一个空的p块</h2><h2 id=\"各个元素的概况\"><a href=\"#各个元素的概况\" class=\"headerlink\" title=\"各个元素的概况\"></a>各个元素的概况</h2><p>块级元素代表它是默认占领整一行的</p>\n<h3 id=\"p-块级元素-代表一个段落-理所当然段落之间有段落间距-所以有margin-top和margin-bottom-没有默认的padding\"><a href=\"#p-块级元素-代表一个段落-理所当然段落之间有段落间距-所以有margin-top和margin-bottom-没有默认的padding\" class=\"headerlink\" title=\"p   块级元素,代表一个段落,理所当然段落之间有段落间距,所以有margin-top和margin-bottom,没有默认的padding\"></a>p   块级元素,代表一个段落,理所当然段落之间有段落间距,所以有margin-top和margin-bottom,没有默认的padding</h3><h3 id=\"div-块级元素-代表一个division-单纯的一个块-没有默认的margin和padding\"><a href=\"#div-块级元素-代表一个division-单纯的一个块-没有默认的margin和padding\" class=\"headerlink\" title=\"div 块级元素,代表一个division.单纯的一个块,没有默认的margin和padding\"></a>div 块级元素,代表一个division.单纯的一个块,没有默认的margin和padding</h3><h3 id=\"h1-块级元素-h标签代表标题-有默认的与之标题级别想对应的margin-top和margin-bottom-没有默认的padding\"><a href=\"#h1-块级元素-h标签代表标题-有默认的与之标题级别想对应的margin-top和margin-bottom-没有默认的padding\" class=\"headerlink\" title=\"h1  块级元素,h标签代表标题,有默认的与之标题级别想对应的margin-top和margin-bottom,没有默认的padding\"></a>h1  块级元素,h标签代表标题,有默认的与之标题级别想对应的margin-top和margin-bottom,没有默认的padding</h3><h3 id=\"U-行内元素-代表underline-没有默认的margin和padding-可不使用该标签-在css中使用text-decoration-underline\"><a href=\"#U-行内元素-代表underline-没有默认的margin和padding-可不使用该标签-在css中使用text-decoration-underline\" class=\"headerlink\" title=\"U  行内元素,代表underline,没有默认的margin和padding,可不使用该标签,在css中使用text-decoration: underline;\"></a>U  行内元素,代表underline,没有默认的margin和padding,可不使用该标签,在css中使用text-decoration: underline;</h3><h3 id=\"big-small-行内元素-默认设置分别是font-size-lager-font-size-smaller-均没有默认的margin和padding\"><a href=\"#big-small-行内元素-默认设置分别是font-size-lager-font-size-smaller-均没有默认的margin和padding\" class=\"headerlink\" title=\"big small 行内元素,默认设置分别是font-size: lager,font-size: smaller;均没有默认的margin和padding\"></a>big small 行内元素,默认设置分别是font-size: lager,font-size: smaller;均没有默认的margin和padding</h3><h3 id=\"img-行内元素-代表图片-没有默认的margin和padding\"><a href=\"#img-行内元素-代表图片-没有默认的margin和padding\" class=\"headerlink\" title=\"img 行内元素,代表图片,没有默认的margin和padding\"></a>img 行内元素,代表图片,没有默认的margin和padding</h3><h3 id=\"span-行内元素-代表-没有默认的margin和padding\"><a href=\"#span-行内元素-代表-没有默认的margin和padding\" class=\"headerlink\" title=\"span 行内元素,代表,没有默认的margin和padding\"></a>span 行内元素,代表,没有默认的margin和padding</h3><h3 id=\"ul-块级元素-代表列表的包裹块-有默认的margin-bottom-margin-top-还有默认的padding-left-默认的padding存在是让我们可以识别出它就是一个列表-而且列表是可以嵌套的-意味着li可以嵌套div块级元素\"><a href=\"#ul-块级元素-代表列表的包裹块-有默认的margin-bottom-margin-top-还有默认的padding-left-默认的padding存在是让我们可以识别出它就是一个列表-而且列表是可以嵌套的-意味着li可以嵌套div块级元素\" class=\"headerlink\" title=\"ul 块级元素,代表列表的包裹块,有默认的margin-bottom,margin-top,还有默认的padding-left,默认的padding存在是让我们可以识别出它就是一个列表.而且列表是可以嵌套的,意味着li可以嵌套div块级元素\"></a>ul 块级元素,代表列表的包裹块,有默认的margin-bottom,margin-top,还有默认的padding-left,默认的padding存在是让我们可以识别出它就是一个列表.而且列表是可以嵌套的,意味着li可以嵌套div块级元素</h3><h3 id=\"li-list-item元素-没有默认的margin和padding\"><a href=\"#li-list-item元素-没有默认的margin和padding\" class=\"headerlink\" title=\"li list-item元素,没有默认的margin和padding\"></a>li list-item元素,没有默认的margin和padding</h3><h3 id=\"button-代表按钮-自带2px的border-有默认的margin-padding\"><a href=\"#button-代表按钮-自带2px的border-有默认的margin-padding\" class=\"headerlink\" title=\"button 代表按钮,自带2px的border,有默认的margin,padding\"></a>button 代表按钮,自带2px的border,有默认的margin,padding</h3><h3 id=\"input-inline-block元素-无默认margin和paddding有border\"><a href=\"#input-inline-block元素-无默认margin和paddding有border\" class=\"headerlink\" title=\"input inline-block元素,无默认margin和paddding有border\"></a>input inline-block元素,无默认margin和paddding有border</h3><h2 id=\"一个元素的子元素的大小是可以大于父元素的\"><a href=\"#一个元素的子元素的大小是可以大于父元素的\" class=\"headerlink\" title=\"一个元素的子元素的大小是可以大于父元素的\"></a>一个元素的子元素的大小是可以大于父元素的</h2><h2 id=\"css类名-id名不能以数字开头\"><a href=\"#css类名-id名不能以数字开头\" class=\"headerlink\" title=\"css类名,id名不能以数字开头\"></a>css类名,id名不能以数字开头</h2><h2 id=\"能不使用固定宽度就不用固定宽度\"><a href=\"#能不使用固定宽度就不用固定宽度\" class=\"headerlink\" title=\"能不使用固定宽度就不用固定宽度\"></a>能不使用固定宽度就不用固定宽度</h2><h2 id=\"overflow-hidden可以清除浮动\"><a href=\"#overflow-hidden可以清除浮动\" class=\"headerlink\" title=\"overflow:hidden可以清除浮动\"></a>overflow:hidden可以清除浮动</h2><h2 id=\"居中的文字不要使用p标签\"><a href=\"#居中的文字不要使用p标签\" class=\"headerlink\" title=\"居中的文字不要使用p标签\"></a>居中的文字不要使用p标签</h2><h2 id=\"貌似input标签不能设置margin-left\"><a href=\"#貌似input标签不能设置margin-left\" class=\"headerlink\" title=\"貌似input标签不能设置margin-left\"></a>貌似input标签不能设置margin-left</h2><h2 id=\"visibility-隐藏对应的元素但不挤占该元素原来的空间。\"><a href=\"#visibility-隐藏对应的元素但不挤占该元素原来的空间。\" class=\"headerlink\" title=\"visibility:隐藏对应的元素但不挤占该元素原来的空间。\"></a>visibility:隐藏对应的元素但不挤占该元素原来的空间。</h2><h2 id=\"display-隐藏对应的元素并且挤占该元素原来的空间\"><a href=\"#display-隐藏对应的元素并且挤占该元素原来的空间\" class=\"headerlink\" title=\"display:隐藏对应的元素并且挤占该元素原来的空间\"></a>display:隐藏对应的元素并且挤占该元素原来的空间</h2><h1 id=\"hack\"><a href=\"#hack\" class=\"headerlink\" title=\"hack\"></a>hack</h1><h2 id=\"checkbox-checked伪属性toggle-使用-选择器来toggle-input后面的内容\"><a href=\"#checkbox-checked伪属性toggle-使用-选择器来toggle-input后面的内容\" class=\"headerlink\" title=\"checkbox,:checked伪属性toggle,使用+,~选择器来toggle input后面的内容\"></a>checkbox,:checked伪属性toggle,使用+,~选择器来toggle input后面的内容</h2><p>##a:target也可以用来做开关</p>\n<p>##一个icon居中的方法，text-align，line-height设置为容器的高度，</p>\n<h2 id=\"在reset后，因为html和body都没有了高度，linear-gradient不能被用在html和body上，究其原因，linear-gradient是background-image的值，但是的background-color可以实现。background的范围是盒模型中的content和padding\"><a href=\"#在reset后，因为html和body都没有了高度，linear-gradient不能被用在html和body上，究其原因，linear-gradient是background-image的值，但是的background-color可以实现。background的范围是盒模型中的content和padding\" class=\"headerlink\" title=\"在reset后，因为html和body都没有了高度，linear-gradient不能被用在html和body上，究其原因，linear-gradient是background-image的值，但是的background-color可以实现。background的范围是盒模型中的content和padding\"></a>在reset后，因为html和body都没有了高度，linear-gradient不能被用在html和body上，究其原因，linear-gradient是background-image的值，但是的background-color可以实现。background的范围是盒模型中的content和padding</h2><h2 id=\"clac-计算top值，使其居中，锁区的值应该是calc-50-height-2\"><a href=\"#clac-计算top值，使其居中，锁区的值应该是calc-50-height-2\" class=\"headerlink\" title=\"clac()计算top值，使其居中，锁区的值应该是calc(50% -height/2)\"></a>clac()计算top值，使其居中，锁区的值应该是calc(50% -height/2)</h2><h2 id=\"使用inline-block注意子元素之间的留白-100-分成两份50-，一行容不下这两份\"><a href=\"#使用inline-block注意子元素之间的留白-100-分成两份50-，一行容不下这两份\" class=\"headerlink\" title=\"使用inline-block注意子元素之间的留白,100%分成两份50%，一行容不下这两份\"></a>使用inline-block注意子元素之间的留白,100%分成两份50%，一行容不下这两份</h2><h2 id=\"对于设置了absolute后的元素使用top，left进行定位，注意这个距离是使用离容器的最外那条边框来计算的\"><a href=\"#对于设置了absolute后的元素使用top，left进行定位，注意这个距离是使用离容器的最外那条边框来计算的\" class=\"headerlink\" title=\"对于设置了absolute后的元素使用top，left进行定位，注意这个距离是使用离容器的最外那条边框来计算的\"></a>对于设置了absolute后的元素使用top，left进行定位，注意这个距离是使用离容器的最外那条边框来计算的</h2><h2 id=\"display-flex影响最近的text-align\"><a href=\"#display-flex影响最近的text-align\" class=\"headerlink\" title=\"display:flex影响最近的text-align\"></a>display:flex影响最近的text-align</h2><h2 id=\"transform的百分比单位是基于本身的尺寸，而不是父元素的尺寸\"><a href=\"#transform的百分比单位是基于本身的尺寸，而不是父元素的尺寸\" class=\"headerlink\" title=\"transform的百分比单位是基于本身的尺寸，而不是父元素的尺寸\"></a>transform的百分比单位是基于本身的尺寸，而不是父元素的尺寸</h2><h2 id=\"background-position-right-20px-bottom-10px-偏移量前面指定关键字，精确定位背景图片\"><a href=\"#background-position-right-20px-bottom-10px-偏移量前面指定关键字，精确定位背景图片\" class=\"headerlink\" title=\"background-position: right 20px bottom 10px;　　偏移量前面指定关键字，精确定位背景图片\"></a>background-position: right 20px bottom 10px;　　偏移量前面指定关键字，精确定位背景图片</h2><h2 id=\"outline-offset-描边的偏移量，可以为负值\"><a href=\"#outline-offset-描边的偏移量，可以为负值\" class=\"headerlink\" title=\"outline-offset 描边的偏移量，可以为负值\"></a>outline-offset 描边的偏移量，可以为负值</h2><h2 id=\"background-origin-默认值是padding-box-这样边框才不会遮挡住图片．可以设置为content-box-这样在加上padding-就可以很好的实现背景图片的定位，还可以和background-position复用实现更加适合的背景定位\"><a href=\"#background-origin-默认值是padding-box-这样边框才不会遮挡住图片．可以设置为content-box-这样在加上padding-就可以很好的实现背景图片的定位，还可以和background-position复用实现更加适合的背景定位\" class=\"headerlink\" title=\"background-origin: 默认值是padding-box,这样边框才不会遮挡住图片．可以设置为content-box,这样在加上padding,就可以很好的实现背景图片的定位，还可以和background-position复用实现更加适合的背景定位\"></a>background-origin: 默认值是padding-box,这样边框才不会遮挡住图片．可以设置为content-box,这样在加上padding,就可以很好的实现背景图片的定位，还可以和background-position复用实现更加适合的背景定位</h2><h2 id=\"background-image的定位background-position基于background-origin，默认是padding-box。而background-color在默认border之下的，因为切割background的边框默认是border-box，这是通过background-clip实现的，可以设置为padding-box，这样background-color就不再border之下了-那有时候设置了background-image为linear-gradient我们会发现它居然也在border之下，这是为什么呢，不是background-origin默认是padding-box吗，按理说渐变应该不再border之下，这是因为background-repeat默认设置为repeat，这样background-image就会覆盖整个元素\"><a href=\"#background-image的定位background-position基于background-origin，默认是padding-box。而background-color在默认border之下的，因为切割background的边框默认是border-box，这是通过background-clip实现的，可以设置为padding-box，这样background-color就不再border之下了-那有时候设置了background-image为linear-gradient我们会发现它居然也在border之下，这是为什么呢，不是background-origin默认是padding-box吗，按理说渐变应该不再border之下，这是因为background-repeat默认设置为repeat，这样background-image就会覆盖整个元素\" class=\"headerlink\" title=\"background-image的定位background-position基于background-origin，默认是padding-box。而background-color在默认border之下的，因为切割background的边框默认是border-box，这是通过background-clip实现的，可以设置为padding-box，这样background-color就不再border之下了;那有时候设置了background-image为linear-gradient我们会发现它居然也在border之下，这是为什么呢，不是background-origin默认是padding-box吗，按理说渐变应该不再border之下，这是因为background-repeat默认设置为repeat，这样background-image就会覆盖整个元素\"></a>background-image的定位background-position基于background-origin，默认是padding-box。而background-color在默认border之下的，因为切割background的边框默认是border-box，这是通过background-clip实现的，可以设置为padding-box，这样background-color就不再border之下了;那有时候设置了background-image为linear-gradient我们会发现它居然也在border之下，这是为什么呢，不是background-origin默认是padding-box吗，按理说渐变应该不再border之下，这是因为background-repeat默认设置为repeat，这样background-image就会覆盖整个元素</h2><p>》》》》》》</p>\n<h2 id=\"background\"><a href=\"#background\" class=\"headerlink\" title=\"background\"></a>background</h2><p>background-clip限制所有的背景，包括image和color<br>background-color基于background-clip，默认值border-box<br>background-image在norepeat的情况下基于background-clip的前提下基于background-origin;<br>如果有background-repeat：repeat则就会把background-image平铺到整个background-color区域</p>\n"},{"_content":"1. 利用loacation.reload()的方法制作一个无需刷新的插件\n\n2. 旋转linear-gradient的角度\n\n3. 把demo分类，常见的组件有\n    * nav栏\n    * 按钮\n    * 弹出层\n    * slide\n    * form\n    * loading\n    * table\n    * 返回顶部\n    * 分页\n\n4. 三角形生成器\n","source":"_drafts/Some-ideas.md","raw":"1. 利用loacation.reload()的方法制作一个无需刷新的插件\n\n2. 旋转linear-gradient的角度\n\n3. 把demo分类，常见的组件有\n    * nav栏\n    * 按钮\n    * 弹出层\n    * slide\n    * form\n    * loading\n    * table\n    * 返回顶部\n    * 分页\n\n4. 三角形生成器\n","slug":"Some-ideas","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.204Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzscl000sn9fkbmbkb398","content":"<ol>\n<li><p>利用loacation.reload()的方法制作一个无需刷新的插件</p>\n</li>\n<li><p>旋转linear-gradient的角度</p>\n</li>\n<li><p>把demo分类，常见的组件有</p>\n<ul>\n<li>nav栏</li>\n<li>按钮</li>\n<li>弹出层</li>\n<li>slide</li>\n<li>form</li>\n<li>loading</li>\n<li>table</li>\n<li>返回顶部</li>\n<li>分页</li>\n</ul>\n</li>\n<li><p>三角形生成器</p>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>利用loacation.reload()的方法制作一个无需刷新的插件</p>\n</li>\n<li><p>旋转linear-gradient的角度</p>\n</li>\n<li><p>把demo分类，常见的组件有</p>\n<ul>\n<li>nav栏</li>\n<li>按钮</li>\n<li>弹出层</li>\n<li>slide</li>\n<li>form</li>\n<li>loading</li>\n<li>table</li>\n<li>返回顶部</li>\n<li>分页</li>\n</ul>\n</li>\n<li><p>三角形生成器</p>\n</li>\n</ol>\n"},{"layout":"post","title":"变量，作用域和内存问题","description":"变量，作用域和内存问题","date":"2016-10-29T03:49:14.000Z","_content":"\n# 变量，作用域和内存问题\n访问变量有两种方式，第一种是按值访问，就是string，boolean，undefin，number，null这几种数据类型，而另一种就是按引用方式，就是对对象的访问\n\n函数的参数传递是按值传递的，基本类型值就是简单的复制，对象传递参数也只是按值传递，对象传递给命名参数后，修改这个参数，不会在外部作用域中体现出来，因为对象传递参数是按值传递的\n\ntypeof 检测基本类型值的类型\ninstanceof 检测引用类型值的类型\n\nwith语句和try-catch语句可以延长作用域链\n\n```js\nfunction buildUrl(){\n    var qs=\"?debug=true\";\n\n    with(location){\n        var url = href + qs;\n    }\n    return url;\n}\n```\nES5没有块级作用域，只有函数作用域\n","source":"_posts/JavaScript变量，作用域和内存问题.md","raw":"---\nlayout: post\ntitle: 变量，作用域和内存问题\ndescription: 变量，作用域和内存问题\ndate: 2016-10-29 11:49:14\n---\n\n# 变量，作用域和内存问题\n访问变量有两种方式，第一种是按值访问，就是string，boolean，undefin，number，null这几种数据类型，而另一种就是按引用方式，就是对对象的访问\n\n函数的参数传递是按值传递的，基本类型值就是简单的复制，对象传递参数也只是按值传递，对象传递给命名参数后，修改这个参数，不会在外部作用域中体现出来，因为对象传递参数是按值传递的\n\ntypeof 检测基本类型值的类型\ninstanceof 检测引用类型值的类型\n\nwith语句和try-catch语句可以延长作用域链\n\n```js\nfunction buildUrl(){\n    var qs=\"?debug=true\";\n\n    with(location){\n        var url = href + qs;\n    }\n    return url;\n}\n```\nES5没有块级作用域，只有函数作用域\n","slug":"JavaScript变量，作用域和内存问题","published":1,"updated":"2016-10-29T05:32:12.918Z","comments":1,"photos":[],"link":"","_id":"civ3wzscq000tn9fky87br4tl","content":"<h1 id=\"变量，作用域和内存问题\"><a href=\"#变量，作用域和内存问题\" class=\"headerlink\" title=\"变量，作用域和内存问题\"></a>变量，作用域和内存问题</h1><p>访问变量有两种方式，第一种是按值访问，就是string，boolean，undefin，number，null这几种数据类型，而另一种就是按引用方式，就是对对象的访问</p>\n<p>函数的参数传递是按值传递的，基本类型值就是简单的复制，对象传递参数也只是按值传递，对象传递给命名参数后，修改这个参数，不会在外部作用域中体现出来，因为对象传递参数是按值传递的</p>\n<p>typeof 检测基本类型值的类型<br>instanceof 检测引用类型值的类型</p>\n<p>with语句和try-catch语句可以延长作用域链</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildUrl</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> qs=<span class=\"string\">\"?debug=true\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">with</span>(location)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> url = href + qs;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ES5没有块级作用域，只有函数作用域</p>\n","excerpt":"","more":"<h1 id=\"变量，作用域和内存问题\"><a href=\"#变量，作用域和内存问题\" class=\"headerlink\" title=\"变量，作用域和内存问题\"></a>变量，作用域和内存问题</h1><p>访问变量有两种方式，第一种是按值访问，就是string，boolean，undefin，number，null这几种数据类型，而另一种就是按引用方式，就是对对象的访问</p>\n<p>函数的参数传递是按值传递的，基本类型值就是简单的复制，对象传递参数也只是按值传递，对象传递给命名参数后，修改这个参数，不会在外部作用域中体现出来，因为对象传递参数是按值传递的</p>\n<p>typeof 检测基本类型值的类型<br>instanceof 检测引用类型值的类型</p>\n<p>with语句和try-catch语句可以延长作用域链</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildUrl</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> qs=<span class=\"string\">\"?debug=true\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">with</span>(location)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> url = href + qs;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> url;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ES5没有块级作用域，只有函数作用域</p>\n"},{"layout":"post","title":"Atom 使用备忘","description":"A hackable text editor for the 21st Century","date":"2016-10-29T03:49:14.000Z","_content":"\n#### 由于sublime text在ubuntu下无法输入中文始终没有最好的解决办法，所以转战atom,等待sublime解决好问题在回归，atom由gituhub开发，它的slogan是\n>A hackable text editor\nfor the 21st Century\n\n## 安装atom\n\n[atom官网](https://atom.io/)\n\n```\nsudo add-apt-repository ppa:webupd8team/atom\nsudo apt-get update\nsudo apt-get install atom\n```\n\n## atom的扩展包\n\n├── api-docs@0.0.6\n├── atom-autocomplete-php@0.19.4\n├── atom-beautify@0.29.13\n├── atom-bootstrap3@1.2.12\n├── atom-html-preview@0.1.22\n├── atom-jade@0.3.0\n├── atom-jinja2@0.5.0\n├── atom-live-server@1.2.5\n├── atom-ternjs@0.15.0\n├── autocomplete@0.47.0\n├── autocomplete-clang@0.10.0\n├── autocomplete-paths@1.0.2\n├── autocomplete-python@1.8.7\n├── autoprefixer@3.3.0\n├── blade-snippets@0.2.0\n├── block-comment-plus@0.4.0\n├── build@0.65.0\n├── busy@0.7.0\n├── color-picker@2.2.2\n├── css-snippets@1.1.0\n├── emmet@2.4.3\n├── file-icons@1.7.22\n├── git-control@0.8.2\n├── git-time-machine@1.5.3\n├── highlight-selected@0.11.2\n├── jade-autocompile@0.8.3\n├── jade-beautify@0.1.5\n├── jquery-snippets@11.0.0\n├── language-blade@0.26.2\n├── language-ini@1.16.0\n├── language-pug@0.0.19\n├── language-svg@0.9.0\n├── language-twig@1.6.3\n├── language-vue@0.19.0\n├── less-than-slash@0.16.0\n├── linter@1.11.18\n├── linter-eslint@8.0.0\n├── linter-gcc@0.6.15\n├── linter-php@1.3.1\n├── livestyle-atom@0.2.7\n├── minimap@4.25.5\n├── monokai-seti@0.7.0\n├── node-debugger@1.9.1\n├── open-in-browsers@0.0.19\n├── php-server@0.7.0\n├── pigments@0.37.0\n├── platformio-ide@1.6.0\n├── platformio-ide-terminal@2.2.0\n├── python-debugger@0.1.0\n├── python-indent@1.0.0\n├── python-tools@0.6.8\n├── sass-autocompile@0.13.1\n├── script@3.10.1\n├── seti-syntax@1.0.1\n├── seti-ui@1.3.2\n├── source-preview-pug@0.2.0\n├── svg-preview@0.10.0\n├── terminal-plus@0.14.5\n├── todo-show@1.7.0\n├── tool-bar@1.0.1\n├── vue-autocomplete@0.1.1\n└── vue-snippets@0.6.0\n\n└── (empty)\n\n\n\n## atom sippets\n\n```\n'.source.coffee':\n  'Console log':\n    'prefix': 'log'\n    'body': 'console.log $1'\n```\n\natom使用cson来定义snippet，scope可以参见snipppet,多行代码使用`'''code line here'''`\n\n# 参考\n1. https://codeforgeek.com/2014/09/install-atom-editor-ubuntu-14-04/\n2. placeholder\n\n3. 各种语言的scope\n\n```\nActionScript: source.actionscript.2\nAppleScript: source.applescript\nASP: source.asp\nBatch FIle: source.dosbatch\nC#: source.cs\nC++: source.c++\nClojure: source.clojure\nCoffeeScript: source.coffee\nCSS: source.css\nD: source.d\nDiff: source.diff\nErlang: source.erlang\nGo: source.go\nGraphViz: source.dot\nGroovy: source.groovy\nHaskell: source.haskell\nHTML: text.html(.basic)\nJSP: text.html.jsp\nJava: source.java\nJava Properties: source.java-props\nJava Doc: text.html.javadoc\nJSON: source.json\nJavascript: source.js\nBibTex: source.bibtex\nLatex Log: text.log.latex\nLatex Memoir: text.tex.latex.memoir\nLatex: text.tex.latex\nLESS: source.css.less\nTeX: text.tex\nLisp: source.lisp\nLua: source.lua\nMakeFile: source.makefile\nMarkdown: text.html.markdown\nMulti Markdown: text.html.markdown.multimarkdown\nMatlab: source.matlab\nObjective-C: source.objc\nObjective-C++: source.objc++\nOCaml campl4: source.camlp4.ocaml\nOCaml: source.ocaml\nOCamllex: source.ocamllex\nPerl: source.perl\nPHP: source.php\nRegular Expression(python): source.regexp.python\nPython: source.python\nR Console: source.r-console\nR: source.r\nRuby on Rails: source.ruby.rails\nRuby HAML: text.haml\nSQL(Ruby): source.sql.ruby\nRegular Expression: source.regexp\nRestructuredText: text.restructuredtext\nRuby: source.ruby\nSASS: source.sass\nScala: source.scala\nShell Script: source.shell\nSQL: source.sql\nStylus: source.stylus\nTCL: source.tcl\nHTML(TCL): text.html.tcl\nPlain text: text.plain\nTextile: text.html.textile\nXML: text.xml\nXSL: text.xml.xsl\nYAML: source.yaml\n```\n","source":"_posts/Atom简明用法.md","raw":"---\nlayout: post\ntitle: Atom 使用备忘  \ndescription: A hackable text editor for the 21st Century\ndate: 2016-10-29 11:49:14\n---\n\n#### 由于sublime text在ubuntu下无法输入中文始终没有最好的解决办法，所以转战atom,等待sublime解决好问题在回归，atom由gituhub开发，它的slogan是\n>A hackable text editor\nfor the 21st Century\n\n## 安装atom\n\n[atom官网](https://atom.io/)\n\n```\nsudo add-apt-repository ppa:webupd8team/atom\nsudo apt-get update\nsudo apt-get install atom\n```\n\n## atom的扩展包\n\n├── api-docs@0.0.6\n├── atom-autocomplete-php@0.19.4\n├── atom-beautify@0.29.13\n├── atom-bootstrap3@1.2.12\n├── atom-html-preview@0.1.22\n├── atom-jade@0.3.0\n├── atom-jinja2@0.5.0\n├── atom-live-server@1.2.5\n├── atom-ternjs@0.15.0\n├── autocomplete@0.47.0\n├── autocomplete-clang@0.10.0\n├── autocomplete-paths@1.0.2\n├── autocomplete-python@1.8.7\n├── autoprefixer@3.3.0\n├── blade-snippets@0.2.0\n├── block-comment-plus@0.4.0\n├── build@0.65.0\n├── busy@0.7.0\n├── color-picker@2.2.2\n├── css-snippets@1.1.0\n├── emmet@2.4.3\n├── file-icons@1.7.22\n├── git-control@0.8.2\n├── git-time-machine@1.5.3\n├── highlight-selected@0.11.2\n├── jade-autocompile@0.8.3\n├── jade-beautify@0.1.5\n├── jquery-snippets@11.0.0\n├── language-blade@0.26.2\n├── language-ini@1.16.0\n├── language-pug@0.0.19\n├── language-svg@0.9.0\n├── language-twig@1.6.3\n├── language-vue@0.19.0\n├── less-than-slash@0.16.0\n├── linter@1.11.18\n├── linter-eslint@8.0.0\n├── linter-gcc@0.6.15\n├── linter-php@1.3.1\n├── livestyle-atom@0.2.7\n├── minimap@4.25.5\n├── monokai-seti@0.7.0\n├── node-debugger@1.9.1\n├── open-in-browsers@0.0.19\n├── php-server@0.7.0\n├── pigments@0.37.0\n├── platformio-ide@1.6.0\n├── platformio-ide-terminal@2.2.0\n├── python-debugger@0.1.0\n├── python-indent@1.0.0\n├── python-tools@0.6.8\n├── sass-autocompile@0.13.1\n├── script@3.10.1\n├── seti-syntax@1.0.1\n├── seti-ui@1.3.2\n├── source-preview-pug@0.2.0\n├── svg-preview@0.10.0\n├── terminal-plus@0.14.5\n├── todo-show@1.7.0\n├── tool-bar@1.0.1\n├── vue-autocomplete@0.1.1\n└── vue-snippets@0.6.0\n\n└── (empty)\n\n\n\n## atom sippets\n\n```\n'.source.coffee':\n  'Console log':\n    'prefix': 'log'\n    'body': 'console.log $1'\n```\n\natom使用cson来定义snippet，scope可以参见snipppet,多行代码使用`'''code line here'''`\n\n# 参考\n1. https://codeforgeek.com/2014/09/install-atom-editor-ubuntu-14-04/\n2. placeholder\n\n3. 各种语言的scope\n\n```\nActionScript: source.actionscript.2\nAppleScript: source.applescript\nASP: source.asp\nBatch FIle: source.dosbatch\nC#: source.cs\nC++: source.c++\nClojure: source.clojure\nCoffeeScript: source.coffee\nCSS: source.css\nD: source.d\nDiff: source.diff\nErlang: source.erlang\nGo: source.go\nGraphViz: source.dot\nGroovy: source.groovy\nHaskell: source.haskell\nHTML: text.html(.basic)\nJSP: text.html.jsp\nJava: source.java\nJava Properties: source.java-props\nJava Doc: text.html.javadoc\nJSON: source.json\nJavascript: source.js\nBibTex: source.bibtex\nLatex Log: text.log.latex\nLatex Memoir: text.tex.latex.memoir\nLatex: text.tex.latex\nLESS: source.css.less\nTeX: text.tex\nLisp: source.lisp\nLua: source.lua\nMakeFile: source.makefile\nMarkdown: text.html.markdown\nMulti Markdown: text.html.markdown.multimarkdown\nMatlab: source.matlab\nObjective-C: source.objc\nObjective-C++: source.objc++\nOCaml campl4: source.camlp4.ocaml\nOCaml: source.ocaml\nOCamllex: source.ocamllex\nPerl: source.perl\nPHP: source.php\nRegular Expression(python): source.regexp.python\nPython: source.python\nR Console: source.r-console\nR: source.r\nRuby on Rails: source.ruby.rails\nRuby HAML: text.haml\nSQL(Ruby): source.sql.ruby\nRegular Expression: source.regexp\nRestructuredText: text.restructuredtext\nRuby: source.ruby\nSASS: source.sass\nScala: source.scala\nShell Script: source.shell\nSQL: source.sql\nStylus: source.stylus\nTCL: source.tcl\nHTML(TCL): text.html.tcl\nPlain text: text.plain\nTextile: text.html.textile\nXML: text.xml\nXSL: text.xml.xsl\nYAML: source.yaml\n```\n","slug":"Atom简明用法","published":1,"updated":"2016-10-29T05:33:37.070Z","comments":1,"photos":[],"link":"","_id":"civ3wzscu000un9fkd8wz6gen","content":"<h4 id=\"由于sublime-text在ubuntu下无法输入中文始终没有最好的解决办法，所以转战atom-等待sublime解决好问题在回归，atom由gituhub开发，它的slogan是\"><a href=\"#由于sublime-text在ubuntu下无法输入中文始终没有最好的解决办法，所以转战atom-等待sublime解决好问题在回归，atom由gituhub开发，它的slogan是\" class=\"headerlink\" title=\"由于sublime text在ubuntu下无法输入中文始终没有最好的解决办法，所以转战atom,等待sublime解决好问题在回归，atom由gituhub开发，它的slogan是\"></a>由于sublime text在ubuntu下无法输入中文始终没有最好的解决办法，所以转战atom,等待sublime解决好问题在回归，atom由gituhub开发，它的slogan是</h4><blockquote>\n<p>A hackable text editor<br>for the 21st Century</p>\n</blockquote>\n<h2 id=\"安装atom\"><a href=\"#安装atom\" class=\"headerlink\" title=\"安装atom\"></a>安装atom</h2><p><a href=\"https://atom.io/\" target=\"_blank\" rel=\"external\">atom官网</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:webupd8team/atom</div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install atom</div></pre></td></tr></table></figure>\n<h2 id=\"atom的扩展包\"><a href=\"#atom的扩展包\" class=\"headerlink\" title=\"atom的扩展包\"></a>atom的扩展包</h2><p>├── api-docs@0.0.6<br>├── atom-autocomplete-php@0.19.4<br>├── atom-beautify@0.29.13<br>├── atom-bootstrap3@1.2.12<br>├── atom-html-preview@0.1.22<br>├── atom-jade@0.3.0<br>├── atom-jinja2@0.5.0<br>├── atom-live-server@1.2.5<br>├── atom-ternjs@0.15.0<br>├── autocomplete@0.47.0<br>├── autocomplete-clang@0.10.0<br>├── autocomplete-paths@1.0.2<br>├── autocomplete-python@1.8.7<br>├── autoprefixer@3.3.0<br>├── blade-snippets@0.2.0<br>├── block-comment-plus@0.4.0<br>├── build@0.65.0<br>├── busy@0.7.0<br>├── color-picker@2.2.2<br>├── css-snippets@1.1.0<br>├── emmet@2.4.3<br>├── file-icons@1.7.22<br>├── git-control@0.8.2<br>├── git-time-machine@1.5.3<br>├── highlight-selected@0.11.2<br>├── jade-autocompile@0.8.3<br>├── jade-beautify@0.1.5<br>├── jquery-snippets@11.0.0<br>├── language-blade@0.26.2<br>├── language-ini@1.16.0<br>├── language-pug@0.0.19<br>├── language-svg@0.9.0<br>├── language-twig@1.6.3<br>├── language-vue@0.19.0<br>├── less-than-slash@0.16.0<br>├── linter@1.11.18<br>├── linter-eslint@8.0.0<br>├── linter-gcc@0.6.15<br>├── linter-php@1.3.1<br>├── livestyle-atom@0.2.7<br>├── minimap@4.25.5<br>├── monokai-seti@0.7.0<br>├── node-debugger@1.9.1<br>├── open-in-browsers@0.0.19<br>├── php-server@0.7.0<br>├── pigments@0.37.0<br>├── platformio-ide@1.6.0<br>├── platformio-ide-terminal@2.2.0<br>├── python-debugger@0.1.0<br>├── python-indent@1.0.0<br>├── python-tools@0.6.8<br>├── sass-autocompile@0.13.1<br>├── script@3.10.1<br>├── seti-syntax@1.0.1<br>├── seti-ui@1.3.2<br>├── source-preview-pug@0.2.0<br>├── svg-preview@0.10.0<br>├── terminal-plus@0.14.5<br>├── todo-show@1.7.0<br>├── tool-bar@1.0.1<br>├── vue-autocomplete@0.1.1<br>└── vue-snippets@0.6.0</p>\n<p>└── (empty)</p>\n<h2 id=\"atom-sippets\"><a href=\"#atom-sippets\" class=\"headerlink\" title=\"atom sippets\"></a>atom sippets</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;.source.coffee&apos;:</div><div class=\"line\">  &apos;Console log&apos;:</div><div class=\"line\">    &apos;prefix&apos;: &apos;log&apos;</div><div class=\"line\">    &apos;body&apos;: &apos;console.log $1&apos;</div></pre></td></tr></table></figure>\n<p>atom使用cson来定义snippet，scope可以参见snipppet,多行代码使用<code>&#39;&#39;&#39;code line here&#39;&#39;&#39;</code></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ol>\n<li><a href=\"https://codeforgeek.com/2014/09/install-atom-editor-ubuntu-14-04/\" target=\"_blank\" rel=\"external\">https://codeforgeek.com/2014/09/install-atom-editor-ubuntu-14-04/</a></li>\n<li><p>placeholder</p>\n</li>\n<li><p>各种语言的scope</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\">ActionScript: source.actionscript.2</div><div class=\"line\">AppleScript: source.applescript</div><div class=\"line\">ASP: source.asp</div><div class=\"line\">Batch FIle: source.dosbatch</div><div class=\"line\">C#: source.cs</div><div class=\"line\">C++: source.c++</div><div class=\"line\">Clojure: source.clojure</div><div class=\"line\">CoffeeScript: source.coffee</div><div class=\"line\">CSS: source.css</div><div class=\"line\">D: source.d</div><div class=\"line\">Diff: source.diff</div><div class=\"line\">Erlang: source.erlang</div><div class=\"line\">Go: source.go</div><div class=\"line\">GraphViz: source.dot</div><div class=\"line\">Groovy: source.groovy</div><div class=\"line\">Haskell: source.haskell</div><div class=\"line\">HTML: text.html(.basic)</div><div class=\"line\">JSP: text.html.jsp</div><div class=\"line\">Java: source.java</div><div class=\"line\">Java Properties: source.java-props</div><div class=\"line\">Java Doc: text.html.javadoc</div><div class=\"line\">JSON: source.json</div><div class=\"line\">Javascript: source.js</div><div class=\"line\">BibTex: source.bibtex</div><div class=\"line\">Latex Log: text.log.latex</div><div class=\"line\">Latex Memoir: text.tex.latex.memoir</div><div class=\"line\">Latex: text.tex.latex</div><div class=\"line\">LESS: source.css.less</div><div class=\"line\">TeX: text.tex</div><div class=\"line\">Lisp: source.lisp</div><div class=\"line\">Lua: source.lua</div><div class=\"line\">MakeFile: source.makefile</div><div class=\"line\">Markdown: text.html.markdown</div><div class=\"line\">Multi Markdown: text.html.markdown.multimarkdown</div><div class=\"line\">Matlab: source.matlab</div><div class=\"line\">Objective-C: source.objc</div><div class=\"line\">Objective-C++: source.objc++</div><div class=\"line\">OCaml campl4: source.camlp4.ocaml</div><div class=\"line\">OCaml: source.ocaml</div><div class=\"line\">OCamllex: source.ocamllex</div><div class=\"line\">Perl: source.perl</div><div class=\"line\">PHP: source.php</div><div class=\"line\">Regular Expression(python): source.regexp.python</div><div class=\"line\">Python: source.python</div><div class=\"line\">R Console: source.r-console</div><div class=\"line\">R: source.r</div><div class=\"line\">Ruby on Rails: source.ruby.rails</div><div class=\"line\">Ruby HAML: text.haml</div><div class=\"line\">SQL(Ruby): source.sql.ruby</div><div class=\"line\">Regular Expression: source.regexp</div><div class=\"line\">RestructuredText: text.restructuredtext</div><div class=\"line\">Ruby: source.ruby</div><div class=\"line\">SASS: source.sass</div><div class=\"line\">Scala: source.scala</div><div class=\"line\">Shell Script: source.shell</div><div class=\"line\">SQL: source.sql</div><div class=\"line\">Stylus: source.stylus</div><div class=\"line\">TCL: source.tcl</div><div class=\"line\">HTML(TCL): text.html.tcl</div><div class=\"line\">Plain text: text.plain</div><div class=\"line\">Textile: text.html.textile</div><div class=\"line\">XML: text.xml</div><div class=\"line\">XSL: text.xml.xsl</div><div class=\"line\">YAML: source.yaml</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h4 id=\"由于sublime-text在ubuntu下无法输入中文始终没有最好的解决办法，所以转战atom-等待sublime解决好问题在回归，atom由gituhub开发，它的slogan是\"><a href=\"#由于sublime-text在ubuntu下无法输入中文始终没有最好的解决办法，所以转战atom-等待sublime解决好问题在回归，atom由gituhub开发，它的slogan是\" class=\"headerlink\" title=\"由于sublime text在ubuntu下无法输入中文始终没有最好的解决办法，所以转战atom,等待sublime解决好问题在回归，atom由gituhub开发，它的slogan是\"></a>由于sublime text在ubuntu下无法输入中文始终没有最好的解决办法，所以转战atom,等待sublime解决好问题在回归，atom由gituhub开发，它的slogan是</h4><blockquote>\n<p>A hackable text editor<br>for the 21st Century</p>\n</blockquote>\n<h2 id=\"安装atom\"><a href=\"#安装atom\" class=\"headerlink\" title=\"安装atom\"></a>安装atom</h2><p><a href=\"https://atom.io/\">atom官网</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:webupd8team/atom</div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install atom</div></pre></td></tr></table></figure>\n<h2 id=\"atom的扩展包\"><a href=\"#atom的扩展包\" class=\"headerlink\" title=\"atom的扩展包\"></a>atom的扩展包</h2><p>├── api-docs@0.0.6<br>├── atom-autocomplete-php@0.19.4<br>├── atom-beautify@0.29.13<br>├── atom-bootstrap3@1.2.12<br>├── atom-html-preview@0.1.22<br>├── atom-jade@0.3.0<br>├── atom-jinja2@0.5.0<br>├── atom-live-server@1.2.5<br>├── atom-ternjs@0.15.0<br>├── autocomplete@0.47.0<br>├── autocomplete-clang@0.10.0<br>├── autocomplete-paths@1.0.2<br>├── autocomplete-python@1.8.7<br>├── autoprefixer@3.3.0<br>├── blade-snippets@0.2.0<br>├── block-comment-plus@0.4.0<br>├── build@0.65.0<br>├── busy@0.7.0<br>├── color-picker@2.2.2<br>├── css-snippets@1.1.0<br>├── emmet@2.4.3<br>├── file-icons@1.7.22<br>├── git-control@0.8.2<br>├── git-time-machine@1.5.3<br>├── highlight-selected@0.11.2<br>├── jade-autocompile@0.8.3<br>├── jade-beautify@0.1.5<br>├── jquery-snippets@11.0.0<br>├── language-blade@0.26.2<br>├── language-ini@1.16.0<br>├── language-pug@0.0.19<br>├── language-svg@0.9.0<br>├── language-twig@1.6.3<br>├── language-vue@0.19.0<br>├── less-than-slash@0.16.0<br>├── linter@1.11.18<br>├── linter-eslint@8.0.0<br>├── linter-gcc@0.6.15<br>├── linter-php@1.3.1<br>├── livestyle-atom@0.2.7<br>├── minimap@4.25.5<br>├── monokai-seti@0.7.0<br>├── node-debugger@1.9.1<br>├── open-in-browsers@0.0.19<br>├── php-server@0.7.0<br>├── pigments@0.37.0<br>├── platformio-ide@1.6.0<br>├── platformio-ide-terminal@2.2.0<br>├── python-debugger@0.1.0<br>├── python-indent@1.0.0<br>├── python-tools@0.6.8<br>├── sass-autocompile@0.13.1<br>├── script@3.10.1<br>├── seti-syntax@1.0.1<br>├── seti-ui@1.3.2<br>├── source-preview-pug@0.2.0<br>├── svg-preview@0.10.0<br>├── terminal-plus@0.14.5<br>├── todo-show@1.7.0<br>├── tool-bar@1.0.1<br>├── vue-autocomplete@0.1.1<br>└── vue-snippets@0.6.0</p>\n<p>└── (empty)</p>\n<h2 id=\"atom-sippets\"><a href=\"#atom-sippets\" class=\"headerlink\" title=\"atom sippets\"></a>atom sippets</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;.source.coffee&apos;:</div><div class=\"line\">  &apos;Console log&apos;:</div><div class=\"line\">    &apos;prefix&apos;: &apos;log&apos;</div><div class=\"line\">    &apos;body&apos;: &apos;console.log $1&apos;</div></pre></td></tr></table></figure>\n<p>atom使用cson来定义snippet，scope可以参见snipppet,多行代码使用<code>&#39;&#39;&#39;code line here&#39;&#39;&#39;</code></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ol>\n<li><a href=\"https://codeforgeek.com/2014/09/install-atom-editor-ubuntu-14-04/\">https://codeforgeek.com/2014/09/install-atom-editor-ubuntu-14-04/</a></li>\n<li><p>placeholder</p>\n</li>\n<li><p>各种语言的scope</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\">ActionScript: source.actionscript.2</div><div class=\"line\">AppleScript: source.applescript</div><div class=\"line\">ASP: source.asp</div><div class=\"line\">Batch FIle: source.dosbatch</div><div class=\"line\">C#: source.cs</div><div class=\"line\">C++: source.c++</div><div class=\"line\">Clojure: source.clojure</div><div class=\"line\">CoffeeScript: source.coffee</div><div class=\"line\">CSS: source.css</div><div class=\"line\">D: source.d</div><div class=\"line\">Diff: source.diff</div><div class=\"line\">Erlang: source.erlang</div><div class=\"line\">Go: source.go</div><div class=\"line\">GraphViz: source.dot</div><div class=\"line\">Groovy: source.groovy</div><div class=\"line\">Haskell: source.haskell</div><div class=\"line\">HTML: text.html(.basic)</div><div class=\"line\">JSP: text.html.jsp</div><div class=\"line\">Java: source.java</div><div class=\"line\">Java Properties: source.java-props</div><div class=\"line\">Java Doc: text.html.javadoc</div><div class=\"line\">JSON: source.json</div><div class=\"line\">Javascript: source.js</div><div class=\"line\">BibTex: source.bibtex</div><div class=\"line\">Latex Log: text.log.latex</div><div class=\"line\">Latex Memoir: text.tex.latex.memoir</div><div class=\"line\">Latex: text.tex.latex</div><div class=\"line\">LESS: source.css.less</div><div class=\"line\">TeX: text.tex</div><div class=\"line\">Lisp: source.lisp</div><div class=\"line\">Lua: source.lua</div><div class=\"line\">MakeFile: source.makefile</div><div class=\"line\">Markdown: text.html.markdown</div><div class=\"line\">Multi Markdown: text.html.markdown.multimarkdown</div><div class=\"line\">Matlab: source.matlab</div><div class=\"line\">Objective-C: source.objc</div><div class=\"line\">Objective-C++: source.objc++</div><div class=\"line\">OCaml campl4: source.camlp4.ocaml</div><div class=\"line\">OCaml: source.ocaml</div><div class=\"line\">OCamllex: source.ocamllex</div><div class=\"line\">Perl: source.perl</div><div class=\"line\">PHP: source.php</div><div class=\"line\">Regular Expression(python): source.regexp.python</div><div class=\"line\">Python: source.python</div><div class=\"line\">R Console: source.r-console</div><div class=\"line\">R: source.r</div><div class=\"line\">Ruby on Rails: source.ruby.rails</div><div class=\"line\">Ruby HAML: text.haml</div><div class=\"line\">SQL(Ruby): source.sql.ruby</div><div class=\"line\">Regular Expression: source.regexp</div><div class=\"line\">RestructuredText: text.restructuredtext</div><div class=\"line\">Ruby: source.ruby</div><div class=\"line\">SASS: source.sass</div><div class=\"line\">Scala: source.scala</div><div class=\"line\">Shell Script: source.shell</div><div class=\"line\">SQL: source.sql</div><div class=\"line\">Stylus: source.stylus</div><div class=\"line\">TCL: source.tcl</div><div class=\"line\">HTML(TCL): text.html.tcl</div><div class=\"line\">Plain text: text.plain</div><div class=\"line\">Textile: text.html.textile</div><div class=\"line\">XML: text.xml</div><div class=\"line\">XSL: text.xml.xsl</div><div class=\"line\">YAML: source.yaml</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"JavaScript基本概念","description":"高程３笔记第三章","date":"2016-10-29T03:49:14.000Z","_content":"\n\n# 数据类型\n## null\nnull代表一个空对象指针，所以对其使用typeof操作数返回'object'\nvar somevar = null,意在初始化这个变量，这个变量今后要保存对象\nnull == undefined,返回ture。这是因为==二元操作符旨在转换数值作比较\nnull === undefined,返回false\n\n## Boolean\n对于不同的数据类型使用Boolean函数，可以得到下面的结果\n\n|Boolean|true|false|\n|----|----|-----|\n|string|非空字符串|''空字符串，不是' '|\n|对象|任何对象|null|\n|Number|任何非零数字|0或NaN|\n\n\n## Number\n数字值前缀**0x**代表16进制数\n数字值前缀**0**代表8进制数\n十六进制和八进制数计算后都会转换成十进制数\n仅有0.1+0.2=0.30000000000000004\nNumber.MAX_VALUE和Number.MIN_VALUE分别保存着JavaScript所能表示的最大值和最小值，可以使用isFinite()函数，如果是在最大值和最小值之间没，则返回ture\n\n## NaN\n任何涉及NaN的操作都会返回NaN\nNaN同任何数都不相等，包括它自身\nisNaN()在接收了一个参数后，尝试将其转换成数值，如果能转换成数值，则返回false，否则返回true;这个参数甚至可以适用于对象，依次调用valueOf(),toString()方法对其进行判断\n\n## 数值转换\n几种数据类型之间总存在类型转换的需要;上述的Boolean()函数就是一例\n如果需要将一个非数值转换成数值就有以下三种函数可以执行\n\n1.Number(),接受任何数据类型\n\n||Number()|结果\n|---|---|---|\n|String|''和' '|0|\n|String|'ASFJ1234'(含有字符的数字值)|NaN|\n|String|' 1234'或'01234'(会去掉空格或者0)|1234|\n|String|'0x12'(十六进制转换成十进制,八进制遵循上一条)|18|\n|Boolean|true|1|\n|Boolean|false|0|\n|Number|十六进制八进制都转换成十进制|--|\n|null|返回0|0|\n|undefined|返回NaN|NaN|\n|Object|依次调用valueOf(),toString()方法对其进行判断|--|\n\n2.parseInt(),只接受字符串\n\n八进制不再解析\n十六进制正常解析\n可以为其传入第二个参数，如16,8将其转换成特定进制的数\n字符串中非数字值如果出现比数字值早，则返回NaN\n字符串中非数字值如果出现比数字值晚，则取得非数值之前的数值\n''和' '都返回NaN，先导0忽略\n浮点数被转换成整数\n\n3.parseFloat(),也只接受字符串\n与parseInt()的不同就是忽略前导0，不再解析十六，八等非十进制数\n解析浮点数\n\n## String\n### toString()\n\n将其他类型的值转换成字符串\n除null和undefined之外，每种数据类型都有toString()方法\n在对纯数字使用toString()方法时，可以传入参数如2,8,10,16，默认是10，转换成对应进制的字符串输出\n\n### String()函数\n如果值有toString方法，则调用toString()方法\n如果是null，返回null\n如果是undefined，返回undefined.\n\n\n## Object\n创建对象的方法有两种\nvar obj = new Object();\nvar obj = {};\n第五六章详解\n\n## 关系操作符\n\n### 大小比较，遵循一下几条原则\n1. 如果两个数都是纯数值，那就单纯比较数值大小\n2. 如果一个数是字符串，那么就比较字符编码值\n3. 如果两个数都是字符串，那么就将字符串转换成数值，再比较\n4. 布尔值先转换成数值，再比较\n5. 对象，先使用它的valuOf()方法，如果没有这个方法，就用toString()方法\n\n### 相等比较\n相等和不相等，先转换再比较;全等和不全等，不转换只比较\n相等比较时使用上面的转换规则进行比较\nNaN和任何数不等，包括它自己\nnull == undefined\n\n## 条件操作符\nvar VARIABLE = BOOLEAN_EXPRESSION ？ TRUE_VALUE : FALSE_VALUE\n\n##\n","source":"_posts/JavaScript基本概念.md","raw":"---\nlayout: post\ntitle: JavaScript基本概念\ndescription: 高程３笔记第三章\ndate: 2016-10-29 11:49:14\n---\n\n\n# 数据类型\n## null\nnull代表一个空对象指针，所以对其使用typeof操作数返回'object'\nvar somevar = null,意在初始化这个变量，这个变量今后要保存对象\nnull == undefined,返回ture。这是因为==二元操作符旨在转换数值作比较\nnull === undefined,返回false\n\n## Boolean\n对于不同的数据类型使用Boolean函数，可以得到下面的结果\n\n|Boolean|true|false|\n|----|----|-----|\n|string|非空字符串|''空字符串，不是' '|\n|对象|任何对象|null|\n|Number|任何非零数字|0或NaN|\n\n\n## Number\n数字值前缀**0x**代表16进制数\n数字值前缀**0**代表8进制数\n十六进制和八进制数计算后都会转换成十进制数\n仅有0.1+0.2=0.30000000000000004\nNumber.MAX_VALUE和Number.MIN_VALUE分别保存着JavaScript所能表示的最大值和最小值，可以使用isFinite()函数，如果是在最大值和最小值之间没，则返回ture\n\n## NaN\n任何涉及NaN的操作都会返回NaN\nNaN同任何数都不相等，包括它自身\nisNaN()在接收了一个参数后，尝试将其转换成数值，如果能转换成数值，则返回false，否则返回true;这个参数甚至可以适用于对象，依次调用valueOf(),toString()方法对其进行判断\n\n## 数值转换\n几种数据类型之间总存在类型转换的需要;上述的Boolean()函数就是一例\n如果需要将一个非数值转换成数值就有以下三种函数可以执行\n\n1.Number(),接受任何数据类型\n\n||Number()|结果\n|---|---|---|\n|String|''和' '|0|\n|String|'ASFJ1234'(含有字符的数字值)|NaN|\n|String|' 1234'或'01234'(会去掉空格或者0)|1234|\n|String|'0x12'(十六进制转换成十进制,八进制遵循上一条)|18|\n|Boolean|true|1|\n|Boolean|false|0|\n|Number|十六进制八进制都转换成十进制|--|\n|null|返回0|0|\n|undefined|返回NaN|NaN|\n|Object|依次调用valueOf(),toString()方法对其进行判断|--|\n\n2.parseInt(),只接受字符串\n\n八进制不再解析\n十六进制正常解析\n可以为其传入第二个参数，如16,8将其转换成特定进制的数\n字符串中非数字值如果出现比数字值早，则返回NaN\n字符串中非数字值如果出现比数字值晚，则取得非数值之前的数值\n''和' '都返回NaN，先导0忽略\n浮点数被转换成整数\n\n3.parseFloat(),也只接受字符串\n与parseInt()的不同就是忽略前导0，不再解析十六，八等非十进制数\n解析浮点数\n\n## String\n### toString()\n\n将其他类型的值转换成字符串\n除null和undefined之外，每种数据类型都有toString()方法\n在对纯数字使用toString()方法时，可以传入参数如2,8,10,16，默认是10，转换成对应进制的字符串输出\n\n### String()函数\n如果值有toString方法，则调用toString()方法\n如果是null，返回null\n如果是undefined，返回undefined.\n\n\n## Object\n创建对象的方法有两种\nvar obj = new Object();\nvar obj = {};\n第五六章详解\n\n## 关系操作符\n\n### 大小比较，遵循一下几条原则\n1. 如果两个数都是纯数值，那就单纯比较数值大小\n2. 如果一个数是字符串，那么就比较字符编码值\n3. 如果两个数都是字符串，那么就将字符串转换成数值，再比较\n4. 布尔值先转换成数值，再比较\n5. 对象，先使用它的valuOf()方法，如果没有这个方法，就用toString()方法\n\n### 相等比较\n相等和不相等，先转换再比较;全等和不全等，不转换只比较\n相等比较时使用上面的转换规则进行比较\nNaN和任何数不等，包括它自己\nnull == undefined\n\n## 条件操作符\nvar VARIABLE = BOOLEAN_EXPRESSION ？ TRUE_VALUE : FALSE_VALUE\n\n##\n","slug":"JavaScript基本概念","published":1,"updated":"2016-10-29T05:32:57.450Z","comments":1,"photos":[],"link":"","_id":"civ3wzslm000vn9fk71h2yg2r","content":"<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><h2 id=\"null\"><a href=\"#null\" class=\"headerlink\" title=\"null\"></a>null</h2><p>null代表一个空对象指针，所以对其使用typeof操作数返回’object’<br>var somevar = null,意在初始化这个变量，这个变量今后要保存对象<br>null == undefined,返回ture。这是因为==二元操作符旨在转换数值作比较<br>null === undefined,返回false</p>\n<h2 id=\"Boolean\"><a href=\"#Boolean\" class=\"headerlink\" title=\"Boolean\"></a>Boolean</h2><p>对于不同的数据类型使用Boolean函数，可以得到下面的结果</p>\n<table>\n<thead>\n<tr>\n<th>Boolean</th>\n<th>true</th>\n<th>false</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>string</td>\n<td>非空字符串</td>\n<td>‘’空字符串，不是’ ‘</td>\n</tr>\n<tr>\n<td>对象</td>\n<td>任何对象</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>任何非零数字</td>\n<td>0或NaN</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Number\"><a href=\"#Number\" class=\"headerlink\" title=\"Number\"></a>Number</h2><p>数字值前缀<strong>0x</strong>代表16进制数<br>数字值前缀<strong>0</strong>代表8进制数<br>十六进制和八进制数计算后都会转换成十进制数<br>仅有0.1+0.2=0.30000000000000004<br>Number.MAX_VALUE和Number.MIN_VALUE分别保存着JavaScript所能表示的最大值和最小值，可以使用isFinite()函数，如果是在最大值和最小值之间没，则返回ture</p>\n<h2 id=\"NaN\"><a href=\"#NaN\" class=\"headerlink\" title=\"NaN\"></a>NaN</h2><p>任何涉及NaN的操作都会返回NaN<br>NaN同任何数都不相等，包括它自身<br>isNaN()在接收了一个参数后，尝试将其转换成数值，如果能转换成数值，则返回false，否则返回true;这个参数甚至可以适用于对象，依次调用valueOf(),toString()方法对其进行判断</p>\n<h2 id=\"数值转换\"><a href=\"#数值转换\" class=\"headerlink\" title=\"数值转换\"></a>数值转换</h2><p>几种数据类型之间总存在类型转换的需要;上述的Boolean()函数就是一例<br>如果需要将一个非数值转换成数值就有以下三种函数可以执行</p>\n<p>1.Number(),接受任何数据类型</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Number()</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>String</td>\n<td>‘’和’ ‘</td>\n<td>0</td>\n</tr>\n<tr>\n<td>String</td>\n<td>‘ASFJ1234’(含有字符的数字值)</td>\n<td>NaN</td>\n</tr>\n<tr>\n<td>String</td>\n<td>‘ 1234’或’01234’(会去掉空格或者0)</td>\n<td>1234</td>\n</tr>\n<tr>\n<td>String</td>\n<td>‘0x12’(十六进制转换成十进制,八进制遵循上一条)</td>\n<td>18</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>true</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>false</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>十六进制八进制都转换成十进制</td>\n<td>–</td>\n</tr>\n<tr>\n<td>null</td>\n<td>返回0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>undefined</td>\n<td>返回NaN</td>\n<td>NaN</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>依次调用valueOf(),toString()方法对其进行判断</td>\n<td>–</td>\n</tr>\n</tbody>\n</table>\n<p>2.parseInt(),只接受字符串</p>\n<p>八进制不再解析<br>十六进制正常解析<br>可以为其传入第二个参数，如16,8将其转换成特定进制的数<br>字符串中非数字值如果出现比数字值早，则返回NaN<br>字符串中非数字值如果出现比数字值晚，则取得非数值之前的数值<br>‘’和’ ‘都返回NaN，先导0忽略<br>浮点数被转换成整数</p>\n<p>3.parseFloat(),也只接受字符串<br>与parseInt()的不同就是忽略前导0，不再解析十六，八等非十进制数<br>解析浮点数</p>\n<h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><h3 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h3><p>将其他类型的值转换成字符串<br>除null和undefined之外，每种数据类型都有toString()方法<br>在对纯数字使用toString()方法时，可以传入参数如2,8,10,16，默认是10，转换成对应进制的字符串输出</p>\n<h3 id=\"String-函数\"><a href=\"#String-函数\" class=\"headerlink\" title=\"String()函数\"></a>String()函数</h3><p>如果值有toString方法，则调用toString()方法<br>如果是null，返回null<br>如果是undefined，返回undefined.</p>\n<h2 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h2><p>创建对象的方法有两种<br>var obj = new Object();<br>var obj = {};<br>第五六章详解</p>\n<h2 id=\"关系操作符\"><a href=\"#关系操作符\" class=\"headerlink\" title=\"关系操作符\"></a>关系操作符</h2><h3 id=\"大小比较，遵循一下几条原则\"><a href=\"#大小比较，遵循一下几条原则\" class=\"headerlink\" title=\"大小比较，遵循一下几条原则\"></a>大小比较，遵循一下几条原则</h3><ol>\n<li>如果两个数都是纯数值，那就单纯比较数值大小</li>\n<li>如果一个数是字符串，那么就比较字符编码值</li>\n<li>如果两个数都是字符串，那么就将字符串转换成数值，再比较</li>\n<li>布尔值先转换成数值，再比较</li>\n<li>对象，先使用它的valuOf()方法，如果没有这个方法，就用toString()方法</li>\n</ol>\n<h3 id=\"相等比较\"><a href=\"#相等比较\" class=\"headerlink\" title=\"相等比较\"></a>相等比较</h3><p>相等和不相等，先转换再比较;全等和不全等，不转换只比较<br>相等比较时使用上面的转换规则进行比较<br>NaN和任何数不等，包括它自己<br>null == undefined</p>\n<h2 id=\"条件操作符\"><a href=\"#条件操作符\" class=\"headerlink\" title=\"条件操作符\"></a>条件操作符</h2><p>var VARIABLE = BOOLEAN_EXPRESSION ？ TRUE_VALUE : FALSE_VALUE</p>\n<p>##</p>\n","excerpt":"","more":"<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><h2 id=\"null\"><a href=\"#null\" class=\"headerlink\" title=\"null\"></a>null</h2><p>null代表一个空对象指针，所以对其使用typeof操作数返回’object’<br>var somevar = null,意在初始化这个变量，这个变量今后要保存对象<br>null == undefined,返回ture。这是因为==二元操作符旨在转换数值作比较<br>null === undefined,返回false</p>\n<h2 id=\"Boolean\"><a href=\"#Boolean\" class=\"headerlink\" title=\"Boolean\"></a>Boolean</h2><p>对于不同的数据类型使用Boolean函数，可以得到下面的结果</p>\n<table>\n<thead>\n<tr>\n<th>Boolean</th>\n<th>true</th>\n<th>false</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>string</td>\n<td>非空字符串</td>\n<td>‘’空字符串，不是’ ‘</td>\n</tr>\n<tr>\n<td>对象</td>\n<td>任何对象</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>任何非零数字</td>\n<td>0或NaN</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Number\"><a href=\"#Number\" class=\"headerlink\" title=\"Number\"></a>Number</h2><p>数字值前缀<strong>0x</strong>代表16进制数<br>数字值前缀<strong>0</strong>代表8进制数<br>十六进制和八进制数计算后都会转换成十进制数<br>仅有0.1+0.2=0.30000000000000004<br>Number.MAX_VALUE和Number.MIN_VALUE分别保存着JavaScript所能表示的最大值和最小值，可以使用isFinite()函数，如果是在最大值和最小值之间没，则返回ture</p>\n<h2 id=\"NaN\"><a href=\"#NaN\" class=\"headerlink\" title=\"NaN\"></a>NaN</h2><p>任何涉及NaN的操作都会返回NaN<br>NaN同任何数都不相等，包括它自身<br>isNaN()在接收了一个参数后，尝试将其转换成数值，如果能转换成数值，则返回false，否则返回true;这个参数甚至可以适用于对象，依次调用valueOf(),toString()方法对其进行判断</p>\n<h2 id=\"数值转换\"><a href=\"#数值转换\" class=\"headerlink\" title=\"数值转换\"></a>数值转换</h2><p>几种数据类型之间总存在类型转换的需要;上述的Boolean()函数就是一例<br>如果需要将一个非数值转换成数值就有以下三种函数可以执行</p>\n<p>1.Number(),接受任何数据类型</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Number()</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>String</td>\n<td>‘’和’ ‘</td>\n<td>0</td>\n</tr>\n<tr>\n<td>String</td>\n<td>‘ASFJ1234’(含有字符的数字值)</td>\n<td>NaN</td>\n</tr>\n<tr>\n<td>String</td>\n<td>‘ 1234’或’01234’(会去掉空格或者0)</td>\n<td>1234</td>\n</tr>\n<tr>\n<td>String</td>\n<td>‘0x12’(十六进制转换成十进制,八进制遵循上一条)</td>\n<td>18</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>true</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>false</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>十六进制八进制都转换成十进制</td>\n<td>–</td>\n</tr>\n<tr>\n<td>null</td>\n<td>返回0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>undefined</td>\n<td>返回NaN</td>\n<td>NaN</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>依次调用valueOf(),toString()方法对其进行判断</td>\n<td>–</td>\n</tr>\n</tbody>\n</table>\n<p>2.parseInt(),只接受字符串</p>\n<p>八进制不再解析<br>十六进制正常解析<br>可以为其传入第二个参数，如16,8将其转换成特定进制的数<br>字符串中非数字值如果出现比数字值早，则返回NaN<br>字符串中非数字值如果出现比数字值晚，则取得非数值之前的数值<br>‘’和’ ‘都返回NaN，先导0忽略<br>浮点数被转换成整数</p>\n<p>3.parseFloat(),也只接受字符串<br>与parseInt()的不同就是忽略前导0，不再解析十六，八等非十进制数<br>解析浮点数</p>\n<h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><h3 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h3><p>将其他类型的值转换成字符串<br>除null和undefined之外，每种数据类型都有toString()方法<br>在对纯数字使用toString()方法时，可以传入参数如2,8,10,16，默认是10，转换成对应进制的字符串输出</p>\n<h3 id=\"String-函数\"><a href=\"#String-函数\" class=\"headerlink\" title=\"String()函数\"></a>String()函数</h3><p>如果值有toString方法，则调用toString()方法<br>如果是null，返回null<br>如果是undefined，返回undefined.</p>\n<h2 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h2><p>创建对象的方法有两种<br>var obj = new Object();<br>var obj = {};<br>第五六章详解</p>\n<h2 id=\"关系操作符\"><a href=\"#关系操作符\" class=\"headerlink\" title=\"关系操作符\"></a>关系操作符</h2><h3 id=\"大小比较，遵循一下几条原则\"><a href=\"#大小比较，遵循一下几条原则\" class=\"headerlink\" title=\"大小比较，遵循一下几条原则\"></a>大小比较，遵循一下几条原则</h3><ol>\n<li>如果两个数都是纯数值，那就单纯比较数值大小</li>\n<li>如果一个数是字符串，那么就比较字符编码值</li>\n<li>如果两个数都是字符串，那么就将字符串转换成数值，再比较</li>\n<li>布尔值先转换成数值，再比较</li>\n<li>对象，先使用它的valuOf()方法，如果没有这个方法，就用toString()方法</li>\n</ol>\n<h3 id=\"相等比较\"><a href=\"#相等比较\" class=\"headerlink\" title=\"相等比较\"></a>相等比较</h3><p>相等和不相等，先转换再比较;全等和不全等，不转换只比较<br>相等比较时使用上面的转换规则进行比较<br>NaN和任何数不等，包括它自己<br>null == undefined</p>\n<h2 id=\"条件操作符\"><a href=\"#条件操作符\" class=\"headerlink\" title=\"条件操作符\"></a>条件操作符</h2><p>var VARIABLE = BOOLEAN_EXPRESSION ？ TRUE_VALUE : FALSE_VALUE</p>\n<p>##</p>\n"},{"layout":"false","title":"prototype","date":"2016-11-04T15:05:56.000Z","description":null,"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <link href=\"https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.css\" rel=\"stylesheet\">\n    <style>\n        * {\n            box-sizing: border-box;\n        }\n\n        body,\n        html,\n        ul {\n            margin: 0;\n            padding: 0;\n        }\n\n        li {\n            list-style: none;\n        }\n        .tabbar {\n            display: flex;\n            position: fixed;\n            bottom: 0;\n            width: 100%;\n            height: 70px;\n            align-items: center;\n            text-align: center;\n            justify-content: space-around;\n            box-shadow: 0 0px 5px rgba(0,0,0,0.3);\n            color: rgb(151, 152, 163);\n            background: rgba(255, 255, 255, 0.9);\n        }\n\n        .tabbar>div {\n            flex: 1;\n            display: flex;\n            flex-direction: column;\n        }\n\n        .tabbar>div i {\n            font-size: 25px;\n        }\n\n        .tabbar>div span {\n            font-size: 13px;\n        }\n\n        .seletced {\n            color: #e82c86;\n        }\n\n        .nav {\n            text-align: center;\n            height: 40px;\n            width: 100%;\n            line-height: 40px;\n            background: #fff;\n            font-size: 18px;\n            position: fixed;\n            top: 0;\n            left: 0;\n            z-index: 1;\n            box-shadow: 0 0 5px rgba(0,0,0,0.3)\n        }\n        main {\n            /*display: flex;*/\n            margin: 40px 0 70px 0;\n            overflow: hidden;\n        }\n        .view {\n            /*overflow: hidden;*/\n            transition: transform 300ms ease-in-out;\n        }\n        .item {\n            width: 33.3333333333%;\n            float: left;\n        }\n        /*.nav:after {\n                position: absolute;\n                content: '';\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 1em;\n                border-radius: 50%;\n                box-shadow: 0 1em 18px rgba(0,0,0,0.3);\n                z-index: -1;\n            }*/\n\n        .tags span {\n            display: inline-block;\n            padding: 4px 20px;\n            border: 1px solid #b6b3b3;\n            border-radius: 25px;\n            color: #b6b3b3;\n            margin-bottom: 10px;\n        }\n\n        .tags {\n            text-align: center;\n            padding: 20px 15px;\n        }\n\n        .tags header {\n            margin-bottom: 20px;\n        }\n\n        .tags span.seletced {\n            border-color: #e82c86;\n            background: #e82c86;\n            color: #fff;\n        }\n\n        .day {\n            margin-top: 20px;\n            background: #fff;\n        }\n\n        .news {\n            background: #f0f0f0;\n        }\n        .news-item {\n            padding: 5px 15px;\n            margin-bottom: 15px;\n        }\n\n        .expand-content {\n            overflow: hidden;\n            margin: 10px 0 0 0;\n        }\n\n        .operation {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            margin-top: 5px;\n            color: #999;\n        }\n\n        .date {\n            text-align: center;\n            color: #111;\n        }\n\n        .tail {\n            text-align: right;\n        }\n\n        .icon-heart {\n            color: #969499;\n        }\n        .heart {\n            color: #eb3d32\n        }\n        .my {\n            background: #fff;\n            padding: 10px;\n        }\n        .avatar {\n            text-align: center;\n            font-size: 18px;\n            font-weight: bold;\n        }\n        .avatar img {\n            width: 100px;\n            height: 100px;\n            border-radius: 50%;\n        }\n        .my li {\n            display: flex;\n            justify-content: space-between;\n            padding: 0 20px;\n            margin: 10px 0;\n            font-size: 20px;\n        }\n        .my i {\n            width: 20px;\n            text-align: left;\n        }\n    </style>\n\n</head>\n\n<body>\n    <header class=\"nav\" id=\"nav\">\n        资讯聚合\n    </header>\n    <main>\n        <div id=\"view\" class=\"view\">\n            <div class=\"news item\">\n                <section class=\"day\">\n                    <div class=\"date\">Nov.04 今天</div>\n                    <ul>\n                        <li class=\"news-item\">\n                            <div class=\"title\">\n                                今日气候变暖，请增添衣物，国庆放假，放假七天，增加长度\n                            </div>\n                            <div class=\"expand-content\" style=\"height: 0px\">\n                                Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem sint, modi veniam neque possimus praesentium deserunt obcaecati molestias quidem culpa.\n                            </div>\n                            <div class=\"tail\">\n                                ——&nbsp;&nbsp;<span>广东工业大学学生会</span>\n                            </div>\n                            <div class=\"operation\">\n                                <span class=\"expand\">\n                                        <span>展开</span>\n                                <i class=\"fa fa-angle-down\"></i></span>\n                                <span class=\"star\">收藏 <i class=\"fa fa-heart icon-heart\"></i></span>\n                            </div>\n                        </li>\n                        <li class=\"news-item\">\n                            <div class=\"right\">\n                                <div class=\"title\">\n                                    今日气候变暖，请增添衣物，国庆放假，放假七天，增加长度\n                                </div>\n                                <div class=\"expand-content\" style=\"height: 0px\">\n                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem sint, modi veniam neque possimus praesentium deserunt obcaecati molestias quidem culpa.\n                                </div>\n                                <div class=\"tail\">\n                                    ——&nbsp;&nbsp;<span>广东工业大学学生会</span>\n                                </div>\n                                <div class=\"operation\">\n                                    <span class=\"expand\">\n                                        <span>展开</span> <i class=\"fa fa-angle-down\"></i></span>\n                                    <span class=\"star\">收藏 <i class=\"fa fa-heart icon-heart\"></i></span>\n                                </div>\n                            </div>\n                        </li>\n                        <li class=\"news-item\">\n                            <div class=\"right\">\n                                <div class=\"title\">\n                                    今日气候变暖，请增添衣物，国庆放假，放假七天，增加长度\n                                </div>\n                                <div class=\"expand-content\" style=\"height: 0px\">\n                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem sint, modi veniam neque possimus praesentium deserunt obcaecati molestias quidem culpa.\n                                </div>\n                                <div class=\"tail\">\n                                    ——&nbsp;&nbsp;<span>广东工业大学学生会</span>\n                                </div>\n                                <div class=\"operation\">\n                                    <span class=\"expand\"><span>展开</span> <i class=\"fa fa-angle-down\"></i></span>\n                                    <span class=\"star\">收藏 <i class=\"fa fa-heart icon-heart\"></i></span>\n                                </div>\n                            </div>\n                        </li>\n                    </ul>\n                </section>\n                <section class=\"day\">\n                    <div class=\"date\">Nov.03 昨天</div>\n                    <ul>\n                        <li class=\"news-item\">\n                            <div class=\"right\">\n                                <div class=\"title\">\n                                    今日气候变暖，请增添衣物，国庆放假，放假七天，增加长度\n                                </div>\n                                <div class=\"expand-content\" style=\"height: 0px\">\n                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem sint, modi veniam neque possimus praesentium deserunt obcaecati molestias quidem culpa.\n                                </div>\n                                <div class=\"tail\">\n                                    ——&nbsp;&nbsp;<span>广东工业大学学生会</span>\n                                </div>\n                                <div class=\"operation\">\n                                    <span class=\"expand\"><span>展开</span> <i class=\"fa fa-angle-down\"></i></span>\n                                    <span class=\"star\">收藏 <i class=\"fa fa-heart icon-heart\"></i></span>\n                                </div>\n                            </div>\n                        </li>\n                        <li class=\"news-item\">\n                            <div class=\"right\">\n                                <div class=\"title\">\n                                    今日气候变暖，请增添衣物，国庆放假，放假七天，增加长度\n                                </div>\n                                <div class=\"expand-content\" style=\"height: 0px\">\n                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem sint, modi veniam neque possimus praesentium deserunt obcaecati molestias quidem culpa.\n                                </div>\n                                <div class=\"tail\">\n                                    ——&nbsp;&nbsp;<span>广东工业大学学生会</span>\n                                </div>\n                                <div class=\"operation\">\n                                    <span class=\"expand\"><span>展开</span> <i class=\"fa fa-angle-down\"></i></span>\n                                    <span class=\"star\">收藏 <i class=\"fa fa-heart icon-heart\"></i></span>\n                                </div>\n                            </div>\n                        </li>\n                        <li class=\"news-item\">\n                            <div class=\"right\">\n                                <div class=\"title\">\n                                    今日气候变暖，请增添衣物，国庆放假，放假七天，增加长度\n                                </div>\n                                <div class=\"expand-content\" style=\"height: 0px\">\n                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem sint, modi veniam neque possimus praesentium deserunt obcaecati molestias quidem culpa.\n                                </div>\n                                <div class=\"tail\">\n                                    ——&nbsp;&nbsp;<span>广东工业大学学生会</span>\n                                </div>\n                                <div class=\"operation\">\n                                    <span class=\"expand\">\n                                            <span>展开</span>\n                                    <i class=\"fa fa-angle-down\"></i></span>\n                                    <span class=\"star\">收藏 <i class=\"fa fa-heart icon-heart\"></i></span>\n                                </div>\n                            </div>\n                        </li>\n                    </ul>\n                </section>\n            </div>\n            <div class=\"tags item\">\n                <!-- <header>\n                    关注新内容\n                </header> -->\n                <span class=\"seletced\">宣讲会</span>\n                <span class=\"seletced\">羽毛球</span>\n                <span>篮球</span>\n                <span>晚会</span>\n                <span>比赛</span>\n                <span>校内通知</span>\n                <span>四六级</span>\n                <span>五饭</span>\n                <span>一饭</span>\n                <span>游泳</span>\n                <span>信工</span>\n                <span>二饭</span>\n                <span>三饭</span>\n                <span>广工</span>\n                <span>广美</span>\n                <span>大学城</span>\n                <span>实验</span>\n                <span>留学</span>\n                <span>兼职</span>\n                <span>美女</span>\n            </div>\n            <!-- <div class=\"discover item\">\n                <h1>this is discover</h1>\n            </div> -->\n            <div class=\"my item\">\n                <div class=\"avatar\">\n                    <img src=\"http://placehold.it/100/100/e82c86\" alt=\"\">\n                    <div class=\"username\">\n                        username\n                    </div>\n                </div>\n                <ul>\n                    <li>\n                        <span>\n                            <i class=\"fa fa-address-book\" style=\"color:#4eb828\"></i>\n                            我的资料\n                        </span>\n                        <i class=\"fa fa-angle-right\"></i>\n                    </li>\n                    <li>\n                        <span>\n                            <i class=\"fa fa-star\" style=\"color:#ecdf37\"></i>\n                            我的收藏\n                        </span>\n                        <i class=\"fa fa-angle-right\"></i>\n\n                    </li>\n                    <li>\n                        <span>\n                            <i class=\"fa fa-pencil\" style=\"color:#da4213\"></i>\n                            意见反馈\n                        </span>\n                        <i class=\"fa fa-angle-right\"></i>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </main>\n    <footer class=\"tabbar\" id=\"tabBar\">\n        <div class=\"seletced\"  data-dis=\"0\" data-navtext=\"资讯聚合\"><i class=\"fa fa-hashtag\"></i><span>资讯</span></div>\n        <div  data-dis=\"1\" data-navtext=\"管理标签\"><i class=\"fa fa-tag\"></i><span>标签</span></div>\n        <!-- <div  data-dis=\"2\" data-navtext=\"发现新内容\"><i class=\"fa fa-search\"></i><span>发现</span></div> -->\n        <div data-dis=\"2\" data-navtext=\"个人中心\"><i class=\"fa fa-user\" ></i><span>我的</span></div>\n    </footer>\n    <script type=\"text/javascript\">\n        window.onload = function() {\n\n            (function init(){\n                // init main view width\n                function setViewWidth() {\n                    var tabBar = 3;\n                    var view = document.getElementById('view');\n                    var w = window.innerWidth;\n                    view.style.width = w * tabBar + 'px'\n                }\n\n                setViewWidth();\n\n                // when window resize\n                window.onresize = setViewWidth;\n\n\n            }());\n\n\n            // regeister event handler\n            (function() {\n                // list toggle\n                var toggle = document.querySelectorAll('.expand');\n                var toggleA = toArray(toggle)\n                toggle.forEach(function(item){\n                    item.onclick = listToggle;\n                })\n\n                // star\n                var star = document.querySelectorAll('.star');\n                var starA = toArray(star);\n                starA.forEach(function(item){\n                    item.onclick = heart;\n                })\n\n                // tab bar\n                var tab = document.querySelectorAll('#tabBar div');\n                var tabA = toArray(tab);\n                tabA.forEach(function(item) {\n                    item.onclick = tabSwitch;\n                })\n\n                // tags\n                var tag = document.querySelectorAll('.tags span');\n                var tagA = toArray(tag);\n                tagA.forEach(function(item){\n                    item.onclick = tagToggle;\n                })\n            }());\n\n\n\n\n\n\n            // utils\n            function toArray(likeArray) {\n                return [].slice.call(likeArray,0);\n            }\n\n\n\n            // events\n            function listToggle(event) {\n                var t = this;\n                var icon = t.lastElementChild;\n                var text = t.firstElementChild;\n                var expandCotent = t.parentNode.parentNode.querySelector('.expand-content');\n                expandCotent.style.height = expandCotent.style.height === '0px' ? 'auto' : '0px';\n                text.innerHTML = text.innerHTML === '展开' ? '收起' : '展开';\n                icon.classList.toggle('fa-angle-up');\n                icon.classList.toggle('fa-angle-down');\n\n            }\n\n            function heart() {\n                this.lastElementChild.classList.toggle(\"heart\");\n                this.classList.toggle(\"heart\");\n            }\n\n            function tabSwitch() {\n                var index = this.dataset.dis;\n                var navText = this.dataset.navtext;\n                var view = document.getElementById('view');\n                var siblingA = toArray(this.parentNode.children);\n                var nav = document.getElementById('nav');\n                var items = document.querySelectorAll('.item');\n\n                // set main height\n                view.parentNode.style.height = items[index].offsetHeight + 'px';\n\n                siblingA.forEach(function(item){\n                    item.classList.remove('seletced');\n                })\n                this.classList.add('seletced');\n\n                nav.innerHTML = navText;\n\n                view.style.transform = 'translate3d(-' +  (index * (100/3)) +'%,0,0)';\n            }\n\n\n\n            function tagToggle(){\n                this.classList.toggle('seletced');\n\n                // ajax part\n            }\n\n        }\n\n\n    </script>\n</body>\n\n</html>\n","source":"_posts/prototype.md","raw":"---\nlayout: false\ntitle: prototype\ndate: 2016-11-04 23:05:56\ntags:\ndescription:\n---\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <link href=\"https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.css\" rel=\"stylesheet\">\n    <style>\n        * {\n            box-sizing: border-box;\n        }\n\n        body,\n        html,\n        ul {\n            margin: 0;\n            padding: 0;\n        }\n\n        li {\n            list-style: none;\n        }\n        .tabbar {\n            display: flex;\n            position: fixed;\n            bottom: 0;\n            width: 100%;\n            height: 70px;\n            align-items: center;\n            text-align: center;\n            justify-content: space-around;\n            box-shadow: 0 0px 5px rgba(0,0,0,0.3);\n            color: rgb(151, 152, 163);\n            background: rgba(255, 255, 255, 0.9);\n        }\n\n        .tabbar>div {\n            flex: 1;\n            display: flex;\n            flex-direction: column;\n        }\n\n        .tabbar>div i {\n            font-size: 25px;\n        }\n\n        .tabbar>div span {\n            font-size: 13px;\n        }\n\n        .seletced {\n            color: #e82c86;\n        }\n\n        .nav {\n            text-align: center;\n            height: 40px;\n            width: 100%;\n            line-height: 40px;\n            background: #fff;\n            font-size: 18px;\n            position: fixed;\n            top: 0;\n            left: 0;\n            z-index: 1;\n            box-shadow: 0 0 5px rgba(0,0,0,0.3)\n        }\n        main {\n            /*display: flex;*/\n            margin: 40px 0 70px 0;\n            overflow: hidden;\n        }\n        .view {\n            /*overflow: hidden;*/\n            transition: transform 300ms ease-in-out;\n        }\n        .item {\n            width: 33.3333333333%;\n            float: left;\n        }\n        /*.nav:after {\n                position: absolute;\n                content: '';\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 1em;\n                border-radius: 50%;\n                box-shadow: 0 1em 18px rgba(0,0,0,0.3);\n                z-index: -1;\n            }*/\n\n        .tags span {\n            display: inline-block;\n            padding: 4px 20px;\n            border: 1px solid #b6b3b3;\n            border-radius: 25px;\n            color: #b6b3b3;\n            margin-bottom: 10px;\n        }\n\n        .tags {\n            text-align: center;\n            padding: 20px 15px;\n        }\n\n        .tags header {\n            margin-bottom: 20px;\n        }\n\n        .tags span.seletced {\n            border-color: #e82c86;\n            background: #e82c86;\n            color: #fff;\n        }\n\n        .day {\n            margin-top: 20px;\n            background: #fff;\n        }\n\n        .news {\n            background: #f0f0f0;\n        }\n        .news-item {\n            padding: 5px 15px;\n            margin-bottom: 15px;\n        }\n\n        .expand-content {\n            overflow: hidden;\n            margin: 10px 0 0 0;\n        }\n\n        .operation {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            margin-top: 5px;\n            color: #999;\n        }\n\n        .date {\n            text-align: center;\n            color: #111;\n        }\n\n        .tail {\n            text-align: right;\n        }\n\n        .icon-heart {\n            color: #969499;\n        }\n        .heart {\n            color: #eb3d32\n        }\n        .my {\n            background: #fff;\n            padding: 10px;\n        }\n        .avatar {\n            text-align: center;\n            font-size: 18px;\n            font-weight: bold;\n        }\n        .avatar img {\n            width: 100px;\n            height: 100px;\n            border-radius: 50%;\n        }\n        .my li {\n            display: flex;\n            justify-content: space-between;\n            padding: 0 20px;\n            margin: 10px 0;\n            font-size: 20px;\n        }\n        .my i {\n            width: 20px;\n            text-align: left;\n        }\n    </style>\n\n</head>\n\n<body>\n    <header class=\"nav\" id=\"nav\">\n        资讯聚合\n    </header>\n    <main>\n        <div id=\"view\" class=\"view\">\n            <div class=\"news item\">\n                <section class=\"day\">\n                    <div class=\"date\">Nov.04 今天</div>\n                    <ul>\n                        <li class=\"news-item\">\n                            <div class=\"title\">\n                                今日气候变暖，请增添衣物，国庆放假，放假七天，增加长度\n                            </div>\n                            <div class=\"expand-content\" style=\"height: 0px\">\n                                Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem sint, modi veniam neque possimus praesentium deserunt obcaecati molestias quidem culpa.\n                            </div>\n                            <div class=\"tail\">\n                                ——&nbsp;&nbsp;<span>广东工业大学学生会</span>\n                            </div>\n                            <div class=\"operation\">\n                                <span class=\"expand\">\n                                        <span>展开</span>\n                                <i class=\"fa fa-angle-down\"></i></span>\n                                <span class=\"star\">收藏 <i class=\"fa fa-heart icon-heart\"></i></span>\n                            </div>\n                        </li>\n                        <li class=\"news-item\">\n                            <div class=\"right\">\n                                <div class=\"title\">\n                                    今日气候变暖，请增添衣物，国庆放假，放假七天，增加长度\n                                </div>\n                                <div class=\"expand-content\" style=\"height: 0px\">\n                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem sint, modi veniam neque possimus praesentium deserunt obcaecati molestias quidem culpa.\n                                </div>\n                                <div class=\"tail\">\n                                    ——&nbsp;&nbsp;<span>广东工业大学学生会</span>\n                                </div>\n                                <div class=\"operation\">\n                                    <span class=\"expand\">\n                                        <span>展开</span> <i class=\"fa fa-angle-down\"></i></span>\n                                    <span class=\"star\">收藏 <i class=\"fa fa-heart icon-heart\"></i></span>\n                                </div>\n                            </div>\n                        </li>\n                        <li class=\"news-item\">\n                            <div class=\"right\">\n                                <div class=\"title\">\n                                    今日气候变暖，请增添衣物，国庆放假，放假七天，增加长度\n                                </div>\n                                <div class=\"expand-content\" style=\"height: 0px\">\n                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem sint, modi veniam neque possimus praesentium deserunt obcaecati molestias quidem culpa.\n                                </div>\n                                <div class=\"tail\">\n                                    ——&nbsp;&nbsp;<span>广东工业大学学生会</span>\n                                </div>\n                                <div class=\"operation\">\n                                    <span class=\"expand\"><span>展开</span> <i class=\"fa fa-angle-down\"></i></span>\n                                    <span class=\"star\">收藏 <i class=\"fa fa-heart icon-heart\"></i></span>\n                                </div>\n                            </div>\n                        </li>\n                    </ul>\n                </section>\n                <section class=\"day\">\n                    <div class=\"date\">Nov.03 昨天</div>\n                    <ul>\n                        <li class=\"news-item\">\n                            <div class=\"right\">\n                                <div class=\"title\">\n                                    今日气候变暖，请增添衣物，国庆放假，放假七天，增加长度\n                                </div>\n                                <div class=\"expand-content\" style=\"height: 0px\">\n                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem sint, modi veniam neque possimus praesentium deserunt obcaecati molestias quidem culpa.\n                                </div>\n                                <div class=\"tail\">\n                                    ——&nbsp;&nbsp;<span>广东工业大学学生会</span>\n                                </div>\n                                <div class=\"operation\">\n                                    <span class=\"expand\"><span>展开</span> <i class=\"fa fa-angle-down\"></i></span>\n                                    <span class=\"star\">收藏 <i class=\"fa fa-heart icon-heart\"></i></span>\n                                </div>\n                            </div>\n                        </li>\n                        <li class=\"news-item\">\n                            <div class=\"right\">\n                                <div class=\"title\">\n                                    今日气候变暖，请增添衣物，国庆放假，放假七天，增加长度\n                                </div>\n                                <div class=\"expand-content\" style=\"height: 0px\">\n                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem sint, modi veniam neque possimus praesentium deserunt obcaecati molestias quidem culpa.\n                                </div>\n                                <div class=\"tail\">\n                                    ——&nbsp;&nbsp;<span>广东工业大学学生会</span>\n                                </div>\n                                <div class=\"operation\">\n                                    <span class=\"expand\"><span>展开</span> <i class=\"fa fa-angle-down\"></i></span>\n                                    <span class=\"star\">收藏 <i class=\"fa fa-heart icon-heart\"></i></span>\n                                </div>\n                            </div>\n                        </li>\n                        <li class=\"news-item\">\n                            <div class=\"right\">\n                                <div class=\"title\">\n                                    今日气候变暖，请增添衣物，国庆放假，放假七天，增加长度\n                                </div>\n                                <div class=\"expand-content\" style=\"height: 0px\">\n                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem sint, modi veniam neque possimus praesentium deserunt obcaecati molestias quidem culpa.\n                                </div>\n                                <div class=\"tail\">\n                                    ——&nbsp;&nbsp;<span>广东工业大学学生会</span>\n                                </div>\n                                <div class=\"operation\">\n                                    <span class=\"expand\">\n                                            <span>展开</span>\n                                    <i class=\"fa fa-angle-down\"></i></span>\n                                    <span class=\"star\">收藏 <i class=\"fa fa-heart icon-heart\"></i></span>\n                                </div>\n                            </div>\n                        </li>\n                    </ul>\n                </section>\n            </div>\n            <div class=\"tags item\">\n                <!-- <header>\n                    关注新内容\n                </header> -->\n                <span class=\"seletced\">宣讲会</span>\n                <span class=\"seletced\">羽毛球</span>\n                <span>篮球</span>\n                <span>晚会</span>\n                <span>比赛</span>\n                <span>校内通知</span>\n                <span>四六级</span>\n                <span>五饭</span>\n                <span>一饭</span>\n                <span>游泳</span>\n                <span>信工</span>\n                <span>二饭</span>\n                <span>三饭</span>\n                <span>广工</span>\n                <span>广美</span>\n                <span>大学城</span>\n                <span>实验</span>\n                <span>留学</span>\n                <span>兼职</span>\n                <span>美女</span>\n            </div>\n            <!-- <div class=\"discover item\">\n                <h1>this is discover</h1>\n            </div> -->\n            <div class=\"my item\">\n                <div class=\"avatar\">\n                    <img src=\"http://placehold.it/100/100/e82c86\" alt=\"\">\n                    <div class=\"username\">\n                        username\n                    </div>\n                </div>\n                <ul>\n                    <li>\n                        <span>\n                            <i class=\"fa fa-address-book\" style=\"color:#4eb828\"></i>\n                            我的资料\n                        </span>\n                        <i class=\"fa fa-angle-right\"></i>\n                    </li>\n                    <li>\n                        <span>\n                            <i class=\"fa fa-star\" style=\"color:#ecdf37\"></i>\n                            我的收藏\n                        </span>\n                        <i class=\"fa fa-angle-right\"></i>\n\n                    </li>\n                    <li>\n                        <span>\n                            <i class=\"fa fa-pencil\" style=\"color:#da4213\"></i>\n                            意见反馈\n                        </span>\n                        <i class=\"fa fa-angle-right\"></i>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </main>\n    <footer class=\"tabbar\" id=\"tabBar\">\n        <div class=\"seletced\"  data-dis=\"0\" data-navtext=\"资讯聚合\"><i class=\"fa fa-hashtag\"></i><span>资讯</span></div>\n        <div  data-dis=\"1\" data-navtext=\"管理标签\"><i class=\"fa fa-tag\"></i><span>标签</span></div>\n        <!-- <div  data-dis=\"2\" data-navtext=\"发现新内容\"><i class=\"fa fa-search\"></i><span>发现</span></div> -->\n        <div data-dis=\"2\" data-navtext=\"个人中心\"><i class=\"fa fa-user\" ></i><span>我的</span></div>\n    </footer>\n    <script type=\"text/javascript\">\n        window.onload = function() {\n\n            (function init(){\n                // init main view width\n                function setViewWidth() {\n                    var tabBar = 3;\n                    var view = document.getElementById('view');\n                    var w = window.innerWidth;\n                    view.style.width = w * tabBar + 'px'\n                }\n\n                setViewWidth();\n\n                // when window resize\n                window.onresize = setViewWidth;\n\n\n            }());\n\n\n            // regeister event handler\n            (function() {\n                // list toggle\n                var toggle = document.querySelectorAll('.expand');\n                var toggleA = toArray(toggle)\n                toggle.forEach(function(item){\n                    item.onclick = listToggle;\n                })\n\n                // star\n                var star = document.querySelectorAll('.star');\n                var starA = toArray(star);\n                starA.forEach(function(item){\n                    item.onclick = heart;\n                })\n\n                // tab bar\n                var tab = document.querySelectorAll('#tabBar div');\n                var tabA = toArray(tab);\n                tabA.forEach(function(item) {\n                    item.onclick = tabSwitch;\n                })\n\n                // tags\n                var tag = document.querySelectorAll('.tags span');\n                var tagA = toArray(tag);\n                tagA.forEach(function(item){\n                    item.onclick = tagToggle;\n                })\n            }());\n\n\n\n\n\n\n            // utils\n            function toArray(likeArray) {\n                return [].slice.call(likeArray,0);\n            }\n\n\n\n            // events\n            function listToggle(event) {\n                var t = this;\n                var icon = t.lastElementChild;\n                var text = t.firstElementChild;\n                var expandCotent = t.parentNode.parentNode.querySelector('.expand-content');\n                expandCotent.style.height = expandCotent.style.height === '0px' ? 'auto' : '0px';\n                text.innerHTML = text.innerHTML === '展开' ? '收起' : '展开';\n                icon.classList.toggle('fa-angle-up');\n                icon.classList.toggle('fa-angle-down');\n\n            }\n\n            function heart() {\n                this.lastElementChild.classList.toggle(\"heart\");\n                this.classList.toggle(\"heart\");\n            }\n\n            function tabSwitch() {\n                var index = this.dataset.dis;\n                var navText = this.dataset.navtext;\n                var view = document.getElementById('view');\n                var siblingA = toArray(this.parentNode.children);\n                var nav = document.getElementById('nav');\n                var items = document.querySelectorAll('.item');\n\n                // set main height\n                view.parentNode.style.height = items[index].offsetHeight + 'px';\n\n                siblingA.forEach(function(item){\n                    item.classList.remove('seletced');\n                })\n                this.classList.add('seletced');\n\n                nav.innerHTML = navText;\n\n                view.style.transform = 'translate3d(-' +  (index * (100/3)) +'%,0,0)';\n            }\n\n\n\n            function tagToggle(){\n                this.classList.toggle('seletced');\n\n                // ajax part\n            }\n\n        }\n\n\n    </script>\n</body>\n\n</html>\n","slug":"prototype","published":1,"updated":"2016-11-04T15:06:35.032Z","comments":1,"photos":[],"link":"","_id":"civ3wzslp000wn9fkzily1rgz","content":"<p>&lt;!DOCTYPE html&gt;</p>\n<html lang=\"en\"><br><br><head><br>    <meta charset=\"UTF-8\"><br>    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><br>    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"><br>    <title>Document</title><br>    <link href=\"https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.css\" rel=\"stylesheet\"><br>    <style><br>        <em> {<br>            box-sizing: border-box;<br>        }<br><br>        body,<br>        html,<br>        ul {<br>            margin: 0;<br>            padding: 0;<br>        }<br><br>        li {<br>            list-style: none;<br>        }<br>        .tabbar {<br>            display: flex;<br>            position: fixed;<br>            bottom: 0;<br>            width: 100%;<br>            height: 70px;<br>            align-items: center;<br>            text-align: center;<br>            justify-content: space-around;<br>            box-shadow: 0 0px 5px rgba(0,0,0,0.3);<br>            color: rgb(151, 152, 163);<br>            background: rgba(255, 255, 255, 0.9);<br>        }<br><br>        .tabbar&gt;div {<br>            flex: 1;<br>            display: flex;<br>            flex-direction: column;<br>        }<br><br>        .tabbar&gt;div i {<br>            font-size: 25px;<br>        }<br><br>        .tabbar&gt;div span {<br>            font-size: 13px;<br>        }<br><br>        .seletced {<br>            color: #e82c86;<br>        }<br><br>        .nav {<br>            text-align: center;<br>            height: 40px;<br>            width: 100%;<br>            line-height: 40px;<br>            background: #fff;<br>            font-size: 18px;<br>            position: fixed;<br>            top: 0;<br>            left: 0;<br>            z-index: 1;<br>            box-shadow: 0 0 5px rgba(0,0,0,0.3)<br>        }<br>        main {<br>            /</em>display: flex;<em>/<br>            margin: 40px 0 70px 0;<br>            overflow: hidden;<br>        }<br>        .view {<br>            /</em>overflow: hidden;<em>/<br>            transition: transform 300ms ease-in-out;<br>        }<br>        .item {<br>            width: 33.3333333333%;<br>            float: left;<br>        }<br>        /</em>.nav:after {<br>                position: absolute;<br>                content: ‘’;<br>                top: 0;<br>                left: 0;<br>                right: 0;<br>                bottom: 1em;<br>                border-radius: 50%;<br>                box-shadow: 0 1em 18px rgba(0,0,0,0.3);<br>                z-index: -1;<br>            }<em>/<br><br>        .tags span {<br>            display: inline-block;<br>            padding: 4px 20px;<br>            border: 1px solid #b6b3b3;<br>            border-radius: 25px;<br>            color: #b6b3b3;<br>            margin-bottom: 10px;<br>        }<br><br>        .tags {<br>            text-align: center;<br>            padding: 20px 15px;<br>        }<br><br>        .tags header {<br>            margin-bottom: 20px;<br>        }<br><br>        .tags span.seletced {<br>            border-color: #e82c86;<br>            background: #e82c86;<br>            color: #fff;<br>        }<br><br>        .day {<br>            margin-top: 20px;<br>            background: #fff;<br>        }<br><br>        .news {<br>            background: #f0f0f0;<br>        }<br>        .news-item {<br>            padding: 5px 15px;<br>            margin-bottom: 15px;<br>        }<br><br>        .expand-content {<br>            overflow: hidden;<br>            margin: 10px 0 0 0;<br>        }<br><br>        .operation {<br>            display: flex;<br>            align-items: center;<br>            justify-content: space-between;<br>            margin-top: 5px;<br>            color: #999;<br>        }<br><br>        .date {<br>            text-align: center;<br>            color: #111;<br>        }<br><br>        .tail {<br>            text-align: right;<br>        }<br><br>        .icon-heart {<br>            color: #969499;<br>        }<br>        .heart {<br>            color: #eb3d32<br>        }<br>        .my {<br>            background: #fff;<br>            padding: 10px;<br>        }<br>        .avatar {<br>            text-align: center;<br>            font-size: 18px;<br>            font-weight: bold;<br>        }<br>        .avatar img {<br>            width: 100px;<br>            height: 100px;<br>            border-radius: 50%;<br>        }<br>        .my li {<br>            display: flex;<br>            justify-content: space-between;<br>            padding: 0 20px;<br>            margin: 10px 0;<br>            font-size: 20px;<br>        }<br>        .my i {<br>            width: 20px;<br>            text-align: left;<br>        }<br>    </style><br><br></head><br><br><body><br>    <header class=\"nav\" id=\"nav\"><br>        资讯聚合<br>    </header><br>    <main><br>        <div id=\"view\" class=\"view\"><br>            <div class=\"news item\"><br>                <section class=\"day\"><br>                    <div class=\"date\">Nov.04 今天</div><br>                    <ul><br>                        <li class=\"news-item\"><br>                            <div class=\"title\"><br>                                今日气候变暖，请增添衣物，国庆放假，放假七天，增加长度<br>                            </div><br>                            <div class=\"expand-content\" style=\"height: 0px\"><br>                                Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem sint, modi veniam neque possimus praesentium deserunt obcaecati molestias quidem culpa.<br>                            </div><br>                            <div class=\"tail\"><br>                                ——&nbsp;&nbsp;<span>广东工业大学学生会</span><br>                            </div><br>                            <div class=\"operation\"><br>                                <span class=\"expand\"><br>                                        <span>展开</span><br>                                <i class=\"fa fa-angle-down\"></i></span><br>                                <span class=\"star\">收藏 <i class=\"fa fa-heart icon-heart\"></i></span><br>                            </div><br>                        </li><br>                        <li class=\"news-item\"><br>                            <div class=\"right\"><br>                                <div class=\"title\"><br>                                    今日气候变暖，请增添衣物，国庆放假，放假七天，增加长度<br>                                </div><br>                                <div class=\"expand-content\" style=\"height: 0px\"><br>                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem sint, modi veniam neque possimus praesentium deserunt obcaecati molestias quidem culpa.<br>                                </div><br>                                <div class=\"tail\"><br>                                    ——&nbsp;&nbsp;<span>广东工业大学学生会</span><br>                                </div><br>                                <div class=\"operation\"><br>                                    <span class=\"expand\"><br>                                        <span>展开</span> <i class=\"fa fa-angle-down\"></i></span><br>                                    <span class=\"star\">收藏 <i class=\"fa fa-heart icon-heart\"></i></span><br>                                </div><br>                            </div><br>                        </li><br>                        <li class=\"news-item\"><br>                            <div class=\"right\"><br>                                <div class=\"title\"><br>                                    今日气候变暖，请增添衣物，国庆放假，放假七天，增加长度<br>                                </div><br>                                <div class=\"expand-content\" style=\"height: 0px\"><br>                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem sint, modi veniam neque possimus praesentium deserunt obcaecati molestias quidem culpa.<br>                                </div><br>                                <div class=\"tail\"><br>                                    ——&nbsp;&nbsp;<span>广东工业大学学生会</span><br>                                </div><br>                                <div class=\"operation\"><br>                                    <span class=\"expand\"><span>展开</span> <i class=\"fa fa-angle-down\"></i></span><br>                                    <span class=\"star\">收藏 <i class=\"fa fa-heart icon-heart\"></i></span><br>                                </div><br>                            </div><br>                        </li><br>                    </ul><br>                </section><br>                <section class=\"day\"><br>                    <div class=\"date\">Nov.03 昨天</div><br>                    <ul><br>                        <li class=\"news-item\"><br>                            <div class=\"right\"><br>                                <div class=\"title\"><br>                                    今日气候变暖，请增添衣物，国庆放假，放假七天，增加长度<br>                                </div><br>                                <div class=\"expand-content\" style=\"height: 0px\"><br>                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem sint, modi veniam neque possimus praesentium deserunt obcaecati molestias quidem culpa.<br>                                </div><br>                                <div class=\"tail\"><br>                                    ——&nbsp;&nbsp;<span>广东工业大学学生会</span><br>                                </div><br>                                <div class=\"operation\"><br>                                    <span class=\"expand\"><span>展开</span> <i class=\"fa fa-angle-down\"></i></span><br>                                    <span class=\"star\">收藏 <i class=\"fa fa-heart icon-heart\"></i></span><br>                                </div><br>                            </div><br>                        </li><br>                        <li class=\"news-item\"><br>                            <div class=\"right\"><br>                                <div class=\"title\"><br>                                    今日气候变暖，请增添衣物，国庆放假，放假七天，增加长度<br>                                </div><br>                                <div class=\"expand-content\" style=\"height: 0px\"><br>                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem sint, modi veniam neque possimus praesentium deserunt obcaecati molestias quidem culpa.<br>                                </div><br>                                <div class=\"tail\"><br>                                    ——&nbsp;&nbsp;<span>广东工业大学学生会</span><br>                                </div><br>                                <div class=\"operation\"><br>                                    <span class=\"expand\"><span>展开</span> <i class=\"fa fa-angle-down\"></i></span><br>                                    <span class=\"star\">收藏 <i class=\"fa fa-heart icon-heart\"></i></span><br>                                </div><br>                            </div><br>                        </li><br>                        <li class=\"news-item\"><br>                            <div class=\"right\"><br>                                <div class=\"title\"><br>                                    今日气候变暖，请增添衣物，国庆放假，放假七天，增加长度<br>                                </div><br>                                <div class=\"expand-content\" style=\"height: 0px\"><br>                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem sint, modi veniam neque possimus praesentium deserunt obcaecati molestias quidem culpa.<br>                                </div><br>                                <div class=\"tail\"><br>                                    ——&nbsp;&nbsp;<span>广东工业大学学生会</span><br>                                </div><br>                                <div class=\"operation\"><br>                                    <span class=\"expand\"><br>                                            <span>展开</span><br>                                    <i class=\"fa fa-angle-down\"></i></span><br>                                    <span class=\"star\">收藏 <i class=\"fa fa-heart icon-heart\"></i></span><br>                                </div><br>                            </div><br>                        </li><br>                    </ul><br>                </section><br>            </div><br>            <div class=\"tags item\"><br>                <!-- <header>\n                    关注新内容\n                </header> --><br>                <span class=\"seletced\">宣讲会</span><br>                <span class=\"seletced\">羽毛球</span><br>                <span>篮球</span><br>                <span>晚会</span><br>                <span>比赛</span><br>                <span>校内通知</span><br>                <span>四六级</span><br>                <span>五饭</span><br>                <span>一饭</span><br>                <span>游泳</span><br>                <span>信工</span><br>                <span>二饭</span><br>                <span>三饭</span><br>                <span>广工</span><br>                <span>广美</span><br>                <span>大学城</span><br>                <span>实验</span><br>                <span>留学</span><br>                <span>兼职</span><br>                <span>美女</span><br>            </div><br>            <!-- <div class=\"discover item\">\n                <h1>this is discover</h1>\n            </div> --><br>            <div class=\"my item\"><br>                <div class=\"avatar\"><br>                    <img src=\"http://placehold.it/100/100/e82c86\" alt=\"\"><br>                    <div class=\"username\"><br>                        username<br>                    </div><br>                </div><br>                <ul><br>                    <li><br>                        <span><br>                            <i class=\"fa fa-address-book\" style=\"color:#4eb828\"></i><br>                            我的资料<br>                        </span><br>                        <i class=\"fa fa-angle-right\"></i><br>                    </li><br>                    <li><br>                        <span><br>                            <i class=\"fa fa-star\" style=\"color:#ecdf37\"></i><br>                            我的收藏<br>                        </span><br>                        <i class=\"fa fa-angle-right\"></i><br><br>                    </li><br>                    <li><br>                        <span><br>                            <i class=\"fa fa-pencil\" style=\"color:#da4213\"></i><br>                            意见反馈<br>                        </span><br>                        <i class=\"fa fa-angle-right\"></i><br>                    </li><br>                </ul><br>            </div><br>        </div><br>    </main><br>    <footer class=\"tabbar\" id=\"tabBar\"><br>        <div class=\"seletced\" data-dis=\"0\" data-navtext=\"资讯聚合\"><i class=\"fa fa-hashtag\"></i><span>资讯</span></div><br>        <div data-dis=\"1\" data-navtext=\"管理标签\"><i class=\"fa fa-tag\"></i><span>标签</span></div><br>        <!-- <div  data-dis=\"2\" data-navtext=\"发现新内容\"><i class=\"fa fa-search\"></i><span>发现</span></div> --><br>        <div data-dis=\"2\" data-navtext=\"个人中心\"><i class=\"fa fa-user\"></i><span>我的</span></div><br>    </footer><br>    <script type=\"text/javascript\"><br>        window.onload = function() {<br><br>            (function init(){<br>                // init main view width<br>                function setViewWidth() {<br>                    var tabBar = 3;<br>                    var view = document.getElementById(‘view’);<br>                    var w = window.innerWidth;<br>                    view.style.width = w </em> tabBar + ‘px’<br>                }<br><br>                setViewWidth();<br><br>                // when window resize<br>                window.onresize = setViewWidth;<br><br><br>            }());<br><br><br>            // regeister event handler<br>            (function() {<br>                // list toggle<br>                var toggle = document.querySelectorAll(‘.expand’);<br>                var toggleA = toArray(toggle)<br>                toggle.forEach(function(item){<br>                    item.onclick = listToggle;<br>                })<br><br>                // star<br>                var star = document.querySelectorAll(‘.star’);<br>                var starA = toArray(star);<br>                starA.forEach(function(item){<br>                    item.onclick = heart;<br>                })<br><br>                // tab bar<br>                var tab = document.querySelectorAll(‘#tabBar div’);<br>                var tabA = toArray(tab);<br>                tabA.forEach(function(item) {<br>                    item.onclick = tabSwitch;<br>                })<br><br>                // tags<br>                var tag = document.querySelectorAll(‘.tags span’);<br>                var tagA = toArray(tag);<br>                tagA.forEach(function(item){<br>                    item.onclick = tagToggle;<br>                })<br>            }());<br><br><br><br><br><br><br>            // utils<br>            function toArray(likeArray) {<br>                return [].slice.call(likeArray,0);<br>            }<br><br><br><br>            // events<br>            function listToggle(event) {<br>                var t = this;<br>                var icon = t.lastElementChild;<br>                var text = t.firstElementChild;<br>                var expandCotent = t.parentNode.parentNode.querySelector(‘.expand-content’);<br>                expandCotent.style.height = expandCotent.style.height === ‘0px’ ? ‘auto’ : ‘0px’;<br>                text.innerHTML = text.innerHTML === ‘展开’ ? ‘收起’ : ‘展开’;<br>                icon.classList.toggle(‘fa-angle-up’);<br>                icon.classList.toggle(‘fa-angle-down’);<br><br>            }<br><br>            function heart() {<br>                this.lastElementChild.classList.toggle(“heart”);<br>                this.classList.toggle(“heart”);<br>            }<br><br>            function tabSwitch() {<br>                var index = this.dataset.dis;<br>                var navText = this.dataset.navtext;<br>                var view = document.getElementById(‘view’);<br>                var siblingA = toArray(this.parentNode.children);<br>                var nav = document.getElementById(‘nav’);<br>                var items = document.querySelectorAll(‘.item’);<br><br>                // set main height<br>                view.parentNode.style.height = items[index].offsetHeight + ‘px’;<br><br>                siblingA.forEach(function(item){<br>                    item.classList.remove(‘seletced’);<br>                })<br>                this.classList.add(‘seletced’);<br><br>                nav.innerHTML = navText;<br><br>                view.style.transform = ‘translate3d(-‘ +  (index * (100/3)) +’%,0,0)’;<br>            }<br><br><br><br>            function tagToggle(){<br>                this.classList.toggle(‘seletced’);<br><br>                // ajax part<br>            }<br><br>        }<br><br><br>    </script><br></body><br><br></html>\n","excerpt":"","more":"<p>&lt;!DOCTYPE html&gt;</p>\n<html lang=\"en\"><br><br><head><br>    <meta charset=\"UTF-8\"><br>    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><br>    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"><br>    <title>Document</title><br>    <link href=\"https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.css\" rel=\"stylesheet\"><br>    <style><br>        <em> {<br>            box-sizing: border-box;<br>        }<br><br>        body,<br>        html,<br>        ul {<br>            margin: 0;<br>            padding: 0;<br>        }<br><br>        li {<br>            list-style: none;<br>        }<br>        .tabbar {<br>            display: flex;<br>            position: fixed;<br>            bottom: 0;<br>            width: 100%;<br>            height: 70px;<br>            align-items: center;<br>            text-align: center;<br>            justify-content: space-around;<br>            box-shadow: 0 0px 5px rgba(0,0,0,0.3);<br>            color: rgb(151, 152, 163);<br>            background: rgba(255, 255, 255, 0.9);<br>        }<br><br>        .tabbar&gt;div {<br>            flex: 1;<br>            display: flex;<br>            flex-direction: column;<br>        }<br><br>        .tabbar&gt;div i {<br>            font-size: 25px;<br>        }<br><br>        .tabbar&gt;div span {<br>            font-size: 13px;<br>        }<br><br>        .seletced {<br>            color: #e82c86;<br>        }<br><br>        .nav {<br>            text-align: center;<br>            height: 40px;<br>            width: 100%;<br>            line-height: 40px;<br>            background: #fff;<br>            font-size: 18px;<br>            position: fixed;<br>            top: 0;<br>            left: 0;<br>            z-index: 1;<br>            box-shadow: 0 0 5px rgba(0,0,0,0.3)<br>        }<br>        main {<br>            /</em>display: flex;<em>/<br>            margin: 40px 0 70px 0;<br>            overflow: hidden;<br>        }<br>        .view {<br>            /</em>overflow: hidden;<em>/<br>            transition: transform 300ms ease-in-out;<br>        }<br>        .item {<br>            width: 33.3333333333%;<br>            float: left;<br>        }<br>        /</em>.nav:after {<br>                position: absolute;<br>                content: ‘’;<br>                top: 0;<br>                left: 0;<br>                right: 0;<br>                bottom: 1em;<br>                border-radius: 50%;<br>                box-shadow: 0 1em 18px rgba(0,0,0,0.3);<br>                z-index: -1;<br>            }<em>/<br><br>        .tags span {<br>            display: inline-block;<br>            padding: 4px 20px;<br>            border: 1px solid #b6b3b3;<br>            border-radius: 25px;<br>            color: #b6b3b3;<br>            margin-bottom: 10px;<br>        }<br><br>        .tags {<br>            text-align: center;<br>            padding: 20px 15px;<br>        }<br><br>        .tags header {<br>            margin-bottom: 20px;<br>        }<br><br>        .tags span.seletced {<br>            border-color: #e82c86;<br>            background: #e82c86;<br>            color: #fff;<br>        }<br><br>        .day {<br>            margin-top: 20px;<br>            background: #fff;<br>        }<br><br>        .news {<br>            background: #f0f0f0;<br>        }<br>        .news-item {<br>            padding: 5px 15px;<br>            margin-bottom: 15px;<br>        }<br><br>        .expand-content {<br>            overflow: hidden;<br>            margin: 10px 0 0 0;<br>        }<br><br>        .operation {<br>            display: flex;<br>            align-items: center;<br>            justify-content: space-between;<br>            margin-top: 5px;<br>            color: #999;<br>        }<br><br>        .date {<br>            text-align: center;<br>            color: #111;<br>        }<br><br>        .tail {<br>            text-align: right;<br>        }<br><br>        .icon-heart {<br>            color: #969499;<br>        }<br>        .heart {<br>            color: #eb3d32<br>        }<br>        .my {<br>            background: #fff;<br>            padding: 10px;<br>        }<br>        .avatar {<br>            text-align: center;<br>            font-size: 18px;<br>            font-weight: bold;<br>        }<br>        .avatar img {<br>            width: 100px;<br>            height: 100px;<br>            border-radius: 50%;<br>        }<br>        .my li {<br>            display: flex;<br>            justify-content: space-between;<br>            padding: 0 20px;<br>            margin: 10px 0;<br>            font-size: 20px;<br>        }<br>        .my i {<br>            width: 20px;<br>            text-align: left;<br>        }<br>    </style><br><br></head><br><br><body><br>    <header class=\"nav\" id=\"nav\"><br>        资讯聚合<br>    </header><br>    <main><br>        <div id=\"view\" class=\"view\"><br>            <div class=\"news item\"><br>                <section class=\"day\"><br>                    <div class=\"date\">Nov.04 今天</div><br>                    <ul><br>                        <li class=\"news-item\"><br>                            <div class=\"title\"><br>                                今日气候变暖，请增添衣物，国庆放假，放假七天，增加长度<br>                            </div><br>                            <div class=\"expand-content\" style=\"height: 0px\"><br>                                Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem sint, modi veniam neque possimus praesentium deserunt obcaecati molestias quidem culpa.<br>                            </div><br>                            <div class=\"tail\"><br>                                ——&nbsp;&nbsp;<span>广东工业大学学生会</span><br>                            </div><br>                            <div class=\"operation\"><br>                                <span class=\"expand\"><br>                                        <span>展开</span><br>                                <i class=\"fa fa-angle-down\"></i></span><br>                                <span class=\"star\">收藏 <i class=\"fa fa-heart icon-heart\"></i></span><br>                            </div><br>                        </li><br>                        <li class=\"news-item\"><br>                            <div class=\"right\"><br>                                <div class=\"title\"><br>                                    今日气候变暖，请增添衣物，国庆放假，放假七天，增加长度<br>                                </div><br>                                <div class=\"expand-content\" style=\"height: 0px\"><br>                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem sint, modi veniam neque possimus praesentium deserunt obcaecati molestias quidem culpa.<br>                                </div><br>                                <div class=\"tail\"><br>                                    ——&nbsp;&nbsp;<span>广东工业大学学生会</span><br>                                </div><br>                                <div class=\"operation\"><br>                                    <span class=\"expand\"><br>                                        <span>展开</span> <i class=\"fa fa-angle-down\"></i></span><br>                                    <span class=\"star\">收藏 <i class=\"fa fa-heart icon-heart\"></i></span><br>                                </div><br>                            </div><br>                        </li><br>                        <li class=\"news-item\"><br>                            <div class=\"right\"><br>                                <div class=\"title\"><br>                                    今日气候变暖，请增添衣物，国庆放假，放假七天，增加长度<br>                                </div><br>                                <div class=\"expand-content\" style=\"height: 0px\"><br>                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem sint, modi veniam neque possimus praesentium deserunt obcaecati molestias quidem culpa.<br>                                </div><br>                                <div class=\"tail\"><br>                                    ——&nbsp;&nbsp;<span>广东工业大学学生会</span><br>                                </div><br>                                <div class=\"operation\"><br>                                    <span class=\"expand\"><span>展开</span> <i class=\"fa fa-angle-down\"></i></span><br>                                    <span class=\"star\">收藏 <i class=\"fa fa-heart icon-heart\"></i></span><br>                                </div><br>                            </div><br>                        </li><br>                    </ul><br>                </section><br>                <section class=\"day\"><br>                    <div class=\"date\">Nov.03 昨天</div><br>                    <ul><br>                        <li class=\"news-item\"><br>                            <div class=\"right\"><br>                                <div class=\"title\"><br>                                    今日气候变暖，请增添衣物，国庆放假，放假七天，增加长度<br>                                </div><br>                                <div class=\"expand-content\" style=\"height: 0px\"><br>                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem sint, modi veniam neque possimus praesentium deserunt obcaecati molestias quidem culpa.<br>                                </div><br>                                <div class=\"tail\"><br>                                    ——&nbsp;&nbsp;<span>广东工业大学学生会</span><br>                                </div><br>                                <div class=\"operation\"><br>                                    <span class=\"expand\"><span>展开</span> <i class=\"fa fa-angle-down\"></i></span><br>                                    <span class=\"star\">收藏 <i class=\"fa fa-heart icon-heart\"></i></span><br>                                </div><br>                            </div><br>                        </li><br>                        <li class=\"news-item\"><br>                            <div class=\"right\"><br>                                <div class=\"title\"><br>                                    今日气候变暖，请增添衣物，国庆放假，放假七天，增加长度<br>                                </div><br>                                <div class=\"expand-content\" style=\"height: 0px\"><br>                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem sint, modi veniam neque possimus praesentium deserunt obcaecati molestias quidem culpa.<br>                                </div><br>                                <div class=\"tail\"><br>                                    ——&nbsp;&nbsp;<span>广东工业大学学生会</span><br>                                </div><br>                                <div class=\"operation\"><br>                                    <span class=\"expand\"><span>展开</span> <i class=\"fa fa-angle-down\"></i></span><br>                                    <span class=\"star\">收藏 <i class=\"fa fa-heart icon-heart\"></i></span><br>                                </div><br>                            </div><br>                        </li><br>                        <li class=\"news-item\"><br>                            <div class=\"right\"><br>                                <div class=\"title\"><br>                                    今日气候变暖，请增添衣物，国庆放假，放假七天，增加长度<br>                                </div><br>                                <div class=\"expand-content\" style=\"height: 0px\"><br>                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem sint, modi veniam neque possimus praesentium deserunt obcaecati molestias quidem culpa.<br>                                </div><br>                                <div class=\"tail\"><br>                                    ——&nbsp;&nbsp;<span>广东工业大学学生会</span><br>                                </div><br>                                <div class=\"operation\"><br>                                    <span class=\"expand\"><br>                                            <span>展开</span><br>                                    <i class=\"fa fa-angle-down\"></i></span><br>                                    <span class=\"star\">收藏 <i class=\"fa fa-heart icon-heart\"></i></span><br>                                </div><br>                            </div><br>                        </li><br>                    </ul><br>                </section><br>            </div><br>            <div class=\"tags item\"><br>                <!-- <header>\n                    关注新内容\n                </header> --><br>                <span class=\"seletced\">宣讲会</span><br>                <span class=\"seletced\">羽毛球</span><br>                <span>篮球</span><br>                <span>晚会</span><br>                <span>比赛</span><br>                <span>校内通知</span><br>                <span>四六级</span><br>                <span>五饭</span><br>                <span>一饭</span><br>                <span>游泳</span><br>                <span>信工</span><br>                <span>二饭</span><br>                <span>三饭</span><br>                <span>广工</span><br>                <span>广美</span><br>                <span>大学城</span><br>                <span>实验</span><br>                <span>留学</span><br>                <span>兼职</span><br>                <span>美女</span><br>            </div><br>            <!-- <div class=\"discover item\">\n                <h1>this is discover</h1>\n            </div> --><br>            <div class=\"my item\"><br>                <div class=\"avatar\"><br>                    <img src=\"http://placehold.it/100/100/e82c86\" alt=\"\"><br>                    <div class=\"username\"><br>                        username<br>                    </div><br>                </div><br>                <ul><br>                    <li><br>                        <span><br>                            <i class=\"fa fa-address-book\" style=\"color:#4eb828\"></i><br>                            我的资料<br>                        </span><br>                        <i class=\"fa fa-angle-right\"></i><br>                    </li><br>                    <li><br>                        <span><br>                            <i class=\"fa fa-star\" style=\"color:#ecdf37\"></i><br>                            我的收藏<br>                        </span><br>                        <i class=\"fa fa-angle-right\"></i><br><br>                    </li><br>                    <li><br>                        <span><br>                            <i class=\"fa fa-pencil\" style=\"color:#da4213\"></i><br>                            意见反馈<br>                        </span><br>                        <i class=\"fa fa-angle-right\"></i><br>                    </li><br>                </ul><br>            </div><br>        </div><br>    </main><br>    <footer class=\"tabbar\" id=\"tabBar\"><br>        <div class=\"seletced\"  data-dis=\"0\" data-navtext=\"资讯聚合\"><i class=\"fa fa-hashtag\"></i><span>资讯</span></div><br>        <div  data-dis=\"1\" data-navtext=\"管理标签\"><i class=\"fa fa-tag\"></i><span>标签</span></div><br>        <!-- <div  data-dis=\"2\" data-navtext=\"发现新内容\"><i class=\"fa fa-search\"></i><span>发现</span></div> --><br>        <div data-dis=\"2\" data-navtext=\"个人中心\"><i class=\"fa fa-user\" ></i><span>我的</span></div><br>    </footer><br>    <script type=\"text/javascript\"><br>        window.onload = function() {<br><br>            (function init(){<br>                // init main view width<br>                function setViewWidth() {<br>                    var tabBar = 3;<br>                    var view = document.getElementById(‘view’);<br>                    var w = window.innerWidth;<br>                    view.style.width = w </em> tabBar + ‘px’<br>                }<br><br>                setViewWidth();<br><br>                // when window resize<br>                window.onresize = setViewWidth;<br><br><br>            }());<br><br><br>            // regeister event handler<br>            (function() {<br>                // list toggle<br>                var toggle = document.querySelectorAll(‘.expand’);<br>                var toggleA = toArray(toggle)<br>                toggle.forEach(function(item){<br>                    item.onclick = listToggle;<br>                })<br><br>                // star<br>                var star = document.querySelectorAll(‘.star’);<br>                var starA = toArray(star);<br>                starA.forEach(function(item){<br>                    item.onclick = heart;<br>                })<br><br>                // tab bar<br>                var tab = document.querySelectorAll(‘#tabBar div’);<br>                var tabA = toArray(tab);<br>                tabA.forEach(function(item) {<br>                    item.onclick = tabSwitch;<br>                })<br><br>                // tags<br>                var tag = document.querySelectorAll(‘.tags span’);<br>                var tagA = toArray(tag);<br>                tagA.forEach(function(item){<br>                    item.onclick = tagToggle;<br>                })<br>            }());<br><br><br><br><br><br><br>            // utils<br>            function toArray(likeArray) {<br>                return [].slice.call(likeArray,0);<br>            }<br><br><br><br>            // events<br>            function listToggle(event) {<br>                var t = this;<br>                var icon = t.lastElementChild;<br>                var text = t.firstElementChild;<br>                var expandCotent = t.parentNode.parentNode.querySelector(‘.expand-content’);<br>                expandCotent.style.height = expandCotent.style.height === ‘0px’ ? ‘auto’ : ‘0px’;<br>                text.innerHTML = text.innerHTML === ‘展开’ ? ‘收起’ : ‘展开’;<br>                icon.classList.toggle(‘fa-angle-up’);<br>                icon.classList.toggle(‘fa-angle-down’);<br><br>            }<br><br>            function heart() {<br>                this.lastElementChild.classList.toggle(“heart”);<br>                this.classList.toggle(“heart”);<br>            }<br><br>            function tabSwitch() {<br>                var index = this.dataset.dis;<br>                var navText = this.dataset.navtext;<br>                var view = document.getElementById(‘view’);<br>                var siblingA = toArray(this.parentNode.children);<br>                var nav = document.getElementById(‘nav’);<br>                var items = document.querySelectorAll(‘.item’);<br><br>                // set main height<br>                view.parentNode.style.height = items[index].offsetHeight + ‘px’;<br><br>                siblingA.forEach(function(item){<br>                    item.classList.remove(‘seletced’);<br>                })<br>                this.classList.add(‘seletced’);<br><br>                nav.innerHTML = navText;<br><br>                view.style.transform = ‘translate3d(-‘ +  (index * (100/3)) +’%,0,0)’;<br>            }<br><br><br><br>            function tagToggle(){<br>                this.classList.toggle(‘seletced’);<br><br>                // ajax part<br>            }<br><br>        }<br><br><br>    </script><br></body><br><br></html>\n"},{"layout":"post","title":"Markdown常用语法","description":"Markdown是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档。","_content":"\n## markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档。这里记录下常用的markdown语法，便于查看和使用。\n\n### 标题 <sapn id=\"1.1\"></span>\n\n```\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n\n#### 无序列表\n\n```\n- Tips\n- 这里有空格\n- 前面有一个空格\n```\n\n### 有序列表\n\n```\n1. Tips\n2. 这里有空格\n3. 前面有一个空格\n```\n\n### 文字链接\n\n```\n[链接文字放这里](链接放这里，注意是括号，不是花括号)\n```\n\n### 插入图片\n\n```\n![图片显示不出的替代文字，可选](URL放这里“图片title”)\n```\n\n### 代码块\n\n```\n```<language type>\n<p>多行代码<p>\n<p>多行</p>\n<p>多</p>\n```\n\n### 单个代码\n\n```html\n`code`\n```\n\n### 引用\n\n```\n>引用文字放这里\n```\n\n### 斜体\n\n```\n*斜体文字放这里,一颗星*\n```\n\n### 粗体\n\n```\n**粗体文字放这里，两颗星**\n```\n\n### 粗斜体\n\n```\n***粗斜体文字放这里，三颗星***\n```\n\n### 表格\n\n|表格头|第二行确定align对齐|如果第二行不设置额外对齐就默认是左对齐|\n|----|:-----:|-----:|\n|第一|第二|第三|\n|列是|列是|列是|\n|默认左对齐|居中|右对齐|\n\n### markdown页面跳转和目录\n\n示例\n\n*后有空格,空格缩进产生目录结构,标准markdown支持页面内跳转，github markdown貌似不支持，待跟新\n\n* [1.markdown语法](#1)\n * [1.1标题](#1.1)\n * [1.2无需列表](#1.2)\n * [1.3有序列表](#1.3)\n\n<span name=\"1\"></span>\n","source":"_posts/Markdown常用语法.md","raw":"---\nlayout: post\ntitle: Markdown常用语法\ndescription: Markdown是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档。\n---\n\n## markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档。这里记录下常用的markdown语法，便于查看和使用。\n\n### 标题 <sapn id=\"1.1\"></span>\n\n```\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n\n#### 无序列表\n\n```\n- Tips\n- 这里有空格\n- 前面有一个空格\n```\n\n### 有序列表\n\n```\n1. Tips\n2. 这里有空格\n3. 前面有一个空格\n```\n\n### 文字链接\n\n```\n[链接文字放这里](链接放这里，注意是括号，不是花括号)\n```\n\n### 插入图片\n\n```\n![图片显示不出的替代文字，可选](URL放这里“图片title”)\n```\n\n### 代码块\n\n```\n```<language type>\n<p>多行代码<p>\n<p>多行</p>\n<p>多</p>\n```\n\n### 单个代码\n\n```html\n`code`\n```\n\n### 引用\n\n```\n>引用文字放这里\n```\n\n### 斜体\n\n```\n*斜体文字放这里,一颗星*\n```\n\n### 粗体\n\n```\n**粗体文字放这里，两颗星**\n```\n\n### 粗斜体\n\n```\n***粗斜体文字放这里，三颗星***\n```\n\n### 表格\n\n|表格头|第二行确定align对齐|如果第二行不设置额外对齐就默认是左对齐|\n|----|:-----:|-----:|\n|第一|第二|第三|\n|列是|列是|列是|\n|默认左对齐|居中|右对齐|\n\n### markdown页面跳转和目录\n\n示例\n\n*后有空格,空格缩进产生目录结构,标准markdown支持页面内跳转，github markdown貌似不支持，待跟新\n\n* [1.markdown语法](#1)\n * [1.1标题](#1.1)\n * [1.2无需列表](#1.2)\n * [1.3有序列表](#1.3)\n\n<span name=\"1\"></span>\n","slug":"Markdown常用语法","published":1,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:33:34.706Z","comments":1,"photos":[],"link":"","_id":"civ3wzslx000xn9fk82jkupsx","content":"<h2 id=\"markdown-是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML-或者HTML-文档。这里记录下常用的markdown语法，便于查看和使用。\"><a href=\"#markdown-是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML-或者HTML-文档。这里记录下常用的markdown语法，便于查看和使用。\" class=\"headerlink\" title=\"markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档。这里记录下常用的markdown语法，便于查看和使用。\"></a>markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档。这里记录下常用的markdown语法，便于查看和使用。</h2><h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题 \"></a>标题 <sapn id=\"1.1\"></sapn></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 一级标题</div><div class=\"line\">## 二级标题</div><div class=\"line\">### 三级标题</div><div class=\"line\">#### 四级标题</div><div class=\"line\">##### 五级标题</div><div class=\"line\">###### 六级标题</div></pre></td></tr></table></figure>\n<h4 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- Tips</div><div class=\"line\">- 这里有空格</div><div class=\"line\">- 前面有一个空格</div></pre></td></tr></table></figure>\n<h3 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. Tips</div><div class=\"line\">2. 这里有空格</div><div class=\"line\">3. 前面有一个空格</div></pre></td></tr></table></figure>\n<h3 id=\"文字链接\"><a href=\"#文字链接\" class=\"headerlink\" title=\"文字链接\"></a>文字链接</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[链接文字放这里](链接放这里，注意是括号，不是花括号)</div></pre></td></tr></table></figure>\n<h3 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![图片显示不出的替代文字，可选](URL放这里“图片title”)</div></pre></td></tr></table></figure>\n<h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">```&lt;language type&gt;</div><div class=\"line\">&lt;p&gt;多行代码&lt;p&gt;</div><div class=\"line\">&lt;p&gt;多行&lt;/p&gt;</div><div class=\"line\">&lt;p&gt;多&lt;/p&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"单个代码\"><a href=\"#单个代码\" class=\"headerlink\" title=\"单个代码\"></a>单个代码</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">`code`</div></pre></td></tr></table></figure>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;引用文字放这里</div></pre></td></tr></table></figure>\n<h3 id=\"斜体\"><a href=\"#斜体\" class=\"headerlink\" title=\"斜体\"></a>斜体</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">*斜体文字放这里,一颗星*</div></pre></td></tr></table></figure>\n<h3 id=\"粗体\"><a href=\"#粗体\" class=\"headerlink\" title=\"粗体\"></a>粗体</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">**粗体文字放这里，两颗星**</div></pre></td></tr></table></figure>\n<h3 id=\"粗斜体\"><a href=\"#粗斜体\" class=\"headerlink\" title=\"粗斜体\"></a>粗斜体</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">***粗斜体文字放这里，三颗星***</div></pre></td></tr></table></figure>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><table>\n<thead>\n<tr>\n<th>表格头</th>\n<th style=\"text-align:center\">第二行确定align对齐</th>\n<th style=\"text-align:right\">如果第二行不设置额外对齐就默认是左对齐</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>第一</td>\n<td style=\"text-align:center\">第二</td>\n<td style=\"text-align:right\">第三</td>\n</tr>\n<tr>\n<td>列是</td>\n<td style=\"text-align:center\">列是</td>\n<td style=\"text-align:right\">列是</td>\n</tr>\n<tr>\n<td>默认左对齐</td>\n<td style=\"text-align:center\">居中</td>\n<td style=\"text-align:right\">右对齐</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"markdown页面跳转和目录\"><a href=\"#markdown页面跳转和目录\" class=\"headerlink\" title=\"markdown页面跳转和目录\"></a>markdown页面跳转和目录</h3><p>示例</p>\n<p>*后有空格,空格缩进产生目录结构,标准markdown支持页面内跳转，github markdown貌似不支持，待跟新</p>\n<ul>\n<li><a href=\"#1\">1.markdown语法</a><ul>\n<li><a href=\"#1.1\">1.1标题</a></li>\n<li><a href=\"#1.2\">1.2无需列表</a></li>\n<li><a href=\"#1.3\">1.3有序列表</a></li>\n</ul>\n</li>\n</ul>\n<p><span name=\"1\"></span></p>\n","excerpt":"","more":"<h2 id=\"markdown-是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML-或者HTML-文档。这里记录下常用的markdown语法，便于查看和使用。\"><a href=\"#markdown-是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML-或者HTML-文档。这里记录下常用的markdown语法，便于查看和使用。\" class=\"headerlink\" title=\"markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档。这里记录下常用的markdown语法，便于查看和使用。\"></a>markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档。这里记录下常用的markdown语法，便于查看和使用。</h2><h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题 \"></a>标题 <sapn id=\"1.1\"></span></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 一级标题</div><div class=\"line\">## 二级标题</div><div class=\"line\">### 三级标题</div><div class=\"line\">#### 四级标题</div><div class=\"line\">##### 五级标题</div><div class=\"line\">###### 六级标题</div></pre></td></tr></table></figure>\n<h4 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- Tips</div><div class=\"line\">- 这里有空格</div><div class=\"line\">- 前面有一个空格</div></pre></td></tr></table></figure>\n<h3 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. Tips</div><div class=\"line\">2. 这里有空格</div><div class=\"line\">3. 前面有一个空格</div></pre></td></tr></table></figure>\n<h3 id=\"文字链接\"><a href=\"#文字链接\" class=\"headerlink\" title=\"文字链接\"></a>文字链接</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[链接文字放这里](链接放这里，注意是括号，不是花括号)</div></pre></td></tr></table></figure>\n<h3 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![图片显示不出的替代文字，可选](URL放这里“图片title”)</div></pre></td></tr></table></figure>\n<h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">```&lt;language type&gt;</div><div class=\"line\">&lt;p&gt;多行代码&lt;p&gt;</div><div class=\"line\">&lt;p&gt;多行&lt;/p&gt;</div><div class=\"line\">&lt;p&gt;多&lt;/p&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"单个代码\"><a href=\"#单个代码\" class=\"headerlink\" title=\"单个代码\"></a>单个代码</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">`code`</div></pre></td></tr></table></figure>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;引用文字放这里</div></pre></td></tr></table></figure>\n<h3 id=\"斜体\"><a href=\"#斜体\" class=\"headerlink\" title=\"斜体\"></a>斜体</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">*斜体文字放这里,一颗星*</div></pre></td></tr></table></figure>\n<h3 id=\"粗体\"><a href=\"#粗体\" class=\"headerlink\" title=\"粗体\"></a>粗体</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">**粗体文字放这里，两颗星**</div></pre></td></tr></table></figure>\n<h3 id=\"粗斜体\"><a href=\"#粗斜体\" class=\"headerlink\" title=\"粗斜体\"></a>粗斜体</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">***粗斜体文字放这里，三颗星***</div></pre></td></tr></table></figure>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><table>\n<thead>\n<tr>\n<th>表格头</th>\n<th style=\"text-align:center\">第二行确定align对齐</th>\n<th style=\"text-align:right\">如果第二行不设置额外对齐就默认是左对齐</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>第一</td>\n<td style=\"text-align:center\">第二</td>\n<td style=\"text-align:right\">第三</td>\n</tr>\n<tr>\n<td>列是</td>\n<td style=\"text-align:center\">列是</td>\n<td style=\"text-align:right\">列是</td>\n</tr>\n<tr>\n<td>默认左对齐</td>\n<td style=\"text-align:center\">居中</td>\n<td style=\"text-align:right\">右对齐</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"markdown页面跳转和目录\"><a href=\"#markdown页面跳转和目录\" class=\"headerlink\" title=\"markdown页面跳转和目录\"></a>markdown页面跳转和目录</h3><p>示例</p>\n<p>*后有空格,空格缩进产生目录结构,标准markdown支持页面内跳转，github markdown貌似不支持，待跟新</p>\n<ul>\n<li><a href=\"#1\">1.markdown语法</a><ul>\n<li><a href=\"#1.1\">1.1标题</a></li>\n<li><a href=\"#1.2\">1.2无需列表</a></li>\n<li><a href=\"#1.3\">1.3有序列表</a></li>\n</ul>\n</li>\n</ul>\n<p><span name=\"1\"></span></p>\n"},{"title":"学习mongo-shell","date":"2016-10-30T05:30:31.000Z","<!-- tags":"-->","description":"Mongodb是node世界中最常用的数据库，在这里记录下最基本的mongodb的shell交互命令和操作","_content":"\n## 开启mongodb\n\n１. 启动mongod\n\n```shell\n# sudo /usr/bin/mongod\nsudo service mongod start\n\n```\n\n2. 进入mongo shell\n\n```shell\nmongo\n```\n## 基本命令\n```js\ndb　当前数据库\nuse <dbname> 更换数据库\nshow dbs\nshow collection\n```\n\n\n## Mysql VS Mongodb\n\nMySQL\tMongoDB\nTable\tCollection\nRow\tDocument\nColumn\tField\nJoins\tEmbedded documents, linking\n\nmongo的collection对应mysql中的table,document对应row,让我们想象有一个collection存储着一个网站所有用户的信息，那么每一个document都对应这一个用户，也就相当于mysql中的row。而mongo存储数据的形式类型于JavaScript的对象，那么对象的key 就是schema所定义的，而value就是存储的数据。所以mysql中的column在mongo中实际上是不存在的，可以把每个相同的Key所对应的value的集合看成一个column,这个key在mongo中叫做fiel.\n\n## Mongo shell crud\n\n**增加 create**\n\n1. 新建colllection\nshell中不需要显示创建,插入document时如果不存在就会自动创建\n\n2. 新建document\n\n基本形式　db.collection.insert()。\ninsert()中传入document\n形如\n\n```js\ndb.users.insert(\n\t{\n\t\tname: 'quill',\n\t\tage: '20',\n\t\tgender: 'male'\n\t}\n)\n```\n\ninsert()是方法,还有如下方法\n\n```js\ndb.collection.insertOne()  插入单个document\ndb.collection.insertMany() 插入多个document，必须用[]包含要插入的document\ndb.collection.insert() 　可插入一个或多个document\n```\n\n<!-- #### _id key -->\n`_id` field\n在mongo中每一个document都需要一个独一无二的id，如果insert的时候没有显示指定，就会自动创建一个很长的id\n\n\n**查找 read**\n基本形式　db.collection.find({})\nfind()中传入筛选条件\n\n```js\ndb.user.find().pretty()   // 输出易于阅读的模式\n```\n*详细参考[docs](https://docs.mongodb.com/manual/tutorial/query-documents/)*\n\n**修改 update**\n\n基本形式　db.collection.update()\n\n形如insert(),update也有如下多种方法\n\ndb.collection.update()\ndb.collection.updateOne()\ndb.collection.updateMany()\ndb.collection.replaceOne()\n\nupdate()传入三个参数,过滤条件，修改对象，修改选项\n形如\n```js\ndb.user.update(\n\t{name:'quill'},\n\t{$set: {age:'21'}},\n\t{ multi: true}\n)\n```\n*详细参考[docs](https://docs.mongodb.com/manual/tutorial/update-documents/)*\n\n\n**删除 delete**\n基本形式　db.collection.remove()\ndelete中传入过滤条件对象\n*详细参考[docs](https://docs.mongodb.com/manual/tutorial/remove-documents/)*\n","source":"_posts/学习mongo-shell.md","raw":"title: 学习mongo-shell\ndate: 2016-10-30 13:30:31\n<!-- tags: -->\ndescription: Mongodb是node世界中最常用的数据库，在这里记录下最基本的mongodb的shell交互命令和操作\n---\n\n## 开启mongodb\n\n１. 启动mongod\n\n```shell\n# sudo /usr/bin/mongod\nsudo service mongod start\n\n```\n\n2. 进入mongo shell\n\n```shell\nmongo\n```\n## 基本命令\n```js\ndb　当前数据库\nuse <dbname> 更换数据库\nshow dbs\nshow collection\n```\n\n\n## Mysql VS Mongodb\n\nMySQL\tMongoDB\nTable\tCollection\nRow\tDocument\nColumn\tField\nJoins\tEmbedded documents, linking\n\nmongo的collection对应mysql中的table,document对应row,让我们想象有一个collection存储着一个网站所有用户的信息，那么每一个document都对应这一个用户，也就相当于mysql中的row。而mongo存储数据的形式类型于JavaScript的对象，那么对象的key 就是schema所定义的，而value就是存储的数据。所以mysql中的column在mongo中实际上是不存在的，可以把每个相同的Key所对应的value的集合看成一个column,这个key在mongo中叫做fiel.\n\n## Mongo shell crud\n\n**增加 create**\n\n1. 新建colllection\nshell中不需要显示创建,插入document时如果不存在就会自动创建\n\n2. 新建document\n\n基本形式　db.collection.insert()。\ninsert()中传入document\n形如\n\n```js\ndb.users.insert(\n\t{\n\t\tname: 'quill',\n\t\tage: '20',\n\t\tgender: 'male'\n\t}\n)\n```\n\ninsert()是方法,还有如下方法\n\n```js\ndb.collection.insertOne()  插入单个document\ndb.collection.insertMany() 插入多个document，必须用[]包含要插入的document\ndb.collection.insert() 　可插入一个或多个document\n```\n\n<!-- #### _id key -->\n`_id` field\n在mongo中每一个document都需要一个独一无二的id，如果insert的时候没有显示指定，就会自动创建一个很长的id\n\n\n**查找 read**\n基本形式　db.collection.find({})\nfind()中传入筛选条件\n\n```js\ndb.user.find().pretty()   // 输出易于阅读的模式\n```\n*详细参考[docs](https://docs.mongodb.com/manual/tutorial/query-documents/)*\n\n**修改 update**\n\n基本形式　db.collection.update()\n\n形如insert(),update也有如下多种方法\n\ndb.collection.update()\ndb.collection.updateOne()\ndb.collection.updateMany()\ndb.collection.replaceOne()\n\nupdate()传入三个参数,过滤条件，修改对象，修改选项\n形如\n```js\ndb.user.update(\n\t{name:'quill'},\n\t{$set: {age:'21'}},\n\t{ multi: true}\n)\n```\n*详细参考[docs](https://docs.mongodb.com/manual/tutorial/update-documents/)*\n\n\n**删除 delete**\n基本形式　db.collection.remove()\ndelete中传入过滤条件对象\n*详细参考[docs](https://docs.mongodb.com/manual/tutorial/remove-documents/)*\n","slug":"学习mongo-shell","published":1,"updated":"2016-10-30T07:50:45.558Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzsm1000yn9fkfcq8werl","content":"<h2 id=\"开启mongodb\"><a href=\"#开启mongodb\" class=\"headerlink\" title=\"开启mongodb\"></a>开启mongodb</h2><p>１. 启动mongod</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># sudo /usr/bin/mongod</div><div class=\"line\">sudo service mongod start</div></pre></td></tr></table></figure>\n<ol>\n<li>进入mongo shell</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongo</div></pre></td></tr></table></figure>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">db　当前数据库</div><div class=\"line\">use &lt;dbname&gt; 更换数据库</div><div class=\"line\">show dbs</div><div class=\"line\">show collection</div></pre></td></tr></table></figure>\n<h2 id=\"Mysql-VS-Mongodb\"><a href=\"#Mysql-VS-Mongodb\" class=\"headerlink\" title=\"Mysql VS Mongodb\"></a>Mysql VS Mongodb</h2><p>MySQL    MongoDB<br>Table    Collection<br>Row    Document<br>Column    Field<br>Joins    Embedded documents, linking</p>\n<p>mongo的collection对应mysql中的table,document对应row,让我们想象有一个collection存储着一个网站所有用户的信息，那么每一个document都对应这一个用户，也就相当于mysql中的row。而mongo存储数据的形式类型于JavaScript的对象，那么对象的key 就是schema所定义的，而value就是存储的数据。所以mysql中的column在mongo中实际上是不存在的，可以把每个相同的Key所对应的value的集合看成一个column,这个key在mongo中叫做fiel.</p>\n<h2 id=\"Mongo-shell-crud\"><a href=\"#Mongo-shell-crud\" class=\"headerlink\" title=\"Mongo shell crud\"></a>Mongo shell crud</h2><p><strong>增加 create</strong></p>\n<ol>\n<li><p>新建colllection<br>shell中不需要显示创建,插入document时如果不存在就会自动创建</p>\n</li>\n<li><p>新建document</p>\n</li>\n</ol>\n<p>基本形式　db.collection.insert()。<br>insert()中传入document<br>形如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.insert(</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"attr\">name</span>: <span class=\"string\">'quill'</span>,</div><div class=\"line\">\t\t<span class=\"attr\">age</span>: <span class=\"string\">'20'</span>,</div><div class=\"line\">\t\t<span class=\"attr\">gender</span>: <span class=\"string\">'male'</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>insert()是方法,还有如下方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.collection.insertOne()  插入单个<span class=\"built_in\">document</span></div><div class=\"line\">db.collection.insertMany() 插入多个<span class=\"built_in\">document</span>，必须用[]包含要插入的<span class=\"built_in\">document</span></div><div class=\"line\">db.collection.insert() 　可插入一个或多个<span class=\"built_in\">document</span></div></pre></td></tr></table></figure>\n<!-- #### _id key -->\n<p><code>_id</code> field<br>在mongo中每一个document都需要一个独一无二的id，如果insert的时候没有显示指定，就会自动创建一个很长的id</p>\n<p><strong>查找 read</strong><br>基本形式　db.collection.find({})<br>find()中传入筛选条件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find().pretty()   <span class=\"comment\">// 输出易于阅读的模式</span></div></pre></td></tr></table></figure>\n<p><em>详细参考<a href=\"https://docs.mongodb.com/manual/tutorial/query-documents/\" target=\"_blank\" rel=\"external\">docs</a></em></p>\n<p><strong>修改 update</strong></p>\n<p>基本形式　db.collection.update()</p>\n<p>形如insert(),update也有如下多种方法</p>\n<p>db.collection.update()<br>db.collection.updateOne()<br>db.collection.updateMany()<br>db.collection.replaceOne()</p>\n<p>update()传入三个参数,过滤条件，修改对象，修改选项<br>形如<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(</div><div class=\"line\">\t&#123;<span class=\"attr\">name</span>:<span class=\"string\">'quill'</span>&#125;,</div><div class=\"line\">\t&#123;<span class=\"attr\">$set</span>: &#123;<span class=\"attr\">age</span>:<span class=\"string\">'21'</span>&#125;&#125;,</div><div class=\"line\">\t&#123; <span class=\"attr\">multi</span>: <span class=\"literal\">true</span>&#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p><em>详细参考<a href=\"https://docs.mongodb.com/manual/tutorial/update-documents/\" target=\"_blank\" rel=\"external\">docs</a></em></p>\n<p><strong>删除 delete</strong><br>基本形式　db.collection.remove()<br>delete中传入过滤条件对象<br><em>详细参考<a href=\"https://docs.mongodb.com/manual/tutorial/remove-documents/\" target=\"_blank\" rel=\"external\">docs</a></em></p>\n","excerpt":"","more":"<h2 id=\"开启mongodb\"><a href=\"#开启mongodb\" class=\"headerlink\" title=\"开启mongodb\"></a>开启mongodb</h2><p>１. 启动mongod</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># sudo /usr/bin/mongod</div><div class=\"line\">sudo service mongod start</div></pre></td></tr></table></figure>\n<ol>\n<li>进入mongo shell</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongo</div></pre></td></tr></table></figure>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">db　当前数据库</div><div class=\"line\">use &lt;dbname&gt; 更换数据库</div><div class=\"line\">show dbs</div><div class=\"line\">show collection</div></pre></td></tr></table></figure>\n<h2 id=\"Mysql-VS-Mongodb\"><a href=\"#Mysql-VS-Mongodb\" class=\"headerlink\" title=\"Mysql VS Mongodb\"></a>Mysql VS Mongodb</h2><p>MySQL    MongoDB<br>Table    Collection<br>Row    Document<br>Column    Field<br>Joins    Embedded documents, linking</p>\n<p>mongo的collection对应mysql中的table,document对应row,让我们想象有一个collection存储着一个网站所有用户的信息，那么每一个document都对应这一个用户，也就相当于mysql中的row。而mongo存储数据的形式类型于JavaScript的对象，那么对象的key 就是schema所定义的，而value就是存储的数据。所以mysql中的column在mongo中实际上是不存在的，可以把每个相同的Key所对应的value的集合看成一个column,这个key在mongo中叫做fiel.</p>\n<h2 id=\"Mongo-shell-crud\"><a href=\"#Mongo-shell-crud\" class=\"headerlink\" title=\"Mongo shell crud\"></a>Mongo shell crud</h2><p><strong>增加 create</strong></p>\n<ol>\n<li><p>新建colllection<br>shell中不需要显示创建,插入document时如果不存在就会自动创建</p>\n</li>\n<li><p>新建document</p>\n</li>\n</ol>\n<p>基本形式　db.collection.insert()。<br>insert()中传入document<br>形如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.insert(</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"attr\">name</span>: <span class=\"string\">'quill'</span>,</div><div class=\"line\">\t\t<span class=\"attr\">age</span>: <span class=\"string\">'20'</span>,</div><div class=\"line\">\t\t<span class=\"attr\">gender</span>: <span class=\"string\">'male'</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>insert()是方法,还有如下方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.collection.insertOne()  插入单个<span class=\"built_in\">document</span></div><div class=\"line\">db.collection.insertMany() 插入多个<span class=\"built_in\">document</span>，必须用[]包含要插入的<span class=\"built_in\">document</span></div><div class=\"line\">db.collection.insert() 　可插入一个或多个<span class=\"built_in\">document</span></div></pre></td></tr></table></figure>\n<!-- #### _id key -->\n<p><code>_id</code> field<br>在mongo中每一个document都需要一个独一无二的id，如果insert的时候没有显示指定，就会自动创建一个很长的id</p>\n<p><strong>查找 read</strong><br>基本形式　db.collection.find({})<br>find()中传入筛选条件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find().pretty()   <span class=\"comment\">// 输出易于阅读的模式</span></div></pre></td></tr></table></figure>\n<p><em>详细参考<a href=\"https://docs.mongodb.com/manual/tutorial/query-documents/\">docs</a></em></p>\n<p><strong>修改 update</strong></p>\n<p>基本形式　db.collection.update()</p>\n<p>形如insert(),update也有如下多种方法</p>\n<p>db.collection.update()<br>db.collection.updateOne()<br>db.collection.updateMany()<br>db.collection.replaceOne()</p>\n<p>update()传入三个参数,过滤条件，修改对象，修改选项<br>形如<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(</div><div class=\"line\">\t&#123;<span class=\"attr\">name</span>:<span class=\"string\">'quill'</span>&#125;,</div><div class=\"line\">\t&#123;<span class=\"attr\">$set</span>: &#123;<span class=\"attr\">age</span>:<span class=\"string\">'21'</span>&#125;&#125;,</div><div class=\"line\">\t&#123; <span class=\"attr\">multi</span>: <span class=\"literal\">true</span>&#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p><em>详细参考<a href=\"https://docs.mongodb.com/manual/tutorial/update-documents/\">docs</a></em></p>\n<p><strong>删除 delete</strong><br>基本形式　db.collection.remove()<br>delete中传入过滤条件对象<br><em>详细参考<a href=\"https://docs.mongodb.com/manual/tutorial/remove-documents/\">docs</a></em></p>\n"},{"title":"Considerations about styling a modal","description":"高程３笔记第三章","date":"2016-10-29T03:49:14.000Z","_content":"\n[原文地址](https://css-tricks.com/considerations-styling-modal/)\nmodal,dialog,弹出层，会话框，指的都是同一个东西，一个弹出来的小盒子告诉你一些重要的东西，这个东西有多难呢？嗯，我会说，中等难度。关于这个东西确实有一些值得考虑的东西和一些小技巧。\n## 把它放在DOM哪个位置\n放在</body>标签之前\n\n```html\n<div class=\"modal\" id=\"modal\"></div>\n</body>\n</html>\n```\n这主要是因为样式的原因。当你以body元素为父元素时，这会使你更容易定位这个modal，也能更好的处理自己内部的子元素内容。\n\n## 居中\n我们有一个完全指南关于[css居中](https://css-tricks.com/centering-css-complete-guide/)\n这里是一个技巧能让你水平垂直都居中一个元素而无需知道它的宽度和高度\n\n```css\n.modal {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n```\n\n## 固定？\n注意到我们使用了 `position: fixed;`,这是因为如果你使用absolute或其他的话，用户向下滚动屏幕，modal就看不到了\n\n\n## 处理宽度\n在大屏幕上，一个典型的modal不仅仅要居中还要限制宽度\n简单的可适应\n```css\n.modal {\n\n  /* 省略的代码 */\n\n  width: 600px;\n  max-width: 100%;\n}\n```\n## 处理高度\n\n```css\n.modal {\n\n  /* 省略的代码 */\n\n  height: 400px;\n  max-height: 100%;\n\n}\n```\n\n\n##处理蒙板\n一个modal经常有一个全屏覆盖的蒙板，它能够\n1. 它减暗了modal之外的亮度，强制让用户处理弹出的会话框\n2. 它能够用来防止点击/交互modal之外的的内容\n3. 它能够被做成一个巨大的关闭按钮\n典型的处理：\n\n```html\n<div class=\"modal\" id=\"modal\">\n  <!-- modal stuff -->\n</div>\n<div class=\"modal-overlay\" id=\"modal-overlay\">\n</div>\n```\n\n```css\n.modal {\n\n  /* 已经讨论过的代码 */\n\n  z-index: 1010;\n\n}\n.modal-overlay {\n\n  /* 建议:\n     不需要太过关注1000数字，只要它在你的z-index系统中足够高就可以，\n     要比上面的modal部分低，因为modal是在蒙版之上的\n  */\n  z-index: 1000;\n\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n\n}\n```\n\n## 用一个class来关闭(而不是用一个class来打开)\n如果是先给modal使用display:none来隐藏它，需要打开时再改变它的display让它可见。但这是有问题的，因为你想要让modal可见的dispaly可能是flex，blcok，grid等等，这样是这个closed类不够通用。但如果先写出正常的modal的display，然后再用一个display: none;去覆盖之前的display，打开modal的时候移去这个closed类就可以了，而不需要考虑它打开时是什么display\n\n```css\n.modal {\n\n  /* for example... */\n  display: flex;  \n\n}\n.modal.closed {\n\n  display: none;\n\n}\n```\n","source":"_posts/关于style弹出层的思考.md","raw":"---\ntitle: Considerations about styling a modal\ndescription: 高程３笔记第三章\ndate: 2016-10-29 11:49:14\n---\n\n[原文地址](https://css-tricks.com/considerations-styling-modal/)\nmodal,dialog,弹出层，会话框，指的都是同一个东西，一个弹出来的小盒子告诉你一些重要的东西，这个东西有多难呢？嗯，我会说，中等难度。关于这个东西确实有一些值得考虑的东西和一些小技巧。\n## 把它放在DOM哪个位置\n放在</body>标签之前\n\n```html\n<div class=\"modal\" id=\"modal\"></div>\n</body>\n</html>\n```\n这主要是因为样式的原因。当你以body元素为父元素时，这会使你更容易定位这个modal，也能更好的处理自己内部的子元素内容。\n\n## 居中\n我们有一个完全指南关于[css居中](https://css-tricks.com/centering-css-complete-guide/)\n这里是一个技巧能让你水平垂直都居中一个元素而无需知道它的宽度和高度\n\n```css\n.modal {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n```\n\n## 固定？\n注意到我们使用了 `position: fixed;`,这是因为如果你使用absolute或其他的话，用户向下滚动屏幕，modal就看不到了\n\n\n## 处理宽度\n在大屏幕上，一个典型的modal不仅仅要居中还要限制宽度\n简单的可适应\n```css\n.modal {\n\n  /* 省略的代码 */\n\n  width: 600px;\n  max-width: 100%;\n}\n```\n## 处理高度\n\n```css\n.modal {\n\n  /* 省略的代码 */\n\n  height: 400px;\n  max-height: 100%;\n\n}\n```\n\n\n##处理蒙板\n一个modal经常有一个全屏覆盖的蒙板，它能够\n1. 它减暗了modal之外的亮度，强制让用户处理弹出的会话框\n2. 它能够用来防止点击/交互modal之外的的内容\n3. 它能够被做成一个巨大的关闭按钮\n典型的处理：\n\n```html\n<div class=\"modal\" id=\"modal\">\n  <!-- modal stuff -->\n</div>\n<div class=\"modal-overlay\" id=\"modal-overlay\">\n</div>\n```\n\n```css\n.modal {\n\n  /* 已经讨论过的代码 */\n\n  z-index: 1010;\n\n}\n.modal-overlay {\n\n  /* 建议:\n     不需要太过关注1000数字，只要它在你的z-index系统中足够高就可以，\n     要比上面的modal部分低，因为modal是在蒙版之上的\n  */\n  z-index: 1000;\n\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n\n}\n```\n\n## 用一个class来关闭(而不是用一个class来打开)\n如果是先给modal使用display:none来隐藏它，需要打开时再改变它的display让它可见。但这是有问题的，因为你想要让modal可见的dispaly可能是flex，blcok，grid等等，这样是这个closed类不够通用。但如果先写出正常的modal的display，然后再用一个display: none;去覆盖之前的display，打开modal的时候移去这个closed类就可以了，而不需要考虑它打开时是什么display\n\n```css\n.modal {\n\n  /* for example... */\n  display: flex;  \n\n}\n.modal.closed {\n\n  display: none;\n\n}\n```\n","slug":"关于style弹出层的思考","published":1,"updated":"2016-10-29T05:33:27.974Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzsm4000zn9fk10xdqjn1","content":"<p><a href=\"https://css-tricks.com/considerations-styling-modal/\" target=\"_blank\" rel=\"external\">原文地址</a><br>modal,dialog,弹出层，会话框，指的都是同一个东西，一个弹出来的小盒子告诉你一些重要的东西，这个东西有多难呢？嗯，我会说，中等难度。关于这个东西确实有一些值得考虑的东西和一些小技巧。</p>\n<h2 id=\"把它放在DOM哪个位置\"><a href=\"#把它放在DOM哪个位置\" class=\"headerlink\" title=\"把它放在DOM哪个位置\"></a>把它放在DOM哪个位置</h2><p>放在标签之前</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"modal\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这主要是因为样式的原因。当你以body元素为父元素时，这会使你更容易定位这个modal，也能更好的处理自己内部的子元素内容。</p>\n<h2 id=\"居中\"><a href=\"#居中\" class=\"headerlink\" title=\"居中\"></a>居中</h2><p>我们有一个完全指南关于<a href=\"https://css-tricks.com/centering-css-complete-guide/\" target=\"_blank\" rel=\"external\">css居中</a><br>这里是一个技巧能让你水平垂直都居中一个元素而无需知道它的宽度和高度</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.modal</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: fixed;</div><div class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%, -50%);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"固定？\"><a href=\"#固定？\" class=\"headerlink\" title=\"固定？\"></a>固定？</h2><p>注意到我们使用了 <code>position: fixed;</code>,这是因为如果你使用absolute或其他的话，用户向下滚动屏幕，modal就看不到了</p>\n<h2 id=\"处理宽度\"><a href=\"#处理宽度\" class=\"headerlink\" title=\"处理宽度\"></a>处理宽度</h2><p>在大屏幕上，一个典型的modal不仅仅要居中还要限制宽度<br>简单的可适应<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.modal</span> &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* 省略的代码 */</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</div><div class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"处理高度\"><a href=\"#处理高度\" class=\"headerlink\" title=\"处理高度\"></a>处理高度</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.modal</span> &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* 省略的代码 */</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</div><div class=\"line\">  <span class=\"attribute\">max-height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>##处理蒙板<br>一个modal经常有一个全屏覆盖的蒙板，它能够</p>\n<ol>\n<li>它减暗了modal之外的亮度，强制让用户处理弹出的会话框</li>\n<li>它能够用来防止点击/交互modal之外的的内容</li>\n<li>它能够被做成一个巨大的关闭按钮<br>典型的处理：</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"modal\"</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- modal stuff --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-overlay\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"modal-overlay\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.modal</span> &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* 已经讨论过的代码 */</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">1010</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.modal-overlay</span> &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* 建议:</span></div><div class=\"line\">     不需要太过关注1000数字，只要它在你的z-index系统中足够高就可以，</div><div class=\"line\">     要比上面的modal部分低，因为modal是在蒙版之上的</div><div class=\"line\">  */</div><div class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">1000</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attribute\">position</span>: fixed;</div><div class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"用一个class来关闭-而不是用一个class来打开\"><a href=\"#用一个class来关闭-而不是用一个class来打开\" class=\"headerlink\" title=\"用一个class来关闭(而不是用一个class来打开)\"></a>用一个class来关闭(而不是用一个class来打开)</h2><p>如果是先给modal使用display:none来隐藏它，需要打开时再改变它的display让它可见。但这是有问题的，因为你想要让modal可见的dispaly可能是flex，blcok，grid等等，这样是这个closed类不够通用。但如果先写出正常的modal的display，然后再用一个display: none;去覆盖之前的display，打开modal的时候移去这个closed类就可以了，而不需要考虑它打开时是什么display</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.modal</span> &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* for example... */</span></div><div class=\"line\">  <span class=\"attribute\">display</span>: flex;  </div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.modal</span><span class=\"selector-class\">.closed</span> &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attribute\">display</span>: none;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><a href=\"https://css-tricks.com/considerations-styling-modal/\">原文地址</a><br>modal,dialog,弹出层，会话框，指的都是同一个东西，一个弹出来的小盒子告诉你一些重要的东西，这个东西有多难呢？嗯，我会说，中等难度。关于这个东西确实有一些值得考虑的东西和一些小技巧。</p>\n<h2 id=\"把它放在DOM哪个位置\"><a href=\"#把它放在DOM哪个位置\" class=\"headerlink\" title=\"把它放在DOM哪个位置\"></a>把它放在DOM哪个位置</h2><p>放在</body>标签之前</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"modal\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这主要是因为样式的原因。当你以body元素为父元素时，这会使你更容易定位这个modal，也能更好的处理自己内部的子元素内容。</p>\n<h2 id=\"居中\"><a href=\"#居中\" class=\"headerlink\" title=\"居中\"></a>居中</h2><p>我们有一个完全指南关于<a href=\"https://css-tricks.com/centering-css-complete-guide/\">css居中</a><br>这里是一个技巧能让你水平垂直都居中一个元素而无需知道它的宽度和高度</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.modal</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: fixed;</div><div class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%, -50%);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"固定？\"><a href=\"#固定？\" class=\"headerlink\" title=\"固定？\"></a>固定？</h2><p>注意到我们使用了 <code>position: fixed;</code>,这是因为如果你使用absolute或其他的话，用户向下滚动屏幕，modal就看不到了</p>\n<h2 id=\"处理宽度\"><a href=\"#处理宽度\" class=\"headerlink\" title=\"处理宽度\"></a>处理宽度</h2><p>在大屏幕上，一个典型的modal不仅仅要居中还要限制宽度<br>简单的可适应<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.modal</span> &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* 省略的代码 */</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</div><div class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"处理高度\"><a href=\"#处理高度\" class=\"headerlink\" title=\"处理高度\"></a>处理高度</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.modal</span> &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* 省略的代码 */</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</div><div class=\"line\">  <span class=\"attribute\">max-height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>##处理蒙板<br>一个modal经常有一个全屏覆盖的蒙板，它能够</p>\n<ol>\n<li>它减暗了modal之外的亮度，强制让用户处理弹出的会话框</li>\n<li>它能够用来防止点击/交互modal之外的的内容</li>\n<li>它能够被做成一个巨大的关闭按钮<br>典型的处理：</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"modal\"</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- modal stuff --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-overlay\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"modal-overlay\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.modal</span> &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* 已经讨论过的代码 */</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">1010</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.modal-overlay</span> &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* 建议:</div><div class=\"line\">     不需要太过关注1000数字，只要它在你的z-index系统中足够高就可以，</div><div class=\"line\">     要比上面的modal部分低，因为modal是在蒙版之上的</div><div class=\"line\">  */</span></div><div class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">1000</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attribute\">position</span>: fixed;</div><div class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"用一个class来关闭-而不是用一个class来打开\"><a href=\"#用一个class来关闭-而不是用一个class来打开\" class=\"headerlink\" title=\"用一个class来关闭(而不是用一个class来打开)\"></a>用一个class来关闭(而不是用一个class来打开)</h2><p>如果是先给modal使用display:none来隐藏它，需要打开时再改变它的display让它可见。但这是有问题的，因为你想要让modal可见的dispaly可能是flex，blcok，grid等等，这样是这个closed类不够通用。但如果先写出正常的modal的display，然后再用一个display: none;去覆盖之前的display，打开modal的时候移去这个closed类就可以了，而不需要考虑它打开时是什么display</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.modal</span> &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/* for example... */</span></div><div class=\"line\">  <span class=\"attribute\">display</span>: flex;  </div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.modal</span><span class=\"selector-class\">.closed</span> &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attribute\">display</span>: none;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"_content":"// 创建一个XHR对象的实例\nvar xhr = new XMLHttpRequest();\n\n// open()方法,接收三个参数,分别是请求的类型,请求的URI(默认是相对路径),是否异步(默认false)\n// open方法并不会真正的发送请求,而只是启动一个请求一杯发送\nxhr.open('post','test.php',false);\n\n//send()方法,发送请求,需要一个参数,请求主体?如果不需要请求主体,需要传入null\nxhr.send(null);\n\n//收到响应后,服务器返回的数据会自动填充xhr对象的属性,包括\n// 1.responseText  返回的文本\n// 2.responseXML   如果返回xml文件的xml dom\n// 3.status    响应的HTTP状态\n// 4.statusText   HTTP状态的说明\n\nif(xhr.status >= 200 && xhr.status <= 300 || xhr.status == 304) {\n    console.log(xhr.responseText);\n}else {\n    console.log('Request was unsucccessful:' + xhr.status);\n}\n","source":"_drafts/code/AJAX.js","raw":"// 创建一个XHR对象的实例\nvar xhr = new XMLHttpRequest();\n\n// open()方法,接收三个参数,分别是请求的类型,请求的URI(默认是相对路径),是否异步(默认false)\n// open方法并不会真正的发送请求,而只是启动一个请求一杯发送\nxhr.open('post','test.php',false);\n\n//send()方法,发送请求,需要一个参数,请求主体?如果不需要请求主体,需要传入null\nxhr.send(null);\n\n//收到响应后,服务器返回的数据会自动填充xhr对象的属性,包括\n// 1.responseText  返回的文本\n// 2.responseXML   如果返回xml文件的xml dom\n// 3.status    响应的HTTP状态\n// 4.statusText   HTTP状态的说明\n\nif(xhr.status >= 200 && xhr.status <= 300 || xhr.status == 304) {\n    console.log(xhr.responseText);\n}else {\n    console.log('Request was unsucccessful:' + xhr.status);\n}\n","slug":"code/AJAX","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.200Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzsot0010n9fkcwfxb8ni","content":"// 创建一个XHR对象的实例\nvar xhr = new XMLHttpRequest();\n\n// open()方法,接收三个参数,分别是请求的类型,请求的URI(默认是相对路径),是否异步(默认false)\n// open方法并不会真正的发送请求,而只是启动一个请求一杯发送\nxhr.open('post','test.php',false);\n\n//send()方法,发送请求,需要一个参数,请求主体?如果不需要请求主体,需要传入null\nxhr.send(null);\n\n//收到响应后,服务器返回的数据会自动填充xhr对象的属性,包括\n// 1.responseText  返回的文本\n// 2.responseXML   如果返回xml文件的xml dom\n// 3.status    响应的HTTP状态\n// 4.statusText   HTTP状态的说明\n\nif(xhr.status >= 200 && xhr.status ","excerpt":"","more":"// 创建一个XHR对象的实例\nvar xhr = new XMLHttpRequest();\n\n// open()方法,接收三个参数,分别是请求的类型,请求的URI(默认是相对路径),是否异步(默认false)\n// open方法并不会真正的发送请求,而只是启动一个请求一杯发送\nxhr.open('post','test.php',false);\n\n//send()方法,发送请求,需要一个参数,请求主体?如果不需要请求主体,需要传入null\nxhr.send(null);\n\n//收到响应后,服务器返回的数据会自动填充xhr对象的属性,包括\n// 1.responseText  返回的文本\n// 2.responseXML   如果返回xml文件的xml dom\n// 3.status    响应的HTTP状态\n// 4.statusText   HTTP状态的说明\n\nif(xhr.status >= 200 && xhr.status <= 300 || xhr.status == 304) {\n    console.log(xhr.responseText);\n}else {\n    console.log('Request was unsucccessful:' + xhr.status);\n}\n"},{"_content":"try {\n    global.totallyNoSense();\n} catch (e) {\n    console.log(e.name);  // 打印错误类型\n    console.log(e.message);  //打印错误信息\n    console.log(e.stack);  //打印栈跟踪信息\n} finally {\n    //finally子句是可选的,无论try语句和catch语句是否执行,finally语句一定会执行,如果使用了finally语句,那么catch语句就是课选的了\n}\n\n\n// 7种错误类型\nError  //所有错误的基类\nEvalError  //使用eval函数时发生的错误\nTypeError   // 变量的类型不符合\nSyntaxError  //语法错误\nReferenceError   //引用错误,找不到对象\nRangeError  //超出数值范围\nURIError  //使用encodeURI()或decodeURI()时,URL格式不正确\n\ntry{\n    someFun()\n}catch(e) {\n    if(e instanceof TypeError) {\n        // do something\n    }else if (e instanceof SyntaxError) {\n        // do something else\n    }else {\n        // fine\n    }\n}\n","source":"_drafts/code/errorHandle.js","raw":"try {\n    global.totallyNoSense();\n} catch (e) {\n    console.log(e.name);  // 打印错误类型\n    console.log(e.message);  //打印错误信息\n    console.log(e.stack);  //打印栈跟踪信息\n} finally {\n    //finally子句是可选的,无论try语句和catch语句是否执行,finally语句一定会执行,如果使用了finally语句,那么catch语句就是课选的了\n}\n\n\n// 7种错误类型\nError  //所有错误的基类\nEvalError  //使用eval函数时发生的错误\nTypeError   // 变量的类型不符合\nSyntaxError  //语法错误\nReferenceError   //引用错误,找不到对象\nRangeError  //超出数值范围\nURIError  //使用encodeURI()或decodeURI()时,URL格式不正确\n\ntry{\n    someFun()\n}catch(e) {\n    if(e instanceof TypeError) {\n        // do something\n    }else if (e instanceof SyntaxError) {\n        // do something else\n    }else {\n        // fine\n    }\n}\n","slug":"code/errorHandle","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.200Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzsp00011n9fkxto5jgdr","content":"try {\n    global.totallyNoSense();\n} catch (e) {\n    console.log(e.name);  // 打印错误类型\n    console.log(e.message);  //打印错误信息\n    console.log(e.stack);  //打印栈跟踪信息\n} finally {\n    //finally子句是可选的,无论try语句和catch语句是否执行,finally语句一定会执行,如果使用了finally语句,那么catch语句就是课选的了\n}\n\n\n// 7种错误类型\nError  //所有错误的基类\nEvalError  //使用eval函数时发生的错误\nTypeError   // 变量的类型不符合\nSyntaxError  //语法错误\nReferenceError   //引用错误,找不到对象\nRangeError  //超出数值范围\nURIError  //使用encodeURI()或decodeURI()时,URL格式不正确\n\ntry{\n    someFun()\n}catch(e) {\n    if(e instanceof TypeError) {\n        // do something\n    }else if (e instanceof SyntaxError) {\n        // do something else\n    }else {\n        // fine\n    }\n}\n","excerpt":"","more":"try {\n    global.totallyNoSense();\n} catch (e) {\n    console.log(e.name);  // 打印错误类型\n    console.log(e.message);  //打印错误信息\n    console.log(e.stack);  //打印栈跟踪信息\n} finally {\n    //finally子句是可选的,无论try语句和catch语句是否执行,finally语句一定会执行,如果使用了finally语句,那么catch语句就是课选的了\n}\n\n\n// 7种错误类型\nError  //所有错误的基类\nEvalError  //使用eval函数时发生的错误\nTypeError   // 变量的类型不符合\nSyntaxError  //语法错误\nReferenceError   //引用错误,找不到对象\nRangeError  //超出数值范围\nURIError  //使用encodeURI()或decodeURI()时,URL格式不正确\n\ntry{\n    someFun()\n}catch(e) {\n    if(e instanceof TypeError) {\n        // do something\n    }else if (e instanceof SyntaxError) {\n        // do something else\n    }else {\n        // fine\n    }\n}\n"},{"_content":"// 定义函数的两种方式\n// 1.函数声明,具有函数提升的作用,不论函数在调用之前还是之后都没关系,var没有提升的作用\nfunction clare(arg) {}\n// 2.函数表达式,创建一个函数,并将它赋给一个变量,这个函数是匿名函数,也叫做拉姆达函数\nvar express = function(arg) {}\n\n// arguments的callee方法是一个指向正在执行函数的指针,已经被弃用\n//经典的阶乘函数\nfunction factorial(num) {\n    if (num <= 1) {\n        return 1;\n    } else {\n        // return num * factorial(num - 1);\n        return num*arguments.callee(num -1);\n        // 与函数名这个指针解耦\n    }\n}\nconsole.log(factorial(5)); //120\n// 函数的caller方法指向调用该函数的那个函数,如果在全局环境下调用,则为null\nfunction caller(){\n    anotherFun();\n}\n\nfunction anotherFun() {\n    console.log(arguments.callee.caller); //解耦\n}\n\ncaller() //Function: caller\n\nconsole.log(caller.length);  //0\n// 函数的length属性返回函数希望接收的参数个数\n\n// 函数名是指针,函数是对象,函数名是指向对象的指针\n\n\n//闭包/;\n","source":"_drafts/code/functional.js","raw":"// 定义函数的两种方式\n// 1.函数声明,具有函数提升的作用,不论函数在调用之前还是之后都没关系,var没有提升的作用\nfunction clare(arg) {}\n// 2.函数表达式,创建一个函数,并将它赋给一个变量,这个函数是匿名函数,也叫做拉姆达函数\nvar express = function(arg) {}\n\n// arguments的callee方法是一个指向正在执行函数的指针,已经被弃用\n//经典的阶乘函数\nfunction factorial(num) {\n    if (num <= 1) {\n        return 1;\n    } else {\n        // return num * factorial(num - 1);\n        return num*arguments.callee(num -1);\n        // 与函数名这个指针解耦\n    }\n}\nconsole.log(factorial(5)); //120\n// 函数的caller方法指向调用该函数的那个函数,如果在全局环境下调用,则为null\nfunction caller(){\n    anotherFun();\n}\n\nfunction anotherFun() {\n    console.log(arguments.callee.caller); //解耦\n}\n\ncaller() //Function: caller\n\nconsole.log(caller.length);  //0\n// 函数的length属性返回函数希望接收的参数个数\n\n// 函数名是指针,函数是对象,函数名是指向对象的指针\n\n\n//闭包/;\n","slug":"code/functional","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.200Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzsp50012n9fk6qgbsxzm","content":"// 定义函数的两种方式\n// 1.函数声明,具有函数提升的作用,不论函数在调用之前还是之后都没关系,var没有提升的作用\nfunction clare(arg) {}\n// 2.函数表达式,创建一个函数,并将它赋给一个变量,这个函数是匿名函数,也叫做拉姆达函数\nvar express = function(arg) {}\n\n// arguments的callee方法是一个指向正在执行函数的指针,已经被弃用\n//经典的阶乘函数\nfunction factorial(num) {\n    if (num ","excerpt":"","more":"// 定义函数的两种方式\n// 1.函数声明,具有函数提升的作用,不论函数在调用之前还是之后都没关系,var没有提升的作用\nfunction clare(arg) {}\n// 2.函数表达式,创建一个函数,并将它赋给一个变量,这个函数是匿名函数,也叫做拉姆达函数\nvar express = function(arg) {}\n\n// arguments的callee方法是一个指向正在执行函数的指针,已经被弃用\n//经典的阶乘函数\nfunction factorial(num) {\n    if (num <= 1) {\n        return 1;\n    } else {\n        // return num * factorial(num - 1);\n        return num*arguments.callee(num -1);\n        // 与函数名这个指针解耦\n    }\n}\nconsole.log(factorial(5)); //120\n// 函数的caller方法指向调用该函数的那个函数,如果在全局环境下调用,则为null\nfunction caller(){\n    anotherFun();\n}\n\nfunction anotherFun() {\n    console.log(arguments.callee.caller); //解耦\n}\n\ncaller() //Function: caller\n\nconsole.log(caller.length);  //0\n// 函数的length属性返回函数希望接收的参数个数\n\n// 函数名是指针,函数是对象,函数名是指向对象的指针\n\n\n//闭包/;\n"},{"_content":"//创建对象的几种方法\n\n// 1.字面量\nvar language = {\n    'version' : 'es2015',\n    'name' : 'JavaScript',\n    'founder' : 'someone',\n    showVer : function() {\n        console.log(this.version);\n    }\n}\n\nfor(var i in language) {\n    console.log(i);\n}\nconsole.log(language);\n\n// 2.工厂模式\nfunction createLanguage(version,name,founder) {\n    var oo = new Object();\n    oo.version = version;\n    oo.name = name;\n    oo.founder = founder;\n    oo.showVer = function() {\n        console.log(oo.version);\n    }\n    return oo;\n}\n\nvar js = createLanguage('es5','js','me');\n\nconsole.log(js);\nconsole.log(js.showVer());\n\n\n// 3。構造函數模式\nfunction Language(version,name,founder) {\n    this.version = version;\n    this.name = name;\n    this.founder = founder;\n    this.showVer = function() {\n        console.log(this.version);\n    }\n}\n\nvar java = new Language('8','java','someone');\nvar javascript = new Language('2015','javascript','someone');\n\nconsole.log(java.constructor === Language);\nconsole.log(javascript.constructor === Language);\n// 每个实例都有一个属性，constructor指向构造函数\n\nconsole.log(java.valueOf());\n\n// 3.1 构造函数也是函数，任何函数通过new 来调用就是构造函数，如果不通过new调用，就是普通的函数\nLanguage('3','python','google');   //作为普通函数调用，这时作用域是全局\nshowVer()   //全局中的showVer()函数\n\n\nvar o = new Object();\nLanguage.call(o,'2','python','me');   //在另一个对象的作用域调用\nconsole.log(o.name);\n\n// 3.2 构造函数的问题\n// 每实例化一个对象，同时实现相同功能的方法就实例了一次，这造成了内存的浪费，使用原型模式来解决\n\n// 4. 原型模式\nfunction Lang(){}; //== new Function()\nLang.prototype.name = 'php';\nLang.prototype.version = '6';\nLang.prototype.founder = 'bird';\nLang.prototype.showVer = function showVer(){\n    console.log(this.version);\n}\nvar hp = new Lang();\nvar ph = new Lang();\nconsole.log(hp.showVer == ph.showVer);\n// 共享的属性和方法通过原型对象保存\nconsole.log(Lang.prototype.constructor == ph.constructor);\n// prototype是函数的属性,指向函数的原型对象，constructor是对象的属性，原型对象自动获得一个constructor属性,指向这个构造函数\nconsole.log(hp.__proto__ === Lang.prototype);\n//实例对象都有一个指针[[prototype]]指向原型对象,通过__proto__属性实现了\n//实例对象的__proto__方法指向构造函数的原型对象,如果实例对象上没有的方法和属性在实际调用中可以获得,这说明实例对象上的方法,属性都继承自这个实例对象,实例对象与构造函数之间并没有直接的联系,而是通过构造函数的原型对象联系\n\nconsole.log(Lang.prototype.isPrototypeOf(hp));  //true\n// 原型对象的isPrototypeOf方法可以检测原型对象是否是实例对象的原型\n\n\nconsole.log(hp.hasOwnProperty(name));  //false\n// hp没有自己的name属性,而是通过原型链继承圆形对象的name属性而来的\n\nconsole.log(Object.getPrototypeOf(hp) === Lang.prototype); //true\nconsole.log(Object.getPrototypeOf(hp).showVer()); //6\n// 通过Object.getPrototypeOf()方法可以获得实例对象的原型\n\nhp.name = 'c';\nconsole.log(hp.name); //c\nconsole.log(ph.name); //php\n// 在实例对象中添加与原型对象中同名的属性会屏蔽掉原型的属性,通过delete操作符删除实例中的属性,就可以恢复连接\ndelete hp.name;\nconsole.log(hp.name); //php\nconsole.log(ph.name);  //php\n\n\n// in操作符可以检测属性是否在某一对象中,可以根据原型链查找\nph.name = 'ruby';\nconsole.log('name' in ph); //true\ndelete ph.name;\nconsole.log('name' in ph); //true\nconsole.log(ph.hasOwnProperty(name)); //false\n\nvar keys = Object.keys(hp.__proto__);\nconsole.log(keys);  // [ 'name', 'version', 'founder', 'showVer' ]\n//使用Object.keys()方法接受一个对象作为参数,返回当前对象上的所有可枚举的属性的数组\n\nvar allkeys = Object.getOwnPropertyNames(hp.__proto__);\nconsole.log(allkeys);\n//Object.getOwnPropertyNames()方法可以返回该对象上所有的不论是否可以枚举的属性\n\n// 更简单的原型语法\n// 每次为一个原型对象添加方法都要写Lang.prototype的代码,这样不够DRY,可以这样\nfunction Person(){};\n\nPerson.prototype = {\n    name : 'quill',\n    age : '20',\n    gender : 'male'\n}\n//使用对象字面量重写了整个原型对象,这样更DRY\nconsole.log(Object.getOwnPropertyNames(Person.prototype));  //[ 'name', 'age', 'gender' ]\nconsole.log(Person.prototype.constructor === Person);  //false\nconsole.log(Person.prototype.constructor === Object);  //true\n//这样做虽然更DRY,但是Person的原型对象的constructor属性就不再指向Person了,而是指向Object,为什么呢,因为使用字面量等同于\nvar obj = new Object();\nobj.name = 'quill';\nobj.age = '20';\nobj.gender = 'male';\n\nconsole.log(obj.constructor);  //Function Object\n\n//因此如果想要恢复默认的constructor,可以显示的指定constructor\n\nPerson.prototype.constructor = Person;\nconsole.log(Person.prototype.constructor === Person);  //true\n\nvar son = new Person();\nconsole.log(son.constructor);  //Function Person\n\n// 原型是动态的,如果先实例化一个对象,再在原型对象上增加或修改删除属性,都会动态的反应出来\nconsole.log(son.age); //20\nPerson.prototype.age = '22';\nconsole.log(son.age);  //22\n//这是因为实例和原型之间的松散连接关系,因为son实例中没有age这个属性,调用这个属性时,它自然在原型链中去搜索,而这是原型的age属性已经改变,所以找到的就是改变后的属性了\n\n//如果在实例化一个对象之后,重写了这个构造函数的原型,那么这个实例与原型之间的指针就断开了\nfunction Books(){};\n\nvar ab  = new Books();\n\nBooks.prototype = {\n    name : 'good part'\n}\n\nconsole.log(ab.name);\n//所以在已经实例化对象后不可以再使用对象字面量重写原型\n\n//原型模式的问题,原型模式最大的问题在于共享,实例对于不是自己私有的属性,如果对其进行修改,则会反应在每一个实例当中\n\n// 5.组合使用构造函数模式和原型模式\nfunction Car(brand,wheel,seats){\n    this.brand = brand;\n    this.wheel = wheel;\n    this.seats = seats;\n    this.money = [100,200];\n}\n\nCar.prototype = {\n    constructor : Car,\n    showBrand : function showBrand() {\n        console.log(this.brand);\n    }\n}\n\nvar ford = new Car('ford','4',5);\nvar bmw = new Car('bmw','4',2)\n\nford.money.push(300);\nconsole.log(ford.money);\nconsole.log(bmw.money);\n\n\n//6.动态原型模式,在上面的组合使用构造函数和原型模式中,构造函数和原型模式是独立分开的,没有体现函数的封装性,所以采用下面更加完美的动态原型模式\n\nfunction Car(brand,wheel,seats){\n    this.brand = brand;\n    this.wheel = wheel;\n    this.seats = seats;\n    this.money = [100,200];\n    if(typeof this.showBrand != 'function') {\n        Car.prototype.showBrand = function showBrand() {\n            console.log(this.brand);\n        }\n    }\n}\n\nvar benz = new Car('benz',4,4);\nconsole.log(benz.wheel);\n\n// 继承的几种实现方法\n\n// 1. 借用构造函数\nfunction SuperType() {\n    this.colors = ['red','green','blue'];\n}\n\nfunction SubType() {\n    SuperType.call(this);\n}\n\nvar ins1 = new SuperType();\nvar ins2 = new SubType();\nins2.colors.push('black');\nconsole.log(ins2.colors);\nconsole.log(ins1.colors);\n\n// 2.组合继承\n","source":"_drafts/code/oo.js","raw":"//创建对象的几种方法\n\n// 1.字面量\nvar language = {\n    'version' : 'es2015',\n    'name' : 'JavaScript',\n    'founder' : 'someone',\n    showVer : function() {\n        console.log(this.version);\n    }\n}\n\nfor(var i in language) {\n    console.log(i);\n}\nconsole.log(language);\n\n// 2.工厂模式\nfunction createLanguage(version,name,founder) {\n    var oo = new Object();\n    oo.version = version;\n    oo.name = name;\n    oo.founder = founder;\n    oo.showVer = function() {\n        console.log(oo.version);\n    }\n    return oo;\n}\n\nvar js = createLanguage('es5','js','me');\n\nconsole.log(js);\nconsole.log(js.showVer());\n\n\n// 3。構造函數模式\nfunction Language(version,name,founder) {\n    this.version = version;\n    this.name = name;\n    this.founder = founder;\n    this.showVer = function() {\n        console.log(this.version);\n    }\n}\n\nvar java = new Language('8','java','someone');\nvar javascript = new Language('2015','javascript','someone');\n\nconsole.log(java.constructor === Language);\nconsole.log(javascript.constructor === Language);\n// 每个实例都有一个属性，constructor指向构造函数\n\nconsole.log(java.valueOf());\n\n// 3.1 构造函数也是函数，任何函数通过new 来调用就是构造函数，如果不通过new调用，就是普通的函数\nLanguage('3','python','google');   //作为普通函数调用，这时作用域是全局\nshowVer()   //全局中的showVer()函数\n\n\nvar o = new Object();\nLanguage.call(o,'2','python','me');   //在另一个对象的作用域调用\nconsole.log(o.name);\n\n// 3.2 构造函数的问题\n// 每实例化一个对象，同时实现相同功能的方法就实例了一次，这造成了内存的浪费，使用原型模式来解决\n\n// 4. 原型模式\nfunction Lang(){}; //== new Function()\nLang.prototype.name = 'php';\nLang.prototype.version = '6';\nLang.prototype.founder = 'bird';\nLang.prototype.showVer = function showVer(){\n    console.log(this.version);\n}\nvar hp = new Lang();\nvar ph = new Lang();\nconsole.log(hp.showVer == ph.showVer);\n// 共享的属性和方法通过原型对象保存\nconsole.log(Lang.prototype.constructor == ph.constructor);\n// prototype是函数的属性,指向函数的原型对象，constructor是对象的属性，原型对象自动获得一个constructor属性,指向这个构造函数\nconsole.log(hp.__proto__ === Lang.prototype);\n//实例对象都有一个指针[[prototype]]指向原型对象,通过__proto__属性实现了\n//实例对象的__proto__方法指向构造函数的原型对象,如果实例对象上没有的方法和属性在实际调用中可以获得,这说明实例对象上的方法,属性都继承自这个实例对象,实例对象与构造函数之间并没有直接的联系,而是通过构造函数的原型对象联系\n\nconsole.log(Lang.prototype.isPrototypeOf(hp));  //true\n// 原型对象的isPrototypeOf方法可以检测原型对象是否是实例对象的原型\n\n\nconsole.log(hp.hasOwnProperty(name));  //false\n// hp没有自己的name属性,而是通过原型链继承圆形对象的name属性而来的\n\nconsole.log(Object.getPrototypeOf(hp) === Lang.prototype); //true\nconsole.log(Object.getPrototypeOf(hp).showVer()); //6\n// 通过Object.getPrototypeOf()方法可以获得实例对象的原型\n\nhp.name = 'c';\nconsole.log(hp.name); //c\nconsole.log(ph.name); //php\n// 在实例对象中添加与原型对象中同名的属性会屏蔽掉原型的属性,通过delete操作符删除实例中的属性,就可以恢复连接\ndelete hp.name;\nconsole.log(hp.name); //php\nconsole.log(ph.name);  //php\n\n\n// in操作符可以检测属性是否在某一对象中,可以根据原型链查找\nph.name = 'ruby';\nconsole.log('name' in ph); //true\ndelete ph.name;\nconsole.log('name' in ph); //true\nconsole.log(ph.hasOwnProperty(name)); //false\n\nvar keys = Object.keys(hp.__proto__);\nconsole.log(keys);  // [ 'name', 'version', 'founder', 'showVer' ]\n//使用Object.keys()方法接受一个对象作为参数,返回当前对象上的所有可枚举的属性的数组\n\nvar allkeys = Object.getOwnPropertyNames(hp.__proto__);\nconsole.log(allkeys);\n//Object.getOwnPropertyNames()方法可以返回该对象上所有的不论是否可以枚举的属性\n\n// 更简单的原型语法\n// 每次为一个原型对象添加方法都要写Lang.prototype的代码,这样不够DRY,可以这样\nfunction Person(){};\n\nPerson.prototype = {\n    name : 'quill',\n    age : '20',\n    gender : 'male'\n}\n//使用对象字面量重写了整个原型对象,这样更DRY\nconsole.log(Object.getOwnPropertyNames(Person.prototype));  //[ 'name', 'age', 'gender' ]\nconsole.log(Person.prototype.constructor === Person);  //false\nconsole.log(Person.prototype.constructor === Object);  //true\n//这样做虽然更DRY,但是Person的原型对象的constructor属性就不再指向Person了,而是指向Object,为什么呢,因为使用字面量等同于\nvar obj = new Object();\nobj.name = 'quill';\nobj.age = '20';\nobj.gender = 'male';\n\nconsole.log(obj.constructor);  //Function Object\n\n//因此如果想要恢复默认的constructor,可以显示的指定constructor\n\nPerson.prototype.constructor = Person;\nconsole.log(Person.prototype.constructor === Person);  //true\n\nvar son = new Person();\nconsole.log(son.constructor);  //Function Person\n\n// 原型是动态的,如果先实例化一个对象,再在原型对象上增加或修改删除属性,都会动态的反应出来\nconsole.log(son.age); //20\nPerson.prototype.age = '22';\nconsole.log(son.age);  //22\n//这是因为实例和原型之间的松散连接关系,因为son实例中没有age这个属性,调用这个属性时,它自然在原型链中去搜索,而这是原型的age属性已经改变,所以找到的就是改变后的属性了\n\n//如果在实例化一个对象之后,重写了这个构造函数的原型,那么这个实例与原型之间的指针就断开了\nfunction Books(){};\n\nvar ab  = new Books();\n\nBooks.prototype = {\n    name : 'good part'\n}\n\nconsole.log(ab.name);\n//所以在已经实例化对象后不可以再使用对象字面量重写原型\n\n//原型模式的问题,原型模式最大的问题在于共享,实例对于不是自己私有的属性,如果对其进行修改,则会反应在每一个实例当中\n\n// 5.组合使用构造函数模式和原型模式\nfunction Car(brand,wheel,seats){\n    this.brand = brand;\n    this.wheel = wheel;\n    this.seats = seats;\n    this.money = [100,200];\n}\n\nCar.prototype = {\n    constructor : Car,\n    showBrand : function showBrand() {\n        console.log(this.brand);\n    }\n}\n\nvar ford = new Car('ford','4',5);\nvar bmw = new Car('bmw','4',2)\n\nford.money.push(300);\nconsole.log(ford.money);\nconsole.log(bmw.money);\n\n\n//6.动态原型模式,在上面的组合使用构造函数和原型模式中,构造函数和原型模式是独立分开的,没有体现函数的封装性,所以采用下面更加完美的动态原型模式\n\nfunction Car(brand,wheel,seats){\n    this.brand = brand;\n    this.wheel = wheel;\n    this.seats = seats;\n    this.money = [100,200];\n    if(typeof this.showBrand != 'function') {\n        Car.prototype.showBrand = function showBrand() {\n            console.log(this.brand);\n        }\n    }\n}\n\nvar benz = new Car('benz',4,4);\nconsole.log(benz.wheel);\n\n// 继承的几种实现方法\n\n// 1. 借用构造函数\nfunction SuperType() {\n    this.colors = ['red','green','blue'];\n}\n\nfunction SubType() {\n    SuperType.call(this);\n}\n\nvar ins1 = new SuperType();\nvar ins2 = new SubType();\nins2.colors.push('black');\nconsole.log(ins2.colors);\nconsole.log(ins1.colors);\n\n// 2.组合继承\n","slug":"code/oo","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.200Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzsp80013n9fkoxu0pkww","content":"//创建对象的几种方法\n\n// 1.字面量\nvar language = {\n    'version' : 'es2015',\n    'name' : 'JavaScript',\n    'founder' : 'someone',\n    showVer : function() {\n        console.log(this.version);\n    }\n}\n\nfor(var i in language) {\n    console.log(i);\n}\nconsole.log(language);\n\n// 2.工厂模式\nfunction createLanguage(version,name,founder) {\n    var oo = new Object();\n    oo.version = version;\n    oo.name = name;\n    oo.founder = founder;\n    oo.showVer = function() {\n        console.log(oo.version);\n    }\n    return oo;\n}\n\nvar js = createLanguage('es5','js','me');\n\nconsole.log(js);\nconsole.log(js.showVer());\n\n\n// 3。構造函數模式\nfunction Language(version,name,founder) {\n    this.version = version;\n    this.name = name;\n    this.founder = founder;\n    this.showVer = function() {\n        console.log(this.version);\n    }\n}\n\nvar java = new Language('8','java','someone');\nvar javascript = new Language('2015','javascript','someone');\n\nconsole.log(java.constructor === Language);\nconsole.log(javascript.constructor === Language);\n// 每个实例都有一个属性，constructor指向构造函数\n\nconsole.log(java.valueOf());\n\n// 3.1 构造函数也是函数，任何函数通过new 来调用就是构造函数，如果不通过new调用，就是普通的函数\nLanguage('3','python','google');   //作为普通函数调用，这时作用域是全局\nshowVer()   //全局中的showVer()函数\n\n\nvar o = new Object();\nLanguage.call(o,'2','python','me');   //在另一个对象的作用域调用\nconsole.log(o.name);\n\n// 3.2 构造函数的问题\n// 每实例化一个对象，同时实现相同功能的方法就实例了一次，这造成了内存的浪费，使用原型模式来解决\n\n// 4. 原型模式\nfunction Lang(){}; //== new Function()\nLang.prototype.name = 'php';\nLang.prototype.version = '6';\nLang.prototype.founder = 'bird';\nLang.prototype.showVer = function showVer(){\n    console.log(this.version);\n}\nvar hp = new Lang();\nvar ph = new Lang();\nconsole.log(hp.showVer == ph.showVer);\n// 共享的属性和方法通过原型对象保存\nconsole.log(Lang.prototype.constructor == ph.constructor);\n// prototype是函数的属性,指向函数的原型对象，constructor是对象的属性，原型对象自动获得一个constructor属性,指向这个构造函数\nconsole.log(hp.__proto__ === Lang.prototype);\n//实例对象都有一个指针[[prototype]]指向原型对象,通过__proto__属性实现了\n//实例对象的__proto__方法指向构造函数的原型对象,如果实例对象上没有的方法和属性在实际调用中可以获得,这说明实例对象上的方法,属性都继承自这个实例对象,实例对象与构造函数之间并没有直接的联系,而是通过构造函数的原型对象联系\n\nconsole.log(Lang.prototype.isPrototypeOf(hp));  //true\n// 原型对象的isPrototypeOf方法可以检测原型对象是否是实例对象的原型\n\n\nconsole.log(hp.hasOwnProperty(name));  //false\n// hp没有自己的name属性,而是通过原型链继承圆形对象的name属性而来的\n\nconsole.log(Object.getPrototypeOf(hp) === Lang.prototype); //true\nconsole.log(Object.getPrototypeOf(hp).showVer()); //6\n// 通过Object.getPrototypeOf()方法可以获得实例对象的原型\n\nhp.name = 'c';\nconsole.log(hp.name); //c\nconsole.log(ph.name); //php\n// 在实例对象中添加与原型对象中同名的属性会屏蔽掉原型的属性,通过delete操作符删除实例中的属性,就可以恢复连接\ndelete hp.name;\nconsole.log(hp.name); //php\nconsole.log(ph.name);  //php\n\n\n// in操作符可以检测属性是否在某一对象中,可以根据原型链查找\nph.name = 'ruby';\nconsole.log('name' in ph); //true\ndelete ph.name;\nconsole.log('name' in ph); //true\nconsole.log(ph.hasOwnProperty(name)); //false\n\nvar keys = Object.keys(hp.__proto__);\nconsole.log(keys);  // [ 'name', 'version', 'founder', 'showVer' ]\n//使用Object.keys()方法接受一个对象作为参数,返回当前对象上的所有可枚举的属性的数组\n\nvar allkeys = Object.getOwnPropertyNames(hp.__proto__);\nconsole.log(allkeys);\n//Object.getOwnPropertyNames()方法可以返回该对象上所有的不论是否可以枚举的属性\n\n// 更简单的原型语法\n// 每次为一个原型对象添加方法都要写Lang.prototype的代码,这样不够DRY,可以这样\nfunction Person(){};\n\nPerson.prototype = {\n    name : 'quill',\n    age : '20',\n    gender : 'male'\n}\n//使用对象字面量重写了整个原型对象,这样更DRY\nconsole.log(Object.getOwnPropertyNames(Person.prototype));  //[ 'name', 'age', 'gender' ]\nconsole.log(Person.prototype.constructor === Person);  //false\nconsole.log(Person.prototype.constructor === Object);  //true\n//这样做虽然更DRY,但是Person的原型对象的constructor属性就不再指向Person了,而是指向Object,为什么呢,因为使用字面量等同于\nvar obj = new Object();\nobj.name = 'quill';\nobj.age = '20';\nobj.gender = 'male';\n\nconsole.log(obj.constructor);  //Function Object\n\n//因此如果想要恢复默认的constructor,可以显示的指定constructor\n\nPerson.prototype.constructor = Person;\nconsole.log(Person.prototype.constructor === Person);  //true\n\nvar son = new Person();\nconsole.log(son.constructor);  //Function Person\n\n// 原型是动态的,如果先实例化一个对象,再在原型对象上增加或修改删除属性,都会动态的反应出来\nconsole.log(son.age); //20\nPerson.prototype.age = '22';\nconsole.log(son.age);  //22\n//这是因为实例和原型之间的松散连接关系,因为son实例中没有age这个属性,调用这个属性时,它自然在原型链中去搜索,而这是原型的age属性已经改变,所以找到的就是改变后的属性了\n\n//如果在实例化一个对象之后,重写了这个构造函数的原型,那么这个实例与原型之间的指针就断开了\nfunction Books(){};\n\nvar ab  = new Books();\n\nBooks.prototype = {\n    name : 'good part'\n}\n\nconsole.log(ab.name);\n//所以在已经实例化对象后不可以再使用对象字面量重写原型\n\n//原型模式的问题,原型模式最大的问题在于共享,实例对于不是自己私有的属性,如果对其进行修改,则会反应在每一个实例当中\n\n// 5.组合使用构造函数模式和原型模式\nfunction Car(brand,wheel,seats){\n    this.brand = brand;\n    this.wheel = wheel;\n    this.seats = seats;\n    this.money = [100,200];\n}\n\nCar.prototype = {\n    constructor : Car,\n    showBrand : function showBrand() {\n        console.log(this.brand);\n    }\n}\n\nvar ford = new Car('ford','4',5);\nvar bmw = new Car('bmw','4',2)\n\nford.money.push(300);\nconsole.log(ford.money);\nconsole.log(bmw.money);\n\n\n//6.动态原型模式,在上面的组合使用构造函数和原型模式中,构造函数和原型模式是独立分开的,没有体现函数的封装性,所以采用下面更加完美的动态原型模式\n\nfunction Car(brand,wheel,seats){\n    this.brand = brand;\n    this.wheel = wheel;\n    this.seats = seats;\n    this.money = [100,200];\n    if(typeof this.showBrand != 'function') {\n        Car.prototype.showBrand = function showBrand() {\n            console.log(this.brand);\n        }\n    }\n}\n\nvar benz = new Car('benz',4,4);\nconsole.log(benz.wheel);\n\n// 继承的几种实现方法\n\n// 1. 借用构造函数\nfunction SuperType() {\n    this.colors = ['red','green','blue'];\n}\n\nfunction SubType() {\n    SuperType.call(this);\n}\n\nvar ins1 = new SuperType();\nvar ins2 = new SubType();\nins2.colors.push('black');\nconsole.log(ins2.colors);\nconsole.log(ins1.colors);\n\n// 2.组合继承\n","excerpt":"","more":"//创建对象的几种方法\n\n// 1.字面量\nvar language = {\n    'version' : 'es2015',\n    'name' : 'JavaScript',\n    'founder' : 'someone',\n    showVer : function() {\n        console.log(this.version);\n    }\n}\n\nfor(var i in language) {\n    console.log(i);\n}\nconsole.log(language);\n\n// 2.工厂模式\nfunction createLanguage(version,name,founder) {\n    var oo = new Object();\n    oo.version = version;\n    oo.name = name;\n    oo.founder = founder;\n    oo.showVer = function() {\n        console.log(oo.version);\n    }\n    return oo;\n}\n\nvar js = createLanguage('es5','js','me');\n\nconsole.log(js);\nconsole.log(js.showVer());\n\n\n// 3。構造函數模式\nfunction Language(version,name,founder) {\n    this.version = version;\n    this.name = name;\n    this.founder = founder;\n    this.showVer = function() {\n        console.log(this.version);\n    }\n}\n\nvar java = new Language('8','java','someone');\nvar javascript = new Language('2015','javascript','someone');\n\nconsole.log(java.constructor === Language);\nconsole.log(javascript.constructor === Language);\n// 每个实例都有一个属性，constructor指向构造函数\n\nconsole.log(java.valueOf());\n\n// 3.1 构造函数也是函数，任何函数通过new 来调用就是构造函数，如果不通过new调用，就是普通的函数\nLanguage('3','python','google');   //作为普通函数调用，这时作用域是全局\nshowVer()   //全局中的showVer()函数\n\n\nvar o = new Object();\nLanguage.call(o,'2','python','me');   //在另一个对象的作用域调用\nconsole.log(o.name);\n\n// 3.2 构造函数的问题\n// 每实例化一个对象，同时实现相同功能的方法就实例了一次，这造成了内存的浪费，使用原型模式来解决\n\n// 4. 原型模式\nfunction Lang(){}; //== new Function()\nLang.prototype.name = 'php';\nLang.prototype.version = '6';\nLang.prototype.founder = 'bird';\nLang.prototype.showVer = function showVer(){\n    console.log(this.version);\n}\nvar hp = new Lang();\nvar ph = new Lang();\nconsole.log(hp.showVer == ph.showVer);\n// 共享的属性和方法通过原型对象保存\nconsole.log(Lang.prototype.constructor == ph.constructor);\n// prototype是函数的属性,指向函数的原型对象，constructor是对象的属性，原型对象自动获得一个constructor属性,指向这个构造函数\nconsole.log(hp.__proto__ === Lang.prototype);\n//实例对象都有一个指针[[prototype]]指向原型对象,通过__proto__属性实现了\n//实例对象的__proto__方法指向构造函数的原型对象,如果实例对象上没有的方法和属性在实际调用中可以获得,这说明实例对象上的方法,属性都继承自这个实例对象,实例对象与构造函数之间并没有直接的联系,而是通过构造函数的原型对象联系\n\nconsole.log(Lang.prototype.isPrototypeOf(hp));  //true\n// 原型对象的isPrototypeOf方法可以检测原型对象是否是实例对象的原型\n\n\nconsole.log(hp.hasOwnProperty(name));  //false\n// hp没有自己的name属性,而是通过原型链继承圆形对象的name属性而来的\n\nconsole.log(Object.getPrototypeOf(hp) === Lang.prototype); //true\nconsole.log(Object.getPrototypeOf(hp).showVer()); //6\n// 通过Object.getPrototypeOf()方法可以获得实例对象的原型\n\nhp.name = 'c';\nconsole.log(hp.name); //c\nconsole.log(ph.name); //php\n// 在实例对象中添加与原型对象中同名的属性会屏蔽掉原型的属性,通过delete操作符删除实例中的属性,就可以恢复连接\ndelete hp.name;\nconsole.log(hp.name); //php\nconsole.log(ph.name);  //php\n\n\n// in操作符可以检测属性是否在某一对象中,可以根据原型链查找\nph.name = 'ruby';\nconsole.log('name' in ph); //true\ndelete ph.name;\nconsole.log('name' in ph); //true\nconsole.log(ph.hasOwnProperty(name)); //false\n\nvar keys = Object.keys(hp.__proto__);\nconsole.log(keys);  // [ 'name', 'version', 'founder', 'showVer' ]\n//使用Object.keys()方法接受一个对象作为参数,返回当前对象上的所有可枚举的属性的数组\n\nvar allkeys = Object.getOwnPropertyNames(hp.__proto__);\nconsole.log(allkeys);\n//Object.getOwnPropertyNames()方法可以返回该对象上所有的不论是否可以枚举的属性\n\n// 更简单的原型语法\n// 每次为一个原型对象添加方法都要写Lang.prototype的代码,这样不够DRY,可以这样\nfunction Person(){};\n\nPerson.prototype = {\n    name : 'quill',\n    age : '20',\n    gender : 'male'\n}\n//使用对象字面量重写了整个原型对象,这样更DRY\nconsole.log(Object.getOwnPropertyNames(Person.prototype));  //[ 'name', 'age', 'gender' ]\nconsole.log(Person.prototype.constructor === Person);  //false\nconsole.log(Person.prototype.constructor === Object);  //true\n//这样做虽然更DRY,但是Person的原型对象的constructor属性就不再指向Person了,而是指向Object,为什么呢,因为使用字面量等同于\nvar obj = new Object();\nobj.name = 'quill';\nobj.age = '20';\nobj.gender = 'male';\n\nconsole.log(obj.constructor);  //Function Object\n\n//因此如果想要恢复默认的constructor,可以显示的指定constructor\n\nPerson.prototype.constructor = Person;\nconsole.log(Person.prototype.constructor === Person);  //true\n\nvar son = new Person();\nconsole.log(son.constructor);  //Function Person\n\n// 原型是动态的,如果先实例化一个对象,再在原型对象上增加或修改删除属性,都会动态的反应出来\nconsole.log(son.age); //20\nPerson.prototype.age = '22';\nconsole.log(son.age);  //22\n//这是因为实例和原型之间的松散连接关系,因为son实例中没有age这个属性,调用这个属性时,它自然在原型链中去搜索,而这是原型的age属性已经改变,所以找到的就是改变后的属性了\n\n//如果在实例化一个对象之后,重写了这个构造函数的原型,那么这个实例与原型之间的指针就断开了\nfunction Books(){};\n\nvar ab  = new Books();\n\nBooks.prototype = {\n    name : 'good part'\n}\n\nconsole.log(ab.name);\n//所以在已经实例化对象后不可以再使用对象字面量重写原型\n\n//原型模式的问题,原型模式最大的问题在于共享,实例对于不是自己私有的属性,如果对其进行修改,则会反应在每一个实例当中\n\n// 5.组合使用构造函数模式和原型模式\nfunction Car(brand,wheel,seats){\n    this.brand = brand;\n    this.wheel = wheel;\n    this.seats = seats;\n    this.money = [100,200];\n}\n\nCar.prototype = {\n    constructor : Car,\n    showBrand : function showBrand() {\n        console.log(this.brand);\n    }\n}\n\nvar ford = new Car('ford','4',5);\nvar bmw = new Car('bmw','4',2)\n\nford.money.push(300);\nconsole.log(ford.money);\nconsole.log(bmw.money);\n\n\n//6.动态原型模式,在上面的组合使用构造函数和原型模式中,构造函数和原型模式是独立分开的,没有体现函数的封装性,所以采用下面更加完美的动态原型模式\n\nfunction Car(brand,wheel,seats){\n    this.brand = brand;\n    this.wheel = wheel;\n    this.seats = seats;\n    this.money = [100,200];\n    if(typeof this.showBrand != 'function') {\n        Car.prototype.showBrand = function showBrand() {\n            console.log(this.brand);\n        }\n    }\n}\n\nvar benz = new Car('benz',4,4);\nconsole.log(benz.wheel);\n\n// 继承的几种实现方法\n\n// 1. 借用构造函数\nfunction SuperType() {\n    this.colors = ['red','green','blue'];\n}\n\nfunction SubType() {\n    SuperType.call(this);\n}\n\nvar ins1 = new SuperType();\nvar ins2 = new SubType();\nins2.colors.push('black');\nconsole.log(ins2.colors);\nconsole.log(ins1.colors);\n\n// 2.组合继承\n"},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Ajax Test</title>\n</head>\n<body>\n    <div>\n        <input type=\"button\" value=\"click\">\n        <h1>show the responseText:</h1>\n        <p></p>\n    </div>\n\n    <script type=\"text/javascript\">\n        window.onload = function(){\n            var btn = document.getElementsByTagName('input')[0];\n            var para = document.getElementsByTagName('p')[0];\n            btn.onclick = function() {\n                var xhr = new XMLHttpRequest();\n                xhr.open('get','res.php',true);\n                xhr.send(null);\n                xhr.onreadystatechange = function() {\n                    if(xhr.readyState == 4) {\n                        if(xhr.status === 304 || xhr.status === 200) {\n                            para.innerHTML = xhr.responseText;\n                            console.log(xhr.responseText);\n                        }else {\n                            console.log('Request was unsucccessful:' + xhr.status);\n                            console.log(xhr.readyState);\n                        }\n                    }\n                }\n            }\n        }\n    </script>\n</body>\n</html>\n","source":"_drafts/code/ajax.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Ajax Test</title>\n</head>\n<body>\n    <div>\n        <input type=\"button\" value=\"click\">\n        <h1>show the responseText:</h1>\n        <p></p>\n    </div>\n\n    <script type=\"text/javascript\">\n        window.onload = function(){\n            var btn = document.getElementsByTagName('input')[0];\n            var para = document.getElementsByTagName('p')[0];\n            btn.onclick = function() {\n                var xhr = new XMLHttpRequest();\n                xhr.open('get','res.php',true);\n                xhr.send(null);\n                xhr.onreadystatechange = function() {\n                    if(xhr.readyState == 4) {\n                        if(xhr.status === 304 || xhr.status === 200) {\n                            para.innerHTML = xhr.responseText;\n                            console.log(xhr.responseText);\n                        }else {\n                            console.log('Request was unsucccessful:' + xhr.status);\n                            console.log(xhr.readyState);\n                        }\n                    }\n                }\n            }\n        }\n    </script>\n</body>\n</html>\n","slug":"code/ajax","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.200Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzspa0014n9fkfokes55g","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Ajax Test</title>\n</head>\n<body>\n    <div>\n        <input type=\"button\" value=\"click\">\n        <h1>show the responseText:</h1>\n        <p></p>\n    </div>\n\n    <script type=\"text/javascript\">\n        window.onload = function(){\n            var btn = document.getElementsByTagName('input')[0];\n            var para = document.getElementsByTagName('p')[0];\n            btn.onclick = function() {\n                var xhr = new XMLHttpRequest();\n                xhr.open('get','res.php',true);\n                xhr.send(null);\n                xhr.onreadystatechange = function() {\n                    if(xhr.readyState == 4) {\n                        if(xhr.status === 304 || xhr.status === 200) {\n                            para.innerHTML = xhr.responseText;\n                            console.log(xhr.responseText);\n                        }else {\n                            console.log('Request was unsucccessful:' + xhr.status);\n                            console.log(xhr.readyState);\n                        }\n                    }\n                }\n            }\n        }\n    </script>\n</body>\n</html>\n","excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Ajax Test</title>\n</head>\n<body>\n    <div>\n        <input type=\"button\" value=\"click\">\n        <h1>show the responseText:</h1>\n        <p></p>\n    </div>\n\n    <script type=\"text/javascript\">\n        window.onload = function(){\n            var btn = document.getElementsByTagName('input')[0];\n            var para = document.getElementsByTagName('p')[0];\n            btn.onclick = function() {\n                var xhr = new XMLHttpRequest();\n                xhr.open('get','res.php',true);\n                xhr.send(null);\n                xhr.onreadystatechange = function() {\n                    if(xhr.readyState == 4) {\n                        if(xhr.status === 304 || xhr.status === 200) {\n                            para.innerHTML = xhr.responseText;\n                            console.log(xhr.responseText);\n                        }else {\n                            console.log('Request was unsucccessful:' + xhr.status);\n                            console.log(xhr.readyState);\n                        }\n                    }\n                }\n            }\n        }\n    </script>\n</body>\n</html>\n"},{"_content":"1. 禁止浏览器缩放\n<meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\" />\n","source":"_drafts/code/stuff.html","raw":"1. 禁止浏览器缩放\n<meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\" />\n","slug":"code/stuff","published":0,"date":"2016-10-29T06:22:21.643Z","updated":"2016-10-29T05:05:43.204Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"civ3wzspc0015n9fkr1r39o9o","content":"1. 禁止浏览器缩放\n<meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\">\n","excerpt":"","more":"1. 禁止浏览器缩放\n<meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\" />\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"civ3wzsa50003n9fkrfkr9u2o","tag_id":"civ3wzsaf0005n9fkryptcznr","_id":"civ3wzsax0009n9fk6m8wu6bu"},{"post_id":"civ3wzsc7000ln9fkx4jr9b7b","tag_id":"civ3wzscb000nn9fky3wj8lro","_id":"civ3wzsck000rn9fk3zlv84qg"}],"Tag":[{"name":"SQL","_id":"civ3wzsaf0005n9fkryptcznr"},{"name":"Python","_id":"civ3wzscb000nn9fky3wj8lro"}]}}